let upPressed = false;
let downPressed = false;
let leftPressed = false;
let rightPressed = false;
let playerCanMove = false;

const main = document.querySelector('main');

let maze = [
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 2, 0, 1, 0, 0, 0, 0, 3, 1],
    [1, 0, 0, 0, 0, 0, 0, 1, 1, 1],
    [1, 3, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 1, 1, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 1, 1, 1],
    [1, 0, 0, 1, 0, 3, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 1, 0, 1],
    [1, 3, 1, 0, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
];

for (let y of maze) {
    for (let x of y) {
        let block = document.createElement('div');
        block.classList.add('block');

        switch (x) {
            case 1:
                block.classList.add('wall');
                break;
            case 2:
                block.id = 'player';
                let mouth = document.createElement('div');
                mouth.classList.add('mouth');
                block.appendChild(mouth);
                break;
            case 3:
                block.classList.add('enemy');
                break;
            default:
                block.classList.add('point');
                block.style.height = '1vh';
                block.style.width = '1vh';
        }

        main.appendChild(block);
    }
}

function keyUp(event) {
    if (playerCanMove) {
        if (event.key === 'ArrowUp') {
            upPressed = false;
        } else if (event.key === 'ArrowDown') {
            downPressed = false;
        } else if (event.key === 'ArrowLeft') {
            leftPressed = false;
        } else if (event.key === 'ArrowRight') {
            rightPressed = false;
        }
    }
}

function keyDown(event) {
    if (playerCanMove) {
        if (event.key === 'ArrowUp') {
            upPressed = true;
        } else if (event.key === 'ArrowDown') {
            downPressed = true;
        } else if (event.key === 'ArrowLeft') {
            leftPressed = true;
        } else if (event.key === 'ArrowRight') {
            rightPressed = true;
        }
    }
}

const player = document.querySelector('#player');
const playerMouth = player.querySelector('.mouth');
let playerTop = 0;
let playerLeft = 0;

document.addEventListener('keydown', keyDown);
document.addEventListener('keyup', keyUp);
document.getElementById('lbttn').addEventListener('click', () => {leftPressed = true; setTimeout(() => leftPressed = false, 100);});
document.getElementById('ubttn').addEventListener('click', () => {upPressed = true; setTimeout(() => upPressed = false, 100);});
document.getElementById('rbttn').addEventListener('click', () => {rightPressed = true; setTimeout(() => rightPressed = false, 100);});
document.getElementById('dbttn').addEventListener('click', () => {downPressed = true; setTimeout(() => downPressed = false, 100);});

const startBtn = document.querySelector('.start');
const startDiv = document.querySelector('.startDiv');

function startGame() {
  startDiv.style.display = 'none';
  playerCanMove = true;
}

startBtn.addEventListener('click', startGame);

function checkCollisions(nextTop, nextBottom, nextLeft, nextRight) {
    let topLeftElement = document.elementFromPoint(nextLeft, nextTop);
    let topRightElement = document.elementFromPoint(nextRight, nextTop);
    let bottomLeftElement = document.elementFromPoint(nextLeft, nextBottom);
    let bottomRightElement = document.elementFromPoint(nextRight, nextBottom);

    if (topLeftElement.classList.contains('wall') || 
        topRightElement.classList.contains('wall') ||
        bottomLeftElement.classList.contains('wall') ||
        bottomRightElement.classList.contains('wall')) {
        return false;
    }
    return true;
}

setInterval(function () {
    if (playerCanMove) {
        let position = player.getBoundingClientRect();
        let nextTop = position.top - (upPressed ? 1 : 0) + (downPressed ? 1 : 0);
        let nextBottom = position.bottom + (downPressed ? 1 : 0) - (upPressed ? 1 : 0);
        let nextLeft = position.left - (leftPressed ? 1 : 0) + (rightPressed ? 1 : 0);
        let nextRight = position.right + (rightPressed ? 1 : 0) - (leftPressed ? 1 : 0);

        if (checkCollisions(nextTop, nextBottom, nextLeft, nextRight)) {
            if (downPressed) {
                playerTop++;
                player.style.top = playerTop + 'px';
                playerMouth.classList = 'down';
            } else if (upPressed) {
                playerTop--;
                player.style.top = playerTop + 'px';
                playerMouth.classList = 'up';
            } else if (leftPressed) {
                playerLeft--;
                player.style.left = playerLeft + 'px';
                playerMouth.classList = 'left';
            } else if (rightPressed) {
                playerLeft++;
                player.style.left = playerLeft + 'px';
                playerMouth.classList = 'right';
            }
        }
    }
    checkEnemyCollision();
}, 1);

let lives = 3;
let invulnerable = false;

function checkEnemyCollision() {
    if (invulnerable) return;

    const enemies = document.querySelectorAll('.enemy');
    const playerRect = player.getBoundingClientRect();

    for (let enemy of enemies) {
        const enemyRect = enemy.getBoundingClientRect();
        if (playerRect.left < enemyRect.right && playerRect.right > enemyRect.left &&
            playerRect.top < enemyRect.bottom && playerRect.bottom > enemyRect.top) {
            player.classList.add('hit');
            setTimeout(() => player.classList.remove('hit'), 2000);
            
            lives--;
            updateLivesDisplay();
            makePlayerInvulnerable();

            if (lives === 0) {
                gameOver();
            }
            break;
        }
    }
}

function makePlayerInvulnerable() {
    invulnerable = true;
    setTimeout(() => {
        invulnerable = false;
    }, 1500);
}

function updateLivesDisplay() {
    const livesList = document.querySelector('.lives ul');
    livesList.innerHTML = '';
    for (let i = 0; i < lives; i++) {
        const life = document.createElement('li');
        livesList.appendChild(life);
    }
}

function gameOver() {
    playerCanMove = false;
    player.classList.add('dead');
    playerMouth.style.display = 'none';
    showGameOverScreen();
}

function showGameOverScreen() {
    const gameOverDiv = document.createElement('div');
    gameOverDiv.classList.add('game-over');
    
    const gameOverMessage = document.createElement('h1');
    gameOverMessage.textContent = 'Game Over';
    gameOverMessage.classList.add('game-over-btn');
    gameOverDiv.appendChild(gameOverMessage);
    
    const restartBtn = document.createElement('button');
    restartBtn.textContent = 'Restart';
    restartBtn.classList.add('restart-btn');
    restartBtn.onclick = restartGame;
    gameOverDiv.appendChild(restartBtn);
    
    startDiv.innerHTML = '';
    startDiv.appendChild(gameOverDiv);
    startDiv.style.display = 'flex';
}

const gameOverMessage = document.createElement('h1');
gameOverMessage.textContent = 'Game Over';
gameOverMessage.classList.add('game-over-text');
gameOverDiv.appendChild(gameOverMessage);

function restartGame() {
    window.location.reload(); 
}

updateLivesDisplay();
