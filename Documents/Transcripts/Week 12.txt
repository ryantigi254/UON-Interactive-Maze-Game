1
00:00:00,000 --> 00:00:02,680
Right, and welcome
to Week 12.

2
00:00:02,680 --> 00:00:03,960
So, believe it
or not, this

3
00:00:03,960 --> 00:00:05,780
is our penultimate
lecture.

4
00:00:05,780 --> 00:00:07,460
So next week is going
to be officially

5
00:00:07,460 --> 00:00:08,639
our last lecture for

6
00:00:08,639 --> 00:00:11,500
the web development
module, unfortunately.

7
00:00:11,500 --> 00:00:13,759
That's because Week 14 is

8
00:00:13,759 --> 00:00:16,499
officially your second
assessment week.

9
00:00:16,499 --> 00:00:18,779
So just like the first
assessment week,

10
00:00:18,779 --> 00:00:21,679
you won't have any formal
classes on Week 14.

11
00:00:21,679 --> 00:00:23,560
That's just to give you
enough time to attend

12
00:00:23,560 --> 00:00:24,939
any TCAs you have and

13
00:00:24,939 --> 00:00:27,560
also finish any of
your assignments.

14
00:00:27,560 --> 00:00:30,500
Fortunately, for us, we're

15
00:00:30,500 --> 00:00:31,759
kind of wrapping
up the majority

16
00:00:31,759 --> 00:00:32,860
of our content today.

17
00:00:32,860 --> 00:00:34,320
Next week, we're going
to look a little

18
00:00:34,320 --> 00:00:36,160
bit into object
orientation.

19
00:00:36,160 --> 00:00:37,539
But primarily next week,

20
00:00:37,539 --> 00:00:39,399
we're going to look
at report writing

21
00:00:39,399 --> 00:00:42,679
and the best ways of
revising for the asylum.

22
00:00:42,679 --> 00:00:44,019
It's going to be
very similar to

23
00:00:44,019 --> 00:00:45,759
what we did in week six.

24
00:00:45,759 --> 00:00:47,859
So remember, I have
that table that kind of

25
00:00:47,859 --> 00:00:50,079
showed you exactly which
lecture supported,

26
00:00:50,079 --> 00:00:51,439
which area in the Rubric.

27
00:00:51,439 --> 00:00:52,599
So we'll do something very

28
00:00:52,599 --> 00:00:54,099
similar next
week for that.

29
00:00:54,099 --> 00:00:55,699
But this week is
going to kind of

30
00:00:55,699 --> 00:00:57,559
finish up all
the content you

31
00:00:57,559 --> 00:00:59,419
primarily need
for the majority

32
00:00:59,419 --> 00:01:02,370
of the Rubric grade,
which is nice.

33
00:01:02,370 --> 00:01:04,439
Specifically, we're
going to be looking

34
00:01:04,439 --> 00:01:06,380
at debugging and
common errors.

35
00:01:06,380 --> 00:01:07,840
So quite a few of you at

36
00:01:07,840 --> 00:01:08,520
this stage would have

37
00:01:08,520 --> 00:01:09,659
seen some errors
in the console.

38
00:01:09,659 --> 00:01:10,540
We're going to
go through some

39
00:01:10,540 --> 00:01:11,500
of the more common ones

40
00:01:11,500 --> 00:01:13,900
and what you can
do to solve them.

41
00:01:13,900 --> 00:01:16,020
I'm here to give you
some of my best tips

42
00:01:16,020 --> 00:01:17,960
for doing a step
by step process.

43
00:01:17,960 --> 00:01:19,639
And hopefully,
everyone's going to be

44
00:01:19,639 --> 00:01:22,060
fairly okay with
errors moving forward.

45
00:01:22,060 --> 00:01:23,620
We're then going
to look at

46
00:01:23,620 --> 00:01:25,119
the inbuilt
string methods.

47
00:01:25,119 --> 00:01:26,219
So if you've got a string,

48
00:01:26,219 --> 00:01:26,940
you can actually do

49
00:01:26,940 --> 00:01:30,359
a variety of different
things to that string.

50
00:01:30,359 --> 00:01:32,540
We're going to look at
all the useful ones

51
00:01:32,540 --> 00:01:34,279
in relation to
the assignment.

52
00:01:34,279 --> 00:01:35,519
For example, you could

53
00:01:35,519 --> 00:01:36,660
take your string and you

54
00:01:36,660 --> 00:01:37,620
could actually split it

55
00:01:37,620 --> 00:01:39,079
into two separate strings.

56
00:01:39,079 --> 00:01:41,159
You could even split
it into an array.

57
00:01:41,159 --> 00:01:42,420
There's even a method

58
00:01:42,420 --> 00:01:44,420
that capitalizes
the string.

59
00:01:44,420 --> 00:01:46,300
Very situational,

60
00:01:46,300 --> 00:01:48,995
but can be beneficial
in some cases.

61
00:01:48,995 --> 00:01:50,929
Well, the more
useful parts

62
00:01:50,929 --> 00:01:52,529
of today is going
to be functions.

63
00:01:52,529 --> 00:01:54,050
The idea is we're
going to add more to

64
00:01:54,050 --> 00:01:56,209
our functions to make
them more reusable.

65
00:01:56,209 --> 00:01:58,129
That will be
parting in values,

66
00:01:58,129 --> 00:01:59,830
also returning values,

67
00:01:59,830 --> 00:02:01,729
and another way of
writing a function

68
00:02:01,729 --> 00:02:02,769
that kind of optimizes

69
00:02:02,769 --> 00:02:04,490
our code a
little bit more.

70
00:02:04,490 --> 00:02:06,590
Then the big one for
the assignment is

71
00:02:06,590 --> 00:02:08,170
I'm going to show
you local storage.

72
00:02:08,170 --> 00:02:10,149
This is a way we
can save data in

73
00:02:10,149 --> 00:02:12,489
our browser and retrieve
that data as well.

74
00:02:12,489 --> 00:02:13,869
This is going to
be instrumental

75
00:02:13,869 --> 00:02:15,809
for the leaderboard
functionality.

76
00:02:15,809 --> 00:02:18,209
So if you look in the
B grade criteria,

77
00:02:18,209 --> 00:02:19,510
the majority
of the B grade

78
00:02:19,510 --> 00:02:21,295
is looking for
the leaderboard.

79
00:02:21,295 --> 00:02:23,259
The idea, you're
going to ask the user

80
00:02:23,259 --> 00:02:25,199
to enter their name
once the games ended.

81
00:02:25,199 --> 00:02:26,360
You're then going
to save their

82
00:02:26,360 --> 00:02:27,879
name along with
their score.

83
00:02:27,879 --> 00:02:29,840
You'll save that
in local storage.

84
00:02:29,840 --> 00:02:31,159
When the game
starts, you'll

85
00:02:31,159 --> 00:02:32,359
then retrieve
all that data

86
00:02:32,359 --> 00:02:32,939
and display

87
00:02:32,939 --> 00:02:34,940
all the scores in
the leaderboard.

88
00:02:34,940 --> 00:02:36,980
For some of the more
advanced functionality,

89
00:02:36,980 --> 00:02:38,480
you could then
limit that to five,

90
00:02:38,480 --> 00:02:40,500
and then the five
highest scores.

91
00:02:40,500 --> 00:02:41,799
So again, they
kind of builds on

92
00:02:41,799 --> 00:02:43,659
top of each other,
which is quite nice.

93
00:02:43,659 --> 00:02:45,200
We're then going
to end today

94
00:02:45,200 --> 00:02:46,399
with some array methods.

95
00:02:46,399 --> 00:02:47,920
So very similar
to strings,

96
00:02:47,920 --> 00:02:49,859
arrays have their
own inbuilt methods

97
00:02:49,859 --> 00:02:50,579
that kind of allow

98
00:02:50,579 --> 00:02:52,100
us to manipulate
those arrays

99
00:02:52,100 --> 00:02:53,809
in a variety of
different ways.

100
00:02:53,809 --> 00:02:56,400
The useful one today
is going to be sorting

101
00:02:56,400 --> 00:02:57,759
the array from largest to

102
00:02:57,759 --> 00:02:59,519
smallest or smallest
to largest.

103
00:02:59,519 --> 00:03:01,439
Again, we could even
split arrays into

104
00:03:01,439 --> 00:03:04,579
multiple other arrays,
which is quite nice.

105
00:03:04,579 --> 00:03:06,100
But these are all
inbuilt methods

106
00:03:06,100 --> 00:03:07,880
that we're going to
go through today.

107
00:03:07,880 --> 00:03:09,540
So it's very
much electro I'm

108
00:03:09,540 --> 00:03:11,139
going to throw
quite a lot at you.

109
00:03:11,139 --> 00:03:13,819
Hopefully,
you'll enjoy it.

110
00:03:13,819 --> 00:03:16,060
So moving into
our first bit,

111
00:03:16,060 --> 00:03:17,860
then, Debugging.

112
00:03:17,860 --> 00:03:21,259
If your code is not
working as you expect,

113
00:03:21,259 --> 00:03:23,579
there's a good chance
something's gone wrong.

114
00:03:23,579 --> 00:03:25,499
Whether it's a
typo or perhaps

115
00:03:25,499 --> 00:03:28,369
your logic isn't quite
where it should be.

116
00:03:28,369 --> 00:03:30,500
If something's
not working,

117
00:03:30,500 --> 00:03:32,179
you need to start
debugging it.

118
00:03:32,179 --> 00:03:34,819
That means looking
at the code and

119
00:03:34,819 --> 00:03:36,840
trying to fix any
possible errors

120
00:03:36,840 --> 00:03:38,780
or bugs that might exist.

121
00:03:38,780 --> 00:03:40,019
So typically,

122
00:03:40,019 --> 00:03:41,539
when software doesn't
exist, sorry.

123
00:03:41,539 --> 00:03:43,900
When software doesn't
work as we expect,

124
00:03:43,900 --> 00:03:45,299
we need to study
that code and

125
00:03:45,299 --> 00:03:47,179
figure out exactly
what's wrong with it.

126
00:03:47,179 --> 00:03:48,539
Now, in Java Script,

127
00:03:48,539 --> 00:03:49,839
the first step
should always be

128
00:03:49,839 --> 00:03:52,140
opening up our
developer tools.

129
00:03:52,140 --> 00:03:54,560
G, I've got window
open, hopefully,

130
00:03:54,560 --> 00:03:56,299
that hasn't come through
on the recording.

131
00:03:56,299 --> 00:03:58,239
If you remember
way back from

132
00:03:58,239 --> 00:04:00,560
our grid area exercises.

133
00:04:00,560 --> 00:04:01,940
We open up the tools by

134
00:04:01,940 --> 00:04:03,700
right clipping on the
browser and inspect.

135
00:04:03,700 --> 00:04:05,359
There are a few other
ways of doing it,

136
00:04:05,359 --> 00:04:06,679
but it's primarily
going to be

137
00:04:06,679 --> 00:04:08,640
that way from
that approach.

138
00:04:08,640 --> 00:04:11,360
So when we go into
the console tab,

139
00:04:11,360 --> 00:04:12,979
usually, any
areas you have

140
00:04:12,979 --> 00:04:14,859
in your code will
exist there.

141
00:04:14,859 --> 00:04:16,959
In quite a few of
the exercises,

142
00:04:16,959 --> 00:04:19,420
when people call me
over and ask me,

143
00:04:19,420 --> 00:04:21,580
the code's not working,
the first thing

144
00:04:21,580 --> 00:04:22,800
I always say is,

145
00:04:22,800 --> 00:04:24,419
do you have any errors
in your console,

146
00:04:24,419 --> 00:04:25,620
and nine times out of ten,

147
00:04:25,620 --> 00:04:27,329
that is usually the case.

148
00:04:27,329 --> 00:04:29,520
So two big ways we can see

149
00:04:29,520 --> 00:04:31,360
this are obviously the
big error just here,

150
00:04:31,360 --> 00:04:33,060
but you've also got the
number of errors it's

151
00:04:33,060 --> 00:04:35,220
detected in this bit
just here as well.

152
00:04:35,220 --> 00:04:37,399
So in this case,
we've got one error,

153
00:04:37,399 --> 00:04:38,720
and the error itself is

154
00:04:38,720 --> 00:04:40,959
assignment to
constant variable.

155
00:04:40,959 --> 00:04:46,840
It's the file exercise
one, online two. Okay.

156
00:04:47,020 --> 00:04:49,559
Another very common error

157
00:04:49,559 --> 00:04:52,319
is unexpected
end of input.

158
00:04:52,319 --> 00:04:54,280
So every opening brace in

159
00:04:54,280 --> 00:04:57,379
Java Script also requires
a closing brace.

160
00:04:57,379 --> 00:04:59,720
It's very similar to
CSS in that regard.

161
00:04:59,720 --> 00:05:00,920
If you open one door, you

162
00:05:00,920 --> 00:05:02,260
need to close it as well.

163
00:05:02,260 --> 00:05:03,660
So you need to
make sure all of

164
00:05:03,660 --> 00:05:06,159
your braces are
matching together.

165
00:05:06,159 --> 00:05:09,120
If you receive an
error similar to this,

166
00:05:09,120 --> 00:05:10,760
it typically means you're

167
00:05:10,760 --> 00:05:12,359
missing a bracket
somewhere.

168
00:05:12,359 --> 00:05:13,619
Whether it's a standard

169
00:05:13,619 --> 00:05:14,979
bracket or a
curly bracket,

170
00:05:14,979 --> 00:05:16,159
you are missing something

171
00:05:16,159 --> 00:05:18,609
somewhere in that
piece of code.

172
00:05:18,609 --> 00:05:21,400
So, have a go at
trying to find

173
00:05:21,400 --> 00:05:24,200
the error on this
particular piece of code.

174
00:05:24,200 --> 00:05:25,360
So try pausing the video

175
00:05:25,360 --> 00:05:27,160
and having a go with this.

176
00:05:27,160 --> 00:05:29,740
So, the error is
unexpected end

177
00:05:29,740 --> 00:05:31,840
of input on line nine.

178
00:05:31,840 --> 00:05:34,140
So again, really try
and scan this piece of

179
00:05:34,140 --> 00:05:36,979
code and try and see
the error for yourself.

180
00:05:36,979 --> 00:05:38,780
So again, pause the video.

181
00:05:38,780 --> 00:05:40,920
Have a look for where
the error might

182
00:05:40,920 --> 00:05:44,439
be, and then we'll resume.

183
00:05:46,300 --> 00:05:48,079
Okay, hopefully,

184
00:05:48,079 --> 00:05:49,380
you've had a go at
trying to find that.

185
00:05:49,380 --> 00:05:50,600
If you were
struggling a bit,

186
00:05:50,600 --> 00:05:51,639
it's always
going to try and

187
00:05:51,639 --> 00:05:52,980
count the number
of lines we have.

188
00:05:52,980 --> 00:05:54,880
So I've not included
the line numbers on

189
00:05:54,880 --> 00:05:57,139
this because it didn't
transfer over nicely.

190
00:05:57,139 --> 00:05:59,620
So if we go one,

191
00:05:59,620 --> 00:06:03,380
two, three, four,
five, six, seven,

192
00:06:03,380 --> 00:06:05,160
eight, nine,
the line number

193
00:06:05,160 --> 00:06:06,600
isn't particularly
useful on this one,

194
00:06:06,600 --> 00:06:08,060
but we can start counting

195
00:06:08,060 --> 00:06:09,420
the brackets
at this stage,

196
00:06:09,420 --> 00:06:10,740
so we can count
the brackets here.

197
00:06:10,740 --> 00:06:12,680
So these match
up quite nicely.

198
00:06:12,680 --> 00:06:14,900
These match up
quite nicely.

199
00:06:14,900 --> 00:06:17,920
The problem we have is
with this one here.

200
00:06:17,920 --> 00:06:19,459
There's not
actually an ending

201
00:06:19,459 --> 00:06:21,320
bracket on this line.

202
00:06:21,320 --> 00:06:23,460
So in this particular area

203
00:06:23,460 --> 00:06:25,339
on this particular error,

204
00:06:25,339 --> 00:06:28,159
the line number was a
little bit misleading.

205
00:06:28,159 --> 00:06:29,280
Because again, it would

206
00:06:29,280 --> 00:06:30,240
ellude to the fact that

207
00:06:30,240 --> 00:06:32,980
the end of bracket
should be here.

208
00:06:32,980 --> 00:06:35,000
But we actually
needed it just here.

209
00:06:35,000 --> 00:06:36,219
So, again, you
can't purely

210
00:06:36,219 --> 00:06:38,040
rely on the line
number alone,

211
00:06:38,040 --> 00:06:39,399
but typically the error

212
00:06:39,399 --> 00:06:40,600
message does help as well.

213
00:06:40,600 --> 00:06:41,999
So unexpected
end of input,

214
00:06:41,999 --> 00:06:43,199
typically means
you need to

215
00:06:43,199 --> 00:06:44,800
check for your brackets.

216
00:06:44,800 --> 00:06:46,199
In our case, we're missing

217
00:06:46,199 --> 00:06:48,480
the closing bracket on
our clicked function,

218
00:06:48,480 --> 00:06:50,280
which should be just here.

219
00:06:50,280 --> 00:06:52,300
So hopefully, you
maybe had to go at

220
00:06:52,300 --> 00:06:54,540
trying to spot that
yourself. Maybe you did.

221
00:06:54,540 --> 00:06:57,019
If you didn't, don't
worry about it.

222
00:06:57,019 --> 00:06:59,080
I guarantee you there'll
be situations in

223
00:06:59,080 --> 00:07:00,059
the assignment
where you have to

224
00:07:00,059 --> 00:07:01,920
find this
yourself as well.

225
00:07:01,920 --> 00:07:05,180
The next one is
unexpected string

226
00:07:05,180 --> 00:07:08,019
or unexpected variable
or unexpected number.

227
00:07:08,019 --> 00:07:09,480
This typically means you

228
00:07:09,480 --> 00:07:10,979
have got a syntax error.

229
00:07:10,979 --> 00:07:12,779
It means you're missing
a part of the code

230
00:07:12,779 --> 00:07:15,159
or you have it in
slightly wrong order.

231
00:07:15,159 --> 00:07:17,339
So again, it could
be a simple typo.

232
00:07:17,339 --> 00:07:18,339
It could be you're missing

233
00:07:18,339 --> 00:07:19,679
quite a major piece

234
00:07:19,679 --> 00:07:23,960
of the code itself,
but unexpected string.

235
00:07:23,960 --> 00:07:26,380
So in this case, we
really need to kind of

236
00:07:26,380 --> 00:07:27,840
inspect the code and

237
00:07:27,840 --> 00:07:29,979
see what might be missing.

238
00:07:29,979 --> 00:07:32,620
So again, try
pausing the video.

239
00:07:32,620 --> 00:07:34,140
Have a look at
this block of

240
00:07:34,140 --> 00:07:35,680
code and using the
error message,

241
00:07:35,680 --> 00:07:37,760
try and spot the mistake.

242
00:07:37,760 --> 00:07:40,580
Okay. So pause the
video and now,

243
00:07:43,860 --> 00:07:46,319
And we'll resume.

244
00:07:46,319 --> 00:07:48,000
Again, not quite sure how

245
00:07:48,000 --> 00:07:49,439
these tests are coming

246
00:07:49,439 --> 00:07:51,020
across in the
online lecture.

247
00:07:51,020 --> 00:07:52,919
It's quite good in the
face to face lectures.

248
00:07:52,919 --> 00:07:53,920
I do recommend attending

249
00:07:53,920 --> 00:07:55,040
this week if you can.

250
00:07:55,040 --> 00:07:56,959
It's quite a
nice activity.

251
00:07:56,959 --> 00:07:58,540
But in our case, we've got

252
00:07:58,540 --> 00:08:00,760
unexpected string
on line five.

253
00:08:00,760 --> 00:08:02,500
So again, this colon
here just says

254
00:08:02,500 --> 00:08:04,880
what line it thinks
the mistake is on.

255
00:08:04,880 --> 00:08:10,060
So we count this. One,
two, three, four,

256
00:08:10,060 --> 00:08:12,760
five, kind of gives
us the idea that it

257
00:08:12,760 --> 00:08:14,560
might be based
around my array

258
00:08:14,560 --> 00:08:16,040
with the index
position two.

259
00:08:16,040 --> 00:08:17,540
So then we just
need to kind of

260
00:08:17,540 --> 00:08:19,740
inspect what might
be different with

261
00:08:19,740 --> 00:08:22,480
this one and all
the other arrays

262
00:08:22,480 --> 00:08:24,119
with these index
positions.

263
00:08:24,119 --> 00:08:25,520
So immediately, to me,

264
00:08:25,520 --> 00:08:26,919
I'm noticing that
it's missing

265
00:08:26,919 --> 00:08:28,465
the equal sign just here.

266
00:08:28,465 --> 00:08:30,390
And believe it
or not, that is

267
00:08:30,390 --> 00:08:32,390
the solution to
fixing this error.

268
00:08:32,390 --> 00:08:35,430
By simply missing
that equals operator,

269
00:08:35,430 --> 00:08:36,989
it's completely throwing

270
00:08:36,989 --> 00:08:38,429
all that code
out the window

271
00:08:38,429 --> 00:08:40,870
because it's an
unexpected string

272
00:08:40,870 --> 00:08:42,449
immediately after
that array.

273
00:08:42,449 --> 00:08:44,269
It's expecting some
kind of operator.

274
00:08:44,269 --> 00:08:45,010
In our case, it's

275
00:08:45,010 --> 00:08:46,830
the equal sign,
but instead,

276
00:08:46,830 --> 00:08:48,210
it's just
immediately coming

277
00:08:48,210 --> 00:08:50,250
to this two string.

278
00:08:50,250 --> 00:08:52,030
So we can tell
it's a string

279
00:08:52,030 --> 00:08:53,829
because it's in these
brackets just here.

280
00:08:53,829 --> 00:08:55,809
So because this
is here, that's

281
00:08:55,809 --> 00:08:57,090
why we're getting
that error message.

282
00:08:57,090 --> 00:08:58,370
So in this case,
the line number

283
00:08:58,370 --> 00:09:00,070
was incredibly useful.

284
00:09:00,070 --> 00:09:02,630
So again, always use
the line number.

285
00:09:02,630 --> 00:09:03,869
With the previous
one, it was a

286
00:09:03,869 --> 00:09:05,349
bit misleading,
but on this one,

287
00:09:05,349 --> 00:09:08,670
it took us exactly to
where the error lies.

288
00:09:08,670 --> 00:09:10,390
And again, the error does

289
00:09:10,390 --> 00:09:12,290
indicate something's
wrong as well.

290
00:09:12,290 --> 00:09:14,050
Usually, if you
don't have an error,

291
00:09:14,050 --> 00:09:15,130
it's a little bit more,

292
00:09:15,130 --> 00:09:16,909
a little bit
trickier to kind of

293
00:09:16,909 --> 00:09:19,249
figure out what the
mistake might be.

294
00:09:19,249 --> 00:09:20,709
But in this case, it was

295
00:09:20,709 --> 00:09:23,664
nice and clear to
everyone, which is good.

296
00:09:23,664 --> 00:09:26,639
Common error
number three typos

297
00:09:26,639 --> 00:09:28,699
are unfortunately
inevitable.

298
00:09:28,699 --> 00:09:31,719
Java script is incredibly
case sensitive.

299
00:09:31,719 --> 00:09:32,720
If you've declared
something

300
00:09:32,720 --> 00:09:33,779
with a capital letter or

301
00:09:33,779 --> 00:09:36,120
a lower case letter
or an underscore,

302
00:09:36,120 --> 00:09:38,979
you need to keep calling
that variable with

303
00:09:38,979 --> 00:09:41,079
that same case or

304
00:09:41,079 --> 00:09:45,020
symbol of symbols
in that instance.

305
00:09:45,640 --> 00:09:47,819
I guarantee you will get

306
00:09:47,819 --> 00:09:49,999
a typo somewhere in

307
00:09:49,999 --> 00:09:51,100
your code for
the assignment.

308
00:09:51,100 --> 00:09:53,219
It's inevitable.
Everyone does mistakes,

309
00:09:53,219 --> 00:09:55,200
even I do to this
day as well.

310
00:09:55,200 --> 00:09:57,260
So it's very easy
to get an error

311
00:09:57,260 --> 00:09:58,840
that doesn't
quite make sense.

312
00:09:58,840 --> 00:10:00,159
So in our case,
when it says,

313
00:10:00,159 --> 00:10:01,420
document dot
query selector

314
00:10:01,420 --> 00:10:02,900
all is not a function.

315
00:10:02,900 --> 00:10:04,879
It's a bit misleading,

316
00:10:04,879 --> 00:10:06,459
but it's actually
all based

317
00:10:06,459 --> 00:10:10,080
around a very
common issue.

318
00:10:10,080 --> 00:10:12,239
So using this
piece of code,

319
00:10:12,239 --> 00:10:13,659
I would like you
to try and figure

320
00:10:13,659 --> 00:10:15,659
out what's gone
wrong here.

321
00:10:15,659 --> 00:10:18,599
Okay. So using this
chunk of code,

322
00:10:18,599 --> 00:10:20,140
tell me what's gone wrong.

323
00:10:20,140 --> 00:10:21,320
Well, not tell
me, obviously,

324
00:10:21,320 --> 00:10:22,659
but try and figure out
what's gone wrong.

325
00:10:22,659 --> 00:10:24,479
So, pause the video and

326
00:10:24,479 --> 00:10:27,959
we'll resume in a second.

327
00:10:31,530 --> 00:10:33,910
Okay, coming back
to it, then.

328
00:10:33,910 --> 00:10:35,150
So again, immediately,
the error

329
00:10:35,150 --> 00:10:36,590
message is telling
us it's line five,

330
00:10:36,590 --> 00:10:37,989
but it's also
saying document do

331
00:10:37,989 --> 00:10:40,269
query selector rule
is not a function.

332
00:10:40,269 --> 00:10:41,610
So, we know it's probably

333
00:10:41,610 --> 00:10:43,769
something to do with
this bit just here.

334
00:10:43,769 --> 00:10:45,769
And again, if you
count one, two,

335
00:10:45,769 --> 00:10:47,170
three, four, and five,

336
00:10:47,170 --> 00:10:48,789
this is on line five.

337
00:10:48,789 --> 00:10:50,169
We can see it's line five

338
00:10:50,169 --> 00:10:52,374
because the five
is just here.

339
00:10:52,374 --> 00:10:55,439
So what this actually
boils down to is

340
00:10:55,439 --> 00:10:56,859
we're missing
the capital S

341
00:10:56,859 --> 00:10:58,380
on query selector.

342
00:10:58,380 --> 00:11:00,240
So because this
is being created

343
00:11:00,240 --> 00:11:02,800
with a lower case S
in this instance,

344
00:11:02,800 --> 00:11:05,140
Java scripts not identify

345
00:11:05,140 --> 00:11:06,799
as a function because

346
00:11:06,799 --> 00:11:08,859
our inbuilt function
for query selector

347
00:11:08,859 --> 00:11:11,400
has a capital
S. It's query,

348
00:11:11,400 --> 00:11:13,280
capital S for
the selector,

349
00:11:13,280 --> 00:11:15,315
and then capital overrule.

350
00:11:15,315 --> 00:11:17,010
Which means we're
trying to use

351
00:11:17,010 --> 00:11:18,750
a function that
doesn't exist.

352
00:11:18,750 --> 00:11:20,590
Query selector
with a lower case

353
00:11:20,590 --> 00:11:22,569
S has not been defined.

354
00:11:22,569 --> 00:11:24,450
That's why we're
getting that error.

355
00:11:24,450 --> 00:11:25,570
So, this one's a tad

356
00:11:25,570 --> 00:11:26,789
bit misleading
because again,

357
00:11:26,789 --> 00:11:28,490
it doesn't say we've
got a typo somewhere.

358
00:11:28,490 --> 00:11:30,490
It just says this
isn't a function.

359
00:11:30,490 --> 00:11:31,409
So, again, if you

360
00:11:31,409 --> 00:11:32,550
see something
where it says,

361
00:11:32,550 --> 00:11:34,209
this function
doesn't exist

362
00:11:34,209 --> 00:11:35,290
or this isn't a function,

363
00:11:35,290 --> 00:11:36,649
or this variable doesn't

364
00:11:36,649 --> 00:11:38,509
exist or it's not
been declared,

365
00:11:38,509 --> 00:11:40,109
nine times out of ten, it

366
00:11:40,109 --> 00:11:41,810
might be because
you've got a typo,

367
00:11:41,810 --> 00:11:44,810
whether it's a case issue.

368
00:11:44,810 --> 00:11:46,509
Or perhaps there's
just a really

369
00:11:46,509 --> 00:11:47,969
small spanning
mistake somewhere.

370
00:11:47,969 --> 00:11:49,510
So again, it's a
bit misleading,

371
00:11:49,510 --> 00:11:50,609
but the line
number took us

372
00:11:50,609 --> 00:11:51,789
exactly where we
needed to look,

373
00:11:51,789 --> 00:11:53,229
and it also
told us roughly

374
00:11:53,229 --> 00:11:55,190
where we should look
on that line as well.

375
00:11:55,190 --> 00:11:56,630
So these error
messages might

376
00:11:56,630 --> 00:11:58,350
seem a bit
confusing at first,

377
00:11:58,350 --> 00:12:00,669
but they really do
tell you exactly what

378
00:12:00,669 --> 00:12:03,530
the problem is
in most cases.

379
00:12:03,930 --> 00:12:06,050
Where this is a bit

380
00:12:06,050 --> 00:12:08,089
different is
with statements.

381
00:12:08,089 --> 00:12:09,309
So if you tried using

382
00:12:09,309 --> 00:12:10,430
an equal sign instead of

383
00:12:10,430 --> 00:12:11,610
an equals equal sign

384
00:12:11,610 --> 00:12:13,230
for a comparison operator,

385
00:12:13,230 --> 00:12:14,749
you actually
wouldn't get an

386
00:12:14,749 --> 00:12:16,360
error in your console.

387
00:12:16,360 --> 00:12:18,150
That's because
strictly speaking,

388
00:12:18,150 --> 00:12:20,650
the code isn't inaccurate.
It's not wrong.

389
00:12:20,650 --> 00:12:23,070
So my case, if I
wanted to compare

390
00:12:23,070 --> 00:12:25,750
this number variable
to the value of ten,

391
00:12:25,750 --> 00:12:28,230
I'd say, if number
equals equals ten,

392
00:12:28,230 --> 00:12:30,389
and that will compare
this variable value

393
00:12:30,389 --> 00:12:32,329
to this piece of data.

394
00:12:32,329 --> 00:12:34,209
So in this instance,
this condition would be

395
00:12:34,209 --> 00:12:36,510
met because the number
does equal ten.

396
00:12:36,510 --> 00:12:38,029
The problem is, if I have

397
00:12:38,029 --> 00:12:39,390
one single equal sign,

398
00:12:39,390 --> 00:12:40,909
it's there two
equal signs,

399
00:12:40,909 --> 00:12:43,209
what actually happens
in this instance is

400
00:12:43,209 --> 00:12:45,170
this number
variable becomes

401
00:12:45,170 --> 00:12:47,370
one, which is an issue.

402
00:12:47,370 --> 00:12:48,889
We're actually
setting the value

403
00:12:48,889 --> 00:12:50,349
of number to one.

404
00:12:50,349 --> 00:12:52,710
That's because one
equal sign will assign

405
00:12:52,710 --> 00:12:54,749
the number two equal signs

406
00:12:54,749 --> 00:12:56,929
compares the number.

407
00:12:56,929 --> 00:12:58,889
And again, the
annoying thing with

408
00:12:58,889 --> 00:13:00,370
this is unfortunately,

409
00:13:00,370 --> 00:13:01,229
it would not give you

410
00:13:01,229 --> 00:13:02,870
an error in your console.

411
00:13:02,870 --> 00:13:05,170
So it is very useful to
get into the habit of

412
00:13:05,170 --> 00:13:06,170
looking for small things

413
00:13:06,170 --> 00:13:07,389
like this because again,

414
00:13:07,389 --> 00:13:08,249
they do crop up from

415
00:13:08,249 --> 00:13:10,389
time to time,
unfortunately.

416
00:13:10,389 --> 00:13:13,570
Common error number five.

417
00:13:13,570 --> 00:13:16,710
Once again, typos are
your worst enemy.

418
00:13:16,710 --> 00:13:17,950
You need to get
into the habit

419
00:13:17,950 --> 00:13:19,855
for checking
for everything.

420
00:13:19,855 --> 00:13:21,460
Just as a rule of thumb,

421
00:13:21,460 --> 00:13:22,580
when something says null,

422
00:13:22,580 --> 00:13:23,759
it typically
means there is

423
00:13:23,759 --> 00:13:26,239
no value associated to it.

424
00:13:26,239 --> 00:13:28,119
Whether that is just the

425
00:13:28,119 --> 00:13:29,279
element doesn't exist on

426
00:13:29,279 --> 00:13:32,800
the page or some
other aspect as well.

427
00:13:32,800 --> 00:13:34,199
So in this case, it
says, cannot read

428
00:13:34,199 --> 00:13:36,040
properties of null
at event listener.

429
00:13:36,040 --> 00:13:37,460
There's a chance
we either have

430
00:13:37,460 --> 00:13:40,259
a typo or something's
not being found.

431
00:13:40,259 --> 00:13:41,860
So, pause the video.

432
00:13:41,860 --> 00:13:43,240
This one's a little
bit trickier.

433
00:13:43,240 --> 00:13:44,160
I'll be honest, so I

434
00:13:44,160 --> 00:13:45,279
have a really good
look on this one.

435
00:13:45,279 --> 00:13:47,139
I've also included
the HTML,

436
00:13:47,139 --> 00:13:48,200
because that might also

437
00:13:48,200 --> 00:13:49,480
provide you with a clue.

438
00:13:49,480 --> 00:13:51,499
So pause the
video and try and

439
00:13:51,499 --> 00:13:53,940
find the error using
that error message.

440
00:13:53,940 --> 00:13:56,920
Okay, pause the
video in now.

441
00:14:02,420 --> 00:14:04,839
Hopefully, you've had a go

442
00:14:04,839 --> 00:14:06,099
at trying to
scan for this.

443
00:14:06,099 --> 00:14:07,319
Again, I do
encourage this one

444
00:14:07,319 --> 00:14:08,539
because it might happen to

445
00:14:08,539 --> 00:14:12,220
you at some point in
your development cycle.

446
00:14:12,220 --> 00:14:13,960
So, we can see that

447
00:14:13,960 --> 00:14:15,060
the error message
is saying,

448
00:14:15,060 --> 00:14:17,079
cannot read
properties of null,

449
00:14:17,079 --> 00:14:18,459
specifically around the

450
00:14:18,459 --> 00:14:20,200
add event listener
function.

451
00:14:20,200 --> 00:14:22,679
So again, you count
two line six.

452
00:14:22,679 --> 00:14:24,800
So, one, two, three,

453
00:14:24,800 --> 00:14:26,080
four, five, and six.

454
00:14:26,080 --> 00:14:27,839
So it's this
bit just here.

455
00:14:27,839 --> 00:14:29,379
So cannot read
properties of

456
00:14:29,379 --> 00:14:31,199
null reading add
event listener.

457
00:14:31,199 --> 00:14:33,004
That is basically saying,

458
00:14:33,004 --> 00:14:35,569
You're trying to add
an event listener to

459
00:14:35,569 --> 00:14:37,509
something that
doesn't have

460
00:14:37,509 --> 00:14:39,330
a value. It doesn't exist.

461
00:14:39,330 --> 00:14:40,549
And if you look
at what we're

462
00:14:40,549 --> 00:14:41,789
adding the event
listener to,

463
00:14:41,789 --> 00:14:43,269
in our case right now,

464
00:14:43,269 --> 00:14:44,970
it's this H one tag.

465
00:14:44,970 --> 00:14:47,169
So that gives us a
bit of an idea that

466
00:14:47,169 --> 00:14:50,329
this H one might
be the issue.

467
00:14:50,329 --> 00:14:51,929
So if we look up
to where we've

468
00:14:51,929 --> 00:14:53,250
declared that H one tag,

469
00:14:53,250 --> 00:14:55,129
we've declared it up
here on line two.

470
00:14:55,129 --> 00:14:56,849
So we're saying
constant H one

471
00:14:56,849 --> 00:14:58,710
equals document do
query selector,

472
00:14:58,710 --> 00:15:00,770
then in the
criteria, heading.

473
00:15:00,770 --> 00:15:02,849
Everything looks
fine at that stage.

474
00:15:02,849 --> 00:15:04,489
If we go to the HTML,

475
00:15:04,489 --> 00:15:06,049
we can see we want
this H one tag,

476
00:15:06,049 --> 00:15:09,185
but H one tag has
the ID of heading.

477
00:15:09,185 --> 00:15:12,240
That's where we've
made the mistake.

478
00:15:12,240 --> 00:15:14,100
When we use query selector

479
00:15:14,100 --> 00:15:15,620
and we find things by ID,

480
00:15:15,620 --> 00:15:17,620
it needs to start
with a hash tag.

481
00:15:17,620 --> 00:15:19,519
What we've actually done
here is we've said,

482
00:15:19,519 --> 00:15:22,139
look for a tag
called heading.

483
00:15:22,139 --> 00:15:23,800
We don't have
a heading tag.

484
00:15:23,800 --> 00:15:25,140
We have a H one tag.

485
00:15:25,140 --> 00:15:27,719
So if we changed
heading to H one,

486
00:15:27,719 --> 00:15:29,880
that would actually
fix our mistake.

487
00:15:29,880 --> 00:15:31,460
But if we wanted to keep

488
00:15:31,460 --> 00:15:33,760
this heading ID as
the main selector,

489
00:15:33,760 --> 00:15:35,079
all we'd need to do is put

490
00:15:35,079 --> 00:15:37,560
a hash tag in
front of heading.

491
00:15:37,560 --> 00:15:39,439
And that would allow
us to find that H

492
00:15:39,439 --> 00:15:41,519
one tag by the
ID of heading.

493
00:15:41,519 --> 00:15:43,400
So again, a single typo

494
00:15:43,400 --> 00:15:45,040
does affect everything.

495
00:15:45,040 --> 00:15:46,820
And in this case,
it was a typo

496
00:15:46,820 --> 00:15:49,340
for missing out
that hash tag,

497
00:15:49,340 --> 00:15:52,780
Querying the
HTML for an ID.

498
00:15:52,780 --> 00:15:54,560
Again, very common mistake

499
00:15:54,560 --> 00:15:56,099
that does happen
from time to time.

500
00:15:56,099 --> 00:15:57,579
I find myself making it

501
00:15:57,579 --> 00:15:59,560
quite a lot. It's
very annoying.

502
00:15:59,560 --> 00:16:01,359
So in this
instance, it was

503
00:16:01,359 --> 00:16:03,700
just an issue with
our H one variable.

504
00:16:03,700 --> 00:16:04,439
But hopefully, you can

505
00:16:04,439 --> 00:16:05,500
kind of see the process

506
00:16:05,500 --> 00:16:07,860
in finding where
that problem lies.

507
00:16:07,860 --> 00:16:10,259
Using that error
message, saying, Okay,

508
00:16:10,259 --> 00:16:12,140
it's H one event listener,

509
00:16:12,140 --> 00:16:13,479
cannot read properties of

510
00:16:13,479 --> 00:16:15,200
Null reading an
event listener.

511
00:16:15,200 --> 00:16:17,280
Something's wrong
with this H one tag.

512
00:16:17,280 --> 00:16:18,980
Let's see where
we've declared the H

513
00:16:18,980 --> 00:16:20,879
one tag and go from there.

514
00:16:20,879 --> 00:16:22,299
And that's how
we figured out

515
00:16:22,299 --> 00:16:24,039
how to fix that mistake.

516
00:16:24,039 --> 00:16:26,439
Pretty cool,
right? So, this

517
00:16:26,439 --> 00:16:29,474
is the last common
test we will do.

518
00:16:29,474 --> 00:16:31,790
This one is also

519
00:16:31,790 --> 00:16:34,070
cannot read
properties of null.

520
00:16:34,070 --> 00:16:35,690
This one's a little
bit more tricky.

521
00:16:35,690 --> 00:16:37,189
And I guarantee,
most of you

522
00:16:37,189 --> 00:16:39,130
have ran into this
at some point.

523
00:16:39,130 --> 00:16:42,270
So pause the video and
try looking through

524
00:16:42,270 --> 00:16:43,469
this code and finding out

525
00:16:43,469 --> 00:16:45,469
where the mistake
might be.

526
00:16:45,469 --> 00:16:48,029
Again, this one is
a bit trickier.

527
00:16:48,029 --> 00:16:51,689
So, pause the video
now and have a go.

528
00:16:57,990 --> 00:17:00,049
Okay, so hopefully you've

529
00:17:00,049 --> 00:17:01,929
had a go at going
through that.

530
00:17:01,929 --> 00:17:04,730
If you go through
the code, it says,

531
00:17:04,730 --> 00:17:07,609
cannot read properties
of null on line 13,

532
00:17:07,609 --> 00:17:10,210
specifically on this
style part just here.

533
00:17:10,210 --> 00:17:11,909
So, again, it's
a bit tedious,

534
00:17:11,909 --> 00:17:14,550
but we count 13, so
one, two, three, four,

535
00:17:14,550 --> 00:17:16,430
five, six, seven,
eight, nine,

536
00:17:16,430 --> 00:17:18,989
ten, 11, 12 13.

537
00:17:18,989 --> 00:17:20,429
It's having an issue with

538
00:17:20,429 --> 00:17:23,269
this tag variable,
which is interesting.

539
00:17:23,269 --> 00:17:25,670
So, if we look at tag, tag

540
00:17:25,670 --> 00:17:27,310
gets created in
this for loop.

541
00:17:27,310 --> 00:17:29,290
Let tag of tags.

542
00:17:29,290 --> 00:17:31,529
So again, this looks fine.

543
00:17:31,529 --> 00:17:32,949
It would suggest
that there might be

544
00:17:32,949 --> 00:17:34,509
an issue with this
tag variable.

545
00:17:34,509 --> 00:17:35,409
So let's have a look at

546
00:17:35,409 --> 00:17:37,329
where it declared tags.

547
00:17:37,329 --> 00:17:40,890
Going up to here,
our tag variable

548
00:17:40,890 --> 00:17:45,210
is an array of the
H one and P tag.

549
00:17:45,210 --> 00:17:47,630
Again, everything looks
fine on this point.

550
00:17:47,630 --> 00:17:49,009
So let's go up
and see where

551
00:17:49,009 --> 00:17:50,850
we've declared these
two variables.

552
00:17:50,850 --> 00:17:52,569
So H one equals document

553
00:17:52,569 --> 00:17:54,069
query selector H one,

554
00:17:54,069 --> 00:17:57,670
P equals document query
selector P. Again,

555
00:17:57,670 --> 00:18:00,289
everything looks fine
from this point.

556
00:18:00,289 --> 00:18:02,050
Looking at the
rest of our code,

557
00:18:02,050 --> 00:18:03,109
there doesn't appear to be

558
00:18:03,109 --> 00:18:05,189
any major syntax errors.

559
00:18:05,189 --> 00:18:06,470
Everything's got brackets.

560
00:18:06,470 --> 00:18:08,130
Everything's spelled
fairly correctly.

561
00:18:08,130 --> 00:18:09,529
If there was a
typo somewhere,

562
00:18:09,529 --> 00:18:11,569
like if Math had
a lower case M,

563
00:18:11,569 --> 00:18:13,889
the error message
would be different.

564
00:18:13,889 --> 00:18:15,710
So if you're pretty sure

565
00:18:15,710 --> 00:18:18,249
your Java script
code is correct,

566
00:18:18,249 --> 00:18:21,209
The issue might not be
with the Java script.

567
00:18:21,209 --> 00:18:23,729
If you flip back
over to your HTML,

568
00:18:23,729 --> 00:18:26,949
we've made a really
small mistake,

569
00:18:26,949 --> 00:18:29,430
and it actually lies
with our script tag.

570
00:18:29,430 --> 00:18:30,729
Our script tag is

571
00:18:30,729 --> 00:18:33,029
missing the
defer attribute.

572
00:18:33,029 --> 00:18:34,249
So, if you remember from

573
00:18:34,249 --> 00:18:35,449
our week eight lecture,

574
00:18:35,449 --> 00:18:37,089
DFR allows us to

575
00:18:37,089 --> 00:18:39,269
interact with the
H one and P tags.

576
00:18:39,269 --> 00:18:40,309
Without defer,

577
00:18:40,309 --> 00:18:42,270
our JavaScript
code runs first,

578
00:18:42,270 --> 00:18:44,490
and then our HTML exists.

579
00:18:44,490 --> 00:18:46,489
So, the actual issue
in this case is

580
00:18:46,489 --> 00:18:49,605
we're trying to find
this H one and P tag.

581
00:18:49,605 --> 00:18:52,059
And they don't exist
on the page yet.

582
00:18:52,059 --> 00:18:53,599
Our Java script loads,

583
00:18:53,599 --> 00:18:55,320
then our HTML loads,

584
00:18:55,320 --> 00:18:57,239
and that's when
those tags exist.

585
00:18:57,239 --> 00:18:59,279
If we put defer
back in here,

586
00:18:59,279 --> 00:19:01,280
this will work
immediately.

587
00:19:01,280 --> 00:19:03,399
So, again, the lesson

588
00:19:03,399 --> 00:19:04,839
from this is be
a little bit

589
00:19:04,839 --> 00:19:08,599
careful with where
you're looking.

590
00:19:08,599 --> 00:19:10,899
Again, usually, if
it's something small,

591
00:19:10,899 --> 00:19:12,520
it can have quite
a large impact.

592
00:19:12,520 --> 00:19:14,019
So in our case,
it was simply

593
00:19:14,019 --> 00:19:16,039
missing out the
defer attribute.

594
00:19:16,039 --> 00:19:18,080
By missing that
very small piece

595
00:19:18,080 --> 00:19:19,640
of text from
our script tag,

596
00:19:19,640 --> 00:19:21,699
we've just had to
search 13 lines of

597
00:19:21,699 --> 00:19:23,060
code for an issue

598
00:19:23,060 --> 00:19:25,054
that doesn't exist
in that file.

599
00:19:25,054 --> 00:19:28,590
So again, sometimes
issues can colate

600
00:19:28,590 --> 00:19:30,349
between many files to

601
00:19:30,349 --> 00:19:32,269
be a little bit
careful on that one.

602
00:19:32,269 --> 00:19:34,329
Okay. Easiest method to

603
00:19:34,329 --> 00:19:35,429
do this is the first time

604
00:19:35,429 --> 00:19:36,450
you create a script file,

605
00:19:36,450 --> 00:19:37,070
maybe just try

606
00:19:37,070 --> 00:19:38,449
a very basic piece
of code that

607
00:19:38,449 --> 00:19:41,189
interacts with one of
the HTML elements,

608
00:19:41,189 --> 00:19:42,949
whether it's changing
the node value of

609
00:19:42,949 --> 00:19:45,430
the H one tag or
finding a P tag.

610
00:19:45,430 --> 00:19:46,729
Because, again, if
you can do that,

611
00:19:46,729 --> 00:19:47,809
you know everything's
linked up

612
00:19:47,809 --> 00:19:49,450
correctly, which is nice.

613
00:19:49,450 --> 00:19:52,210
So hopefully that
made a bit of sense.

614
00:19:52,210 --> 00:19:53,849
I'd like to think
of this one as

615
00:19:53,849 --> 00:19:55,350
a bit of fun,
which is nice.

616
00:19:55,350 --> 00:19:56,630
So again, if you do find

617
00:19:56,630 --> 00:19:58,389
an error, use the
error message.

618
00:19:58,389 --> 00:20:00,569
It usually tells
you exactly what

619
00:20:00,569 --> 00:20:02,844
is wrong with that
piece of code.

620
00:20:02,844 --> 00:20:04,819
Not only that. It tells
you the exact line

621
00:20:04,819 --> 00:20:06,999
to look on as well.
It's very useful.

622
00:20:06,999 --> 00:20:08,959
So going on with
that methodology,

623
00:20:08,959 --> 00:20:10,260
I would like
you to download

624
00:20:10,260 --> 00:20:13,319
the exercise one zip
file on the Na Module.

625
00:20:13,319 --> 00:20:16,099
I've given you a piece
of code that contains

626
00:20:16,099 --> 00:20:19,280
a random number
generator and a timer.

627
00:20:19,280 --> 00:20:21,139
Unfortunately, no,
this is useful to

628
00:20:21,139 --> 00:20:22,079
the assignment just so

629
00:20:22,079 --> 00:20:23,179
no one can steal anything.

630
00:20:23,179 --> 00:20:25,139
But the idea of debugging

631
00:20:25,139 --> 00:20:28,100
will be quite helpful,
which is nice.

632
00:20:28,100 --> 00:20:31,300
I have given you all
the functionality,

633
00:20:31,300 --> 00:20:32,579
but there are quite a

634
00:20:32,579 --> 00:20:34,600
few mistakes in the code,

635
00:20:34,600 --> 00:20:36,679
whether it's
typos, variables,

636
00:20:36,679 --> 00:20:38,619
declarations that
are a bit funky.

637
00:20:38,619 --> 00:20:39,839
Maybe I'm missing
a bracket.

638
00:20:39,839 --> 00:20:40,499
You're all there.

639
00:20:40,499 --> 00:20:43,540
I won't give you all
the hints, obviously.

640
00:20:43,540 --> 00:20:46,179
But I would like you to
try and fix the code.

641
00:20:46,179 --> 00:20:47,580
The random
number generator

642
00:20:47,580 --> 00:20:48,899
should create and display

643
00:20:48,899 --> 00:20:50,399
a new random number

644
00:20:50,399 --> 00:20:52,529
when the button
is clicked.

645
00:20:52,529 --> 00:20:54,779
The time at the bottom

646
00:20:54,779 --> 00:20:56,919
should also go up
for every 1 second.

647
00:20:56,919 --> 00:20:58,879
My biggest
advice with this

648
00:20:58,879 --> 00:21:01,659
is fix one error
at a time.

649
00:21:01,659 --> 00:21:04,040
Using the console, fix

650
00:21:04,040 --> 00:21:05,099
the error it's pointing

651
00:21:05,099 --> 00:21:06,619
towards and then
build on from there.

652
00:21:06,619 --> 00:21:08,140
One error will lead
to another error,

653
00:21:08,140 --> 00:21:09,460
which will lead
to another error,

654
00:21:09,460 --> 00:21:11,260
but fixing them in order

655
00:21:11,260 --> 00:21:13,579
is a lot quicker
in my opinion.

656
00:21:13,579 --> 00:21:15,119
So you will get
something that

657
00:21:15,119 --> 00:21:16,935
looks like this, okay?

658
00:21:16,935 --> 00:21:18,529
So your job is to get the

659
00:21:18,529 --> 00:21:20,449
random number generator
working and the

660
00:21:20,449 --> 00:21:22,389
timer slowly
incrementing up

661
00:21:22,389 --> 00:21:24,349
by one for each second.

662
00:21:24,349 --> 00:21:26,430
So nothing too complex,

663
00:21:26,430 --> 00:21:28,850
but there are errors
that you need to fix.

664
00:21:28,850 --> 00:21:31,130
Okay. So, pause the video

665
00:21:31,130 --> 00:21:33,330
and we'll resume
very shortly.

666
00:21:33,330 --> 00:21:35,570
Okay. Right.
Hopefully, you've

667
00:21:35,570 --> 00:21:36,870
had a go at the exercise.

668
00:21:36,870 --> 00:21:37,549
We're just going to go

669
00:21:37,549 --> 00:21:38,430
through it together now,

670
00:21:38,430 --> 00:21:40,069
just so you do
have a basis

671
00:21:40,069 --> 00:21:40,749
for what some of

672
00:21:40,749 --> 00:21:42,169
those mistakes
might have been.

673
00:21:42,169 --> 00:21:44,310
Okay. So opening
up the Zip file,

674
00:21:44,310 --> 00:21:46,129
we've got a nice
index page,

675
00:21:46,129 --> 00:21:47,669
a script tag and a

676
00:21:47,669 --> 00:21:49,550
styles dot CSS,
which is nice.

677
00:21:49,550 --> 00:21:51,830
So opening this up
into the browser,

678
00:21:51,830 --> 00:21:53,989
We have the random
number generator here,

679
00:21:53,989 --> 00:21:55,549
which isn't working and

680
00:21:55,549 --> 00:21:57,429
nothing happening
with this timer.

681
00:21:57,429 --> 00:21:58,869
So if we open
up the console,

682
00:21:58,869 --> 00:22:00,369
it should be the
first thing we do.

683
00:22:00,369 --> 00:22:02,290
You can see immediately,
we've got an error,

684
00:22:02,290 --> 00:22:03,889
which says
unexpected token

685
00:22:03,889 --> 00:22:06,470
and then a semicolon
on line 12.

686
00:22:06,470 --> 00:22:08,890
So let's try and fix
this error first.

687
00:22:08,890 --> 00:22:11,970
So if we go on to line 12,

688
00:22:11,970 --> 00:22:14,270
which is just here.

689
00:22:14,270 --> 00:22:15,509
It's a lot more useful

690
00:22:15,509 --> 00:22:17,050
with these line
numbers on here.

691
00:22:17,050 --> 00:22:18,450
We can see there it seems

692
00:22:18,450 --> 00:22:20,289
to be a mistake just here.

693
00:22:20,289 --> 00:22:26,590
So, it says time plus
and then a semicolon.

694
00:22:26,590 --> 00:22:29,229
So there's a bit
of an issue here.

695
00:22:29,229 --> 00:22:31,969
So it's a bit ambiguous
what the problem is.

696
00:22:31,969 --> 00:22:33,009
So if we hover over it,

697
00:22:33,009 --> 00:22:34,730
it says expression
detected.

698
00:22:34,730 --> 00:22:36,790
If we also hold her
over this bit it says,

699
00:22:36,790 --> 00:22:38,369
Could not find name time,

700
00:22:38,369 --> 00:22:40,229
did you mean timer.

701
00:22:40,229 --> 00:22:41,850
So in our case, we're

702
00:22:41,850 --> 00:22:43,109
trying to do
something with

703
00:22:43,109 --> 00:22:46,429
a variable that does not
yet currently exist.

704
00:22:46,429 --> 00:22:47,889
So the first thing
we should probably

705
00:22:47,889 --> 00:22:49,649
do is create that
time variable.

706
00:22:49,649 --> 00:22:51,369
So let's say time

707
00:22:51,369 --> 00:22:53,410
and let's just say
it equals zero.

708
00:22:53,410 --> 00:22:55,730
So that fixes
that first error.

709
00:22:55,730 --> 00:22:57,690
It then says time plus.

710
00:22:57,690 --> 00:23:00,090
But we know that's not
actually an operator.

711
00:23:00,090 --> 00:23:01,810
It either needs
to be time plus

712
00:23:01,810 --> 00:23:04,629
plus or time equals
time plus one.

713
00:23:04,629 --> 00:23:07,690
So if we changed this
to time plus plus.

714
00:23:07,970 --> 00:23:10,630
We can see immediately
that error

715
00:23:10,630 --> 00:23:12,690
seems to have disappeared,
which is nice.

716
00:23:12,690 --> 00:23:14,029
So going back into our

717
00:23:14,029 --> 00:23:15,730
console and
clicking refresh,

718
00:23:15,730 --> 00:23:18,090
we now have a slightly
different error.

719
00:23:18,090 --> 00:23:20,669
It says, cannot read
properties of Null,

720
00:23:20,669 --> 00:23:23,390
reading Ad event
Listener online three.

721
00:23:23,390 --> 00:23:24,070
So again,

722
00:23:24,070 --> 00:23:25,570
slightly different
error, which is nice.

723
00:23:25,570 --> 00:23:26,529
It means we might have

724
00:23:26,529 --> 00:23:27,849
just fixed what the issue

725
00:23:27,849 --> 00:23:31,170
was with the time
part, which is good.

726
00:23:31,190 --> 00:23:34,170
So going back to here
onto line three,

727
00:23:34,170 --> 00:23:36,569
it's having a
problem with adding

728
00:23:36,569 --> 00:23:37,549
an event listener to

729
00:23:37,549 --> 00:23:39,609
something that
doesn't exist.

730
00:23:39,609 --> 00:23:42,010
So again, if we go
back to our HTML,

731
00:23:42,010 --> 00:23:43,349
we can just have
a quick look to

732
00:23:43,349 --> 00:23:44,989
see what's going on.

733
00:23:44,989 --> 00:23:46,049
So immediately,

734
00:23:46,049 --> 00:23:47,409
something that's
jumped out is,

735
00:23:47,409 --> 00:23:48,970
if we look in
this script tag,

736
00:23:48,970 --> 00:23:51,110
it's missing the defer
attribute again.

737
00:23:51,110 --> 00:23:52,649
So we should probably
try adding that

738
00:23:52,649 --> 00:23:54,909
back in and seeing that
it fixes our problem.

739
00:23:54,909 --> 00:23:59,069
So if we say defer
and going back,

740
00:23:59,280 --> 00:24:01,980
We still get the
same error message.

741
00:24:01,980 --> 00:24:03,400
So that wasn't
quite the issue

742
00:24:03,400 --> 00:24:04,540
we needed to fix,

743
00:24:04,540 --> 00:24:07,240
but we're on the right
track, which is nice.

744
00:24:07,240 --> 00:24:08,880
So we are going to deal

745
00:24:08,880 --> 00:24:10,640
with the random
number part.

746
00:24:10,640 --> 00:24:12,480
So there's a dip
that says class

747
00:24:12,480 --> 00:24:14,360
equals random
and a H one tag,

748
00:24:14,360 --> 00:24:16,280
a button, and
then a H two tag.

749
00:24:16,280 --> 00:24:18,440
Going back to our
javascript code, then,

750
00:24:18,440 --> 00:24:19,620
let's have a look
at where we're

751
00:24:19,620 --> 00:24:20,819
finding that
random button.

752
00:24:20,819 --> 00:24:22,819
So constant random
number equals document,

753
00:24:22,819 --> 00:24:26,079
do query selector,
random and then button.

754
00:24:26,079 --> 00:24:27,719
So immediately,
the problem is

755
00:24:27,719 --> 00:24:29,790
actually already
on that line.

756
00:24:29,790 --> 00:24:31,920
When we're
looking for a div

757
00:24:31,920 --> 00:24:33,279
with the class random,

758
00:24:33,279 --> 00:24:34,819
we can't just say random.

759
00:24:34,819 --> 00:24:37,939
We need to say dot
random like this.

760
00:24:37,939 --> 00:24:40,459
So if you say dot
random button,

761
00:24:40,459 --> 00:24:41,719
it will look for
the div with

762
00:24:41,719 --> 00:24:43,139
the class of random and

763
00:24:43,139 --> 00:24:44,779
look for the button inside

764
00:24:44,779 --> 00:24:47,139
the div with that class.

765
00:24:47,880 --> 00:24:50,440
So going back now,

766
00:24:50,440 --> 00:24:53,080
we have a slightly
different error.

767
00:24:53,080 --> 00:24:54,100
We actually have no error

768
00:24:54,100 --> 00:24:55,160
at all at this stage.

769
00:24:55,160 --> 00:24:57,899
We try and click generate.
Nothing happens.

770
00:24:57,899 --> 00:24:59,680
So at this stage, we
don't have an error,

771
00:24:59,680 --> 00:25:01,020
which is good, but it's

772
00:25:01,020 --> 00:25:03,099
still not quite working
the way we expect.

773
00:25:03,099 --> 00:25:04,799
The time is
slowly going up,

774
00:25:04,799 --> 00:25:06,239
which is nice, but

775
00:25:06,239 --> 00:25:07,139
nothing's happening

776
00:25:07,139 --> 00:25:09,059
with these random numbers.

777
00:25:09,059 --> 00:25:10,900
So clicking back, let's

778
00:25:10,900 --> 00:25:12,959
see what the
issue might be.

779
00:25:13,190 --> 00:25:16,689
So random button do
advent listener,

780
00:25:16,689 --> 00:25:17,949
click and then function.

781
00:25:17,949 --> 00:25:18,949
But immediately,
something that

782
00:25:18,949 --> 00:25:20,429
jumps out to me is

783
00:25:20,429 --> 00:25:23,350
this is an unknown word

784
00:25:23,350 --> 00:25:25,590
because we've actually
misspelled click.

785
00:25:25,590 --> 00:25:27,410
We need the C for click.

786
00:25:27,410 --> 00:25:30,749
So putting the C
back in and going

787
00:25:30,749 --> 00:25:34,990
back gives us
another error

788
00:25:34,990 --> 00:25:36,510
when we try and
click on generates.

789
00:25:36,510 --> 00:25:38,109
It says, Math
dot random is

790
00:25:38,109 --> 00:25:40,429
not a function
on line five.

791
00:25:40,429 --> 00:25:42,909
So looking back
at line five.

792
00:25:42,909 --> 00:25:45,669
It says, Math dot random
is not a function.

793
00:25:45,669 --> 00:25:46,470
Well, immediately,

794
00:25:46,470 --> 00:25:47,709
the two things
that jump out to

795
00:25:47,709 --> 00:25:50,909
me is this should probably
be a lowercase r,

796
00:25:50,909 --> 00:25:53,829
and this should
be a lowercase C.

797
00:25:54,190 --> 00:25:58,069
Like so. So going back,

798
00:25:58,069 --> 00:25:59,809
we then get a different
error message.

799
00:25:59,809 --> 00:26:01,610
It says, Cannot read
properties of Null

800
00:26:01,610 --> 00:26:03,990
reading first
child on line six.

801
00:26:03,990 --> 00:26:06,410
So going back to line six.

802
00:26:06,410 --> 00:26:09,910
It's having an issue
with this H two tag.

803
00:26:09,910 --> 00:26:11,470
And the funny
thing is, it's

804
00:26:11,470 --> 00:26:12,609
exactly the same issue we

805
00:26:12,609 --> 00:26:14,369
fixed with the
random button.

806
00:26:14,369 --> 00:26:16,229
We need to put
the.in front of

807
00:26:16,229 --> 00:26:20,079
dot random. Like so.

808
00:26:20,079 --> 00:26:23,369
So going back now
clicking refresh,

809
00:26:23,369 --> 00:26:25,490
now we generate
a random number

810
00:26:25,490 --> 00:26:27,710
each time we click the
button, which is good.

811
00:26:27,710 --> 00:26:28,910
So we've fixed one piece

812
00:26:28,910 --> 00:26:30,090
of that functionality,

813
00:26:30,090 --> 00:26:31,310
when we click Generate,

814
00:26:31,310 --> 00:26:33,290
we're generating a
new random number.

815
00:26:33,290 --> 00:26:34,589
The next problem
we need to

816
00:26:34,589 --> 00:26:35,969
fix is to do
with the timer.

817
00:26:35,969 --> 00:26:38,250
It's going up
incredibly slowly.

818
00:26:38,250 --> 00:26:41,509
We want this to go up
for every 1 second.

819
00:26:41,509 --> 00:26:44,029
So flicking back
to our code,

820
00:26:44,029 --> 00:26:46,670
we know we need to
look somewhere here.

821
00:26:46,670 --> 00:26:48,009
So the interval is

822
00:26:48,009 --> 00:26:49,390
actually controlled
by this number,

823
00:26:49,390 --> 00:26:51,089
and you've got to
remember, 1,000

824
00:26:51,089 --> 00:26:52,649
equals 1 second.

825
00:26:52,649 --> 00:26:55,009
We've actually got
this set to 10,000.

826
00:26:55,009 --> 00:26:57,890
So this is going up
every 10 seconds.

827
00:26:57,890 --> 00:27:01,289
So if we change
this back to 1,000,

828
00:27:01,370 --> 00:27:04,229
We should now have

829
00:27:04,229 --> 00:27:06,749
that time going up
every 1 second.

830
00:27:06,749 --> 00:27:10,429
And that is how you
fix exercise one.

831
00:27:10,429 --> 00:27:12,210
So that's all the mistakes

832
00:27:12,210 --> 00:27:13,869
that were found
in exercise one.

833
00:27:13,869 --> 00:27:15,910
But hopefully, you can
see how we fix those.

834
00:27:15,910 --> 00:27:17,070
We use those
error messages,

835
00:27:17,070 --> 00:27:19,349
and we went one
step at a time,

836
00:27:19,349 --> 00:27:23,089
starting with that
time plus issue,

837
00:27:23,089 --> 00:27:25,749
going into the defer
attributes and then

838
00:27:25,749 --> 00:27:26,929
finding those elements in

839
00:27:26,929 --> 00:27:29,254
the HTML from Java Script.

840
00:27:29,254 --> 00:27:31,220
Using those
error messages,

841
00:27:31,220 --> 00:27:33,019
it is incredibly useful.

842
00:27:33,019 --> 00:27:34,099
So again, if
you're going to

843
00:27:34,099 --> 00:27:35,320
take anything
away from today,

844
00:27:35,320 --> 00:27:36,900
it's have your
console open.

845
00:27:36,900 --> 00:27:38,599
If something's
not working,

846
00:27:38,599 --> 00:27:40,180
look in the console.

847
00:27:40,180 --> 00:27:41,780
Because again, if
there's a mistake,

848
00:27:41,780 --> 00:27:43,780
the console will
tell you exactly

849
00:27:43,780 --> 00:27:45,279
what that mistake is.

850
00:27:45,279 --> 00:27:46,360
Not only that it'll

851
00:27:46,360 --> 00:27:47,560
tell you exactly what line

852
00:27:47,560 --> 00:27:49,599
to start looking at
to try and fix it.

853
00:27:49,599 --> 00:27:52,360
So hopefully, that
makes a bit of sense.

854
00:27:52,360 --> 00:27:54,420
So we'll just
close exercise

855
00:27:54,420 --> 00:27:56,889
one because we don't
need it anymore.

856
00:27:56,889 --> 00:27:59,660
Moving into our
next topic area,

857
00:27:59,660 --> 00:28:01,199
then, this is strings.

858
00:28:01,199 --> 00:28:02,979
So strings are
by far one of

859
00:28:02,979 --> 00:28:04,379
the most common
pieces of data

860
00:28:04,379 --> 00:28:06,459
we typically use
in Java script.

861
00:28:06,459 --> 00:28:08,699
So, again, a bit of
a recap on strings.

862
00:28:08,699 --> 00:28:10,439
They are typically
going to be our words,

863
00:28:10,439 --> 00:28:12,139
our sentences
are paragraphs

864
00:28:12,139 --> 00:28:13,619
they're in the
quotation marks.

865
00:28:13,619 --> 00:28:16,850
Whenever we want a
word, we use a string.

866
00:28:16,850 --> 00:28:18,919
The nice thing
is, there are

867
00:28:18,919 --> 00:28:21,319
some very useful
methods which are pre

868
00:28:21,319 --> 00:28:23,879
built into Java script
for managing strings,

869
00:28:23,879 --> 00:28:26,439
which makes using them
significantly easier,

870
00:28:26,439 --> 00:28:28,420
whether it's
separating a string

871
00:28:28,420 --> 00:28:29,960
and returning
it as an array,

872
00:28:29,960 --> 00:28:31,859
capitalizing all
the characters in

873
00:28:31,859 --> 00:28:33,179
a string or even removing

874
00:28:33,179 --> 00:28:35,239
unnecessary white space.

875
00:28:35,239 --> 00:28:37,939
There's even specific
methods that check

876
00:28:37,939 --> 00:28:39,440
a certain part of a string

877
00:28:39,440 --> 00:28:40,900
for a specific word,

878
00:28:40,900 --> 00:28:42,620
which again, will
come into a bit

879
00:28:42,620 --> 00:28:44,960
more when we do arrays,
which is quite nice.

880
00:28:44,960 --> 00:28:46,419
So the first one
we're going to look

881
00:28:46,419 --> 00:28:48,119
at is the chart at method.

882
00:28:48,119 --> 00:28:49,620
This will return
the character

883
00:28:49,620 --> 00:28:51,500
at a given index.

884
00:28:51,500 --> 00:28:53,320
So in this
example, we've got

885
00:28:53,320 --> 00:28:55,385
the piece of text
hello world.

886
00:28:55,385 --> 00:28:58,709
When I say text.c0,

887
00:28:58,709 --> 00:29:01,710
it's going to give me
the H in hello world.

888
00:29:01,710 --> 00:29:02,529
So it's using this

889
00:29:02,529 --> 00:29:04,209
zero as the
index position.

890
00:29:04,209 --> 00:29:06,069
It's basically going
to go character by

891
00:29:06,069 --> 00:29:08,949
character until it
reaches that given index.

892
00:29:08,949 --> 00:29:11,429
So if I wanted the first
letter of a string,

893
00:29:11,429 --> 00:29:14,569
I could say text
dot char at zero to

894
00:29:14,569 --> 00:29:18,130
get that H. If I wanted
the second letter,

895
00:29:18,130 --> 00:29:19,389
again, I would
just change the

896
00:29:19,389 --> 00:29:20,729
index position to one,

897
00:29:20,729 --> 00:29:23,760
and it would give me
the in hello world.

898
00:29:23,760 --> 00:29:26,089
We're then just using
a console dot log and

899
00:29:26,089 --> 00:29:28,529
printing them out into
the console like so.

900
00:29:28,529 --> 00:29:30,050
But pretty cool, right?

901
00:29:30,050 --> 00:29:32,270
So you can get any
single character

902
00:29:32,270 --> 00:29:33,969
in a given string
that you like.

903
00:29:33,969 --> 00:29:34,849
So if you wanted to

904
00:29:34,849 --> 00:29:36,269
retrieve just the
first word or

905
00:29:36,269 --> 00:29:39,309
maybe the first three
letters, you can.

906
00:29:39,309 --> 00:29:41,844
Very nice and easy.

907
00:29:41,844 --> 00:29:44,019
Going on from
that, we then

908
00:29:44,019 --> 00:29:45,479
have the slice method.

909
00:29:45,479 --> 00:29:47,299
So slice is very useful

910
00:29:47,299 --> 00:29:49,939
for extracting
part of a string.

911
00:29:49,939 --> 00:29:51,559
This will actually
allow you

912
00:29:51,559 --> 00:29:52,919
to take one string,

913
00:29:52,919 --> 00:29:55,419
so one sentence and

914
00:29:55,419 --> 00:29:56,800
turn it into multiple

915
00:29:56,800 --> 00:29:58,700
words from that sentence.

916
00:29:58,700 --> 00:30:01,839
So again, going back
to previous example,

917
00:30:01,839 --> 00:30:04,100
we have the piece of
text hello world.

918
00:30:04,100 --> 00:30:06,119
So we've got a
variable called text,

919
00:30:06,119 --> 00:30:07,819
and inside that
text variable,

920
00:30:07,819 --> 00:30:10,639
it contains hello
space and world.

921
00:30:10,639 --> 00:30:12,500
As one string.

922
00:30:12,500 --> 00:30:14,220
Using slice, I could

923
00:30:14,220 --> 00:30:15,879
say constant hello equals

924
00:30:15,879 --> 00:30:18,879
text dot slice the
starting index position.

925
00:30:18,879 --> 00:30:20,360
So in my case, we're
going to start

926
00:30:20,360 --> 00:30:23,040
at the start point,
which is zero.

927
00:30:23,280 --> 00:30:25,580
A five,

928
00:30:25,580 --> 00:30:28,080
which is the ending
point of that word.

929
00:30:28,080 --> 00:30:28,859
So, if you actually

930
00:30:28,859 --> 00:30:30,000
count the number
of characters,

931
00:30:30,000 --> 00:30:31,459
we have zero, one,

932
00:30:31,459 --> 00:30:34,040
two, three, four and five.

933
00:30:34,040 --> 00:30:37,280
So when we say text
dot slice zero five,

934
00:30:37,280 --> 00:30:40,055
it will take all of
these characters here.

935
00:30:40,055 --> 00:30:43,270
And store it in this
hello variable.

936
00:30:43,270 --> 00:30:44,809
Doing the exact same thing

937
00:30:44,809 --> 00:30:46,069
with this weld variable.

938
00:30:46,069 --> 00:30:47,629
I can say constant
world equals

939
00:30:47,629 --> 00:30:50,110
text stot slice six to 11.

940
00:30:50,110 --> 00:30:51,609
So again, six starts

941
00:30:51,609 --> 00:30:54,850
here all the way to
11, which is here.

942
00:30:54,850 --> 00:30:57,389
So we're actually storing
the text hello in

943
00:30:57,389 --> 00:30:58,989
the hello variable and

944
00:30:58,989 --> 00:31:01,549
the text world in
the world variable.

945
00:31:01,549 --> 00:31:02,569
Then we're just
printing out

946
00:31:02,569 --> 00:31:03,669
these brand new variables,

947
00:31:03,669 --> 00:31:05,529
and that's why we've
got hello and then

948
00:31:05,529 --> 00:31:08,330
weld appearing
in our console.

949
00:31:08,330 --> 00:31:10,129
Pretty interesting,
though, right?

950
00:31:10,129 --> 00:31:11,169
So the idea is you

951
00:31:11,169 --> 00:31:12,369
can have a very
long piece of

952
00:31:12,369 --> 00:31:13,609
data and separate that

953
00:31:13,609 --> 00:31:15,625
into multiple variables.

954
00:31:15,625 --> 00:31:18,379
If you'd like.
If you want to,

955
00:31:18,379 --> 00:31:22,479
you could score the
score and the name of

956
00:31:22,479 --> 00:31:24,800
the user in one
single string

957
00:31:24,800 --> 00:31:26,900
and then separate
them, possibly.

958
00:31:26,900 --> 00:31:28,320
But to do that,
we might need

959
00:31:28,320 --> 00:31:30,739
to use a slightly
different method.

960
00:31:30,780 --> 00:31:33,020
A bit more of
a fun one now.

961
00:31:33,020 --> 00:31:34,259
If you would
like to convert

962
00:31:34,259 --> 00:31:36,259
a string to upper
case letters,

963
00:31:36,259 --> 00:31:37,660
you can do so using

964
00:31:37,660 --> 00:31:40,059
the two upper case method.

965
00:31:40,059 --> 00:31:41,459
So in this instance,

966
00:31:41,459 --> 00:31:42,600
we're turning hello world.

967
00:31:42,600 --> 00:31:44,260
So we've only
got a capital H

968
00:31:44,260 --> 00:31:46,785
and a capital
W by default.

969
00:31:46,785 --> 00:31:49,590
We can create a
brand new variable,

970
00:31:49,590 --> 00:31:52,750
which is hello world
all in upper case,

971
00:31:52,750 --> 00:31:55,649
by simply initializing
this variable to

972
00:31:55,649 --> 00:31:58,610
text dot to upper case
with two brackets,

973
00:31:58,610 --> 00:32:00,370
and then we have
hello world

974
00:32:00,370 --> 00:32:01,770
all in upper case.

975
00:32:01,770 --> 00:32:03,309
It's pretty cool, right?

976
00:32:03,309 --> 00:32:04,969
So the idea of
this one is if

977
00:32:04,969 --> 00:32:06,570
you had all lower
case letters,

978
00:32:06,570 --> 00:32:08,570
and you want to do
suddenly all upper case,

979
00:32:08,570 --> 00:32:11,330
for some reason, you
can automatically.

980
00:32:11,330 --> 00:32:13,249
You to manually go
in and change that.

981
00:32:13,249 --> 00:32:14,870
You can automatically
turn it into

982
00:32:14,870 --> 00:32:17,129
upper case, which
is very useful.

983
00:32:17,129 --> 00:32:19,850
Very similar to the
text transform property

984
00:32:19,850 --> 00:32:21,050
that we have in CSS.

985
00:32:21,050 --> 00:32:22,210
But in this case,
we're doing

986
00:32:22,210 --> 00:32:23,629
it purely in Java Script,

987
00:32:23,629 --> 00:32:26,144
and we're making it
using a new variable.

988
00:32:26,144 --> 00:32:29,139
So, again, a bit of
a unique one that,

989
00:32:29,139 --> 00:32:30,820
but there are situations

990
00:32:30,820 --> 00:32:33,739
where that can be
incredibly useful.

991
00:32:34,140 --> 00:32:37,159
Split now, this is
the one I think is

992
00:32:37,159 --> 00:32:39,780
considerably useful
to the assignment.

993
00:32:39,780 --> 00:32:41,499
So split can be used to

994
00:32:41,499 --> 00:32:43,719
split a string
into an array.

995
00:32:43,719 --> 00:32:45,179
You just need to decide

996
00:32:45,179 --> 00:32:47,739
where to split
the string from.

997
00:32:47,739 --> 00:32:49,960
So, let's say we
have the names

998
00:32:49,960 --> 00:32:51,360
sorry, Chris, Mark,

999
00:32:51,360 --> 00:32:52,800
and Tom, and they're

1000
00:32:52,800 --> 00:32:55,059
all separated with
an underscore.

1001
00:32:55,059 --> 00:32:56,779
If I wanted to create

1002
00:32:56,779 --> 00:32:59,700
an array of three
different items.

1003
00:32:59,700 --> 00:33:02,059
So we'd have array
with the value

1004
00:33:02,059 --> 00:33:04,940
Chris at
indeposition zero,

1005
00:33:04,940 --> 00:33:07,060
then indeposition
one could be mark,

1006
00:33:07,060 --> 00:33:09,020
Indeposition two
could be Tom.

1007
00:33:09,020 --> 00:33:12,459
We could do this by
using the split method.

1008
00:33:12,459 --> 00:33:14,019
So, in this case,
I'm creating

1009
00:33:14,019 --> 00:33:15,260
a brand new array.

1010
00:33:15,260 --> 00:33:17,860
So constant names
array equals names.

1011
00:33:17,860 --> 00:33:19,259
So again, names contains

1012
00:33:19,259 --> 00:33:20,480
Chris Mark and Tom

1013
00:33:20,480 --> 00:33:22,139
separated with
an underscore.

1014
00:33:22,139 --> 00:33:24,059
So names dot split,

1015
00:33:24,059 --> 00:33:25,859
then inside of
this method,

1016
00:33:25,859 --> 00:33:27,059
you just say what
you'd like to

1017
00:33:27,059 --> 00:33:28,399
split that string from.

1018
00:33:28,399 --> 00:33:31,520
So in my case, I'm
saying, create the array.

1019
00:33:31,520 --> 00:33:34,505
The individual
values of the array.

1020
00:33:34,505 --> 00:33:38,430
From these underscores.
So, in our case,

1021
00:33:38,430 --> 00:33:39,770
that's why it's
now saying Chris,

1022
00:33:39,770 --> 00:33:42,385
Combat Mark, Combat

1023
00:33:42,385 --> 00:33:45,200
And then, Tom.
Again, apologizes.

1024
00:33:45,200 --> 00:33:46,240
There's a lot of
traffic today.

1025
00:33:46,240 --> 00:33:46,940
It's not very fun.

1026
00:33:46,940 --> 00:33:48,659
I've got new traffic
lights outside,

1027
00:33:48,659 --> 00:33:51,039
and it's very,
very annoying.

1028
00:33:51,039 --> 00:33:52,479
So, in our case,
we're turning

1029
00:33:52,479 --> 00:33:56,319
a string into a
three valued array,

1030
00:33:56,319 --> 00:33:57,719
which is a lot more useful

1031
00:33:57,719 --> 00:33:59,019
to us in Java script.

1032
00:33:59,019 --> 00:34:00,479
So, again, in theory,

1033
00:34:00,479 --> 00:34:02,760
you could save the scores

1034
00:34:02,760 --> 00:34:04,779
and the user names
of the player

1035
00:34:04,779 --> 00:34:07,099
in one string
and separate it

1036
00:34:07,099 --> 00:34:09,879
by some kind of
denominator,

1037
00:34:09,879 --> 00:34:11,980
whether that's an
underscore or a comma.

1038
00:34:11,980 --> 00:34:14,280
But this is
incredibly useful.

1039
00:34:14,280 --> 00:34:15,799
So going back to this,

1040
00:34:15,799 --> 00:34:19,300
we'll just create a
very quick index.

1041
00:34:19,300 --> 00:34:22,939
I help if I could
spell index today.

1042
00:34:23,870 --> 00:34:26,189
There we go, and
we'll just create

1043
00:34:26,189 --> 00:34:28,230
our script tag.

1044
00:34:30,670 --> 00:34:34,930
Fantastic, script dot JS

1045
00:34:34,930 --> 00:34:37,069
defer and get rid

1046
00:34:37,069 --> 00:34:38,389
of this bong because
you don't need it.

1047
00:34:38,389 --> 00:34:39,429
And we'll zoom
in a little bit.

1048
00:34:39,429 --> 00:34:40,889
It seems a little bit.

1049
00:34:40,889 --> 00:34:42,610
Do strangely.

1050
00:34:42,610 --> 00:34:44,469
Fantastic. So we'll
just open this up

1051
00:34:44,469 --> 00:34:47,429
so we have something
to interact with.

1052
00:34:48,580 --> 00:34:53,620
Fantastic. So,
let's create

1053
00:34:53,620 --> 00:34:55,079
a string that we could

1054
00:34:55,079 --> 00:34:56,859
say what would be

1055
00:34:56,859 --> 00:34:58,160
a good string in
this instance.

1056
00:34:58,160 --> 00:35:01,180
We could do a
name and a score.

1057
00:35:01,180 --> 00:35:01,919
So the idea is,

1058
00:35:01,919 --> 00:35:02,859
we could do a user name

1059
00:35:02,859 --> 00:35:04,379
and the score of a player.

1060
00:35:04,379 --> 00:35:06,980
So we could say const.

1061
00:35:06,980 --> 00:35:14,960
Player one equals
Chris 100.

1062
00:35:14,960 --> 00:35:16,740
So let's say I have saved

1063
00:35:16,740 --> 00:35:17,979
the user name
of the player,

1064
00:35:17,979 --> 00:35:19,739
and let's say the
user name is Chris,

1065
00:35:19,739 --> 00:35:20,719
and I've saved the score,

1066
00:35:20,719 --> 00:35:21,880
which they got was 100.

1067
00:35:21,880 --> 00:35:23,479
And I've saved
this as a string.

1068
00:35:23,479 --> 00:35:26,059
We could then maybe
have player two.

1069
00:35:27,680 --> 00:35:31,579
We could say
maybe Mark 200,

1070
00:35:31,579 --> 00:35:34,059
for instance, we might

1071
00:35:34,059 --> 00:35:36,559
as well go for
a player three.

1072
00:35:41,350 --> 00:35:44,409
Tom got 20. Why not?

1073
00:35:44,409 --> 00:35:47,529
Actually let's
say Mark got 50.

1074
00:35:47,529 --> 00:35:50,750
So I've saved
this as a string.

1075
00:35:50,750 --> 00:35:52,449
If I wanted to, I could

1076
00:35:52,449 --> 00:35:53,649
turn these into an array,

1077
00:35:53,649 --> 00:35:55,149
and using an array,
I could then

1078
00:35:55,149 --> 00:35:55,949
do something a bit

1079
00:35:55,949 --> 00:35:57,209
more interesting
with them.

1080
00:35:57,209 --> 00:36:02,709
So I could say Player one

1081
00:36:02,709 --> 00:36:08,610
equals play a split.

1082
00:36:08,610 --> 00:36:11,069
I could then specify
I'd like it to be

1083
00:36:11,069 --> 00:36:14,549
split from the on this.

1084
00:36:14,549 --> 00:36:17,589
I then said
console dot log.

1085
00:36:18,470 --> 00:36:21,069
P one, we should

1086
00:36:21,069 --> 00:36:23,029
now get the array
of Player one,

1087
00:36:23,029 --> 00:36:24,329
and Player one should

1088
00:36:24,329 --> 00:36:26,989
contain Chris and
the score 100.

1089
00:36:26,989 --> 00:36:30,530
So these are now two
individual values.

1090
00:36:30,530 --> 00:36:32,820
The reason why that's
really useful,

1091
00:36:32,820 --> 00:36:34,169
is because we could do

1092
00:36:34,169 --> 00:36:35,590
something with that value.

1093
00:36:35,590 --> 00:36:37,909
If we had the arrays
and we knew that

1094
00:36:37,909 --> 00:36:39,730
the first index position

1095
00:36:39,730 --> 00:36:41,349
were the scores
of the array,

1096
00:36:41,349 --> 00:36:43,090
we could possibly
look at sorting

1097
00:36:43,090 --> 00:36:45,210
those scores from
highest to lowest.

1098
00:36:45,210 --> 00:36:46,990
If they were just strings,

1099
00:36:46,990 --> 00:36:49,610
we can't really do much
with just strings.

1100
00:36:49,610 --> 00:36:50,910
But turning these into

1101
00:36:50,910 --> 00:36:53,570
an array is quite useful.

1102
00:36:53,570 --> 00:36:55,110
Something to be
aware of, though,

1103
00:36:55,110 --> 00:36:56,689
is this 100 just here

1104
00:36:56,689 --> 00:36:58,350
is still going
to be a string.

1105
00:36:58,350 --> 00:36:59,249
It's still going to be in

1106
00:36:59,249 --> 00:37:00,329
the string data type.

1107
00:37:00,329 --> 00:37:01,749
So you might need to
convert this into

1108
00:37:01,749 --> 00:37:03,929
a number format
in order for

1109
00:37:03,929 --> 00:37:07,114
us to actually use this
as a number. Okay.

1110
00:37:07,114 --> 00:37:08,999
So we'll do the exact same

1111
00:37:08,999 --> 00:37:10,119
thing with the
rest of them.

1112
00:37:10,119 --> 00:37:11,699
So we'll say P one, two,

1113
00:37:11,699 --> 00:37:14,999
and three, two, and three.

1114
00:37:14,999 --> 00:37:17,039
We'll say Player two

1115
00:37:17,039 --> 00:37:18,879
split and play
a three split,

1116
00:37:18,879 --> 00:37:22,939
like so then we'll
just say player one,

1117
00:37:22,939 --> 00:37:25,859
player two and
play a three.

1118
00:37:31,910 --> 00:37:34,009
Now you can see, we've got

1119
00:37:34,009 --> 00:37:35,669
three different
arrays which

1120
00:37:35,669 --> 00:37:37,129
contain the
scores of Chris,

1121
00:37:37,129 --> 00:37:39,809
Mark, and T. How
about done Tome?

1122
00:37:39,809 --> 00:37:42,369
I meant Tom. But to.

1123
00:37:42,369 --> 00:37:44,510
That's not good.
So the IDs

1124
00:37:44,510 --> 00:37:46,029
have gone from this
string piece of

1125
00:37:46,029 --> 00:37:48,529
data into an array that

1126
00:37:48,529 --> 00:37:51,470
contains the name and
the score instead.

1127
00:37:51,470 --> 00:37:53,970
So we've made this string
a lot more useful,

1128
00:37:53,970 --> 00:37:56,329
we've separated
it by this,

1129
00:37:56,329 --> 00:37:58,769
which again, could
be very useful for

1130
00:37:58,769 --> 00:38:00,309
our leaderboard
functionality

1131
00:38:00,309 --> 00:38:01,729
further down the line.

1132
00:38:01,729 --> 00:38:04,659
Hopefully that makes
a bit of sense.

1133
00:38:04,659 --> 00:38:07,470
We've then got the
trim function,

1134
00:38:07,470 --> 00:38:09,390
not function method.

1135
00:38:09,390 --> 00:38:11,909
Keep using the word
function method.

1136
00:38:11,909 --> 00:38:12,750
It's very annoying.

1137
00:38:12,750 --> 00:38:14,270
Trim can be used to remove

1138
00:38:14,270 --> 00:38:15,909
any white space
from the start

1139
00:38:15,909 --> 00:38:17,630
and end of a string.

1140
00:38:17,630 --> 00:38:19,289
Very useful if you've got

1141
00:38:19,289 --> 00:38:20,769
some annoying
characters at

1142
00:38:20,769 --> 00:38:21,789
the start and the end and

1143
00:38:21,789 --> 00:38:23,510
you'd like them
to be removed.

1144
00:38:23,510 --> 00:38:25,409
Just be aware,
Trim does not

1145
00:38:25,409 --> 00:38:27,129
change the
original string.

1146
00:38:27,129 --> 00:38:29,230
So in our case, if
our piece of text

1147
00:38:29,230 --> 00:38:33,530
says loads of white
space hello world,

1148
00:38:33,530 --> 00:38:35,534
then loads of
white space again.

1149
00:38:35,534 --> 00:38:38,020
We could create a
brand new variable,

1150
00:38:38,020 --> 00:38:40,159
which equals text trim,

1151
00:38:40,159 --> 00:38:41,699
which will remove
all the space from

1152
00:38:41,699 --> 00:38:44,159
the start and all the
space from the end.

1153
00:38:44,159 --> 00:38:46,039
Again, very useful, if

1154
00:38:46,039 --> 00:38:47,320
your variable does contain

1155
00:38:47,320 --> 00:38:49,019
multiple characters
like that,

1156
00:38:49,019 --> 00:38:52,000
could be useful for
possible input field.

1157
00:38:52,000 --> 00:38:53,479
Again, if the
users actuate down

1158
00:38:53,479 --> 00:38:55,340
a bunch of spaces
before and after,

1159
00:38:55,340 --> 00:38:58,239
that could possibly
affect when you're

1160
00:38:58,239 --> 00:38:59,599
trying to compare
that data with

1161
00:38:59,599 --> 00:39:01,579
something retrieved
from the database.

1162
00:39:01,579 --> 00:39:04,839
So quite a nice little
method you can use.

1163
00:39:04,839 --> 00:39:05,499
Maybe not

1164
00:39:05,499 --> 00:39:07,540
necessarily useful
for the assignment,

1165
00:39:07,540 --> 00:39:10,029
but still useful to
know it's there.

1166
00:39:10,029 --> 00:39:11,959
Includes is
quite a fun one.

1167
00:39:11,959 --> 00:39:14,260
Includes will return
true or false,

1168
00:39:14,260 --> 00:39:15,780
if a string contains

1169
00:39:15,780 --> 00:39:18,639
a specific piece
of criteria.

1170
00:39:18,639 --> 00:39:21,499
So in our case, we have
the text hello world,

1171
00:39:21,499 --> 00:39:23,099
you know, we're
programmers,

1172
00:39:23,099 --> 00:39:24,199
we've got to
have that one.

1173
00:39:24,199 --> 00:39:26,680
I could create a
check variable,

1174
00:39:26,680 --> 00:39:28,399
which is basically
just going

1175
00:39:28,399 --> 00:39:30,059
to check to see
if this piece of

1176
00:39:30,059 --> 00:39:31,859
text contains whatever I

1177
00:39:31,859 --> 00:39:33,439
put inside of this bit.

1178
00:39:33,439 --> 00:39:34,839
So in this case,
I'm going to say

1179
00:39:34,839 --> 00:39:37,040
text dot includes hello.

1180
00:39:37,040 --> 00:39:38,799
So it's basically saying,

1181
00:39:38,799 --> 00:39:43,000
return true if hello is
found in hello world.

1182
00:39:43,000 --> 00:39:43,999
So in our case,

1183
00:39:43,999 --> 00:39:45,659
when I say console
dot log on check,

1184
00:39:45,659 --> 00:39:48,719
this returns back as
true, which is good.

1185
00:39:48,719 --> 00:39:51,020
If I were to change
the criteria,

1186
00:39:51,020 --> 00:39:52,379
instead of saying hello, I

1187
00:39:52,379 --> 00:39:53,720
change it to Chris.

1188
00:39:53,720 --> 00:39:56,039
Chris is no longer
inside this string.

1189
00:39:56,039 --> 00:39:58,480
So this check will
come back as false.

1190
00:39:58,480 --> 00:39:59,679
It's a very useful

1191
00:39:59,679 --> 00:40:00,799
if you want to
just check that

1192
00:40:00,799 --> 00:40:02,080
something contains
a certain

1193
00:40:02,080 --> 00:40:03,959
piece of information.

1194
00:40:03,959 --> 00:40:07,000
Quite a fun one
to use, actually.

1195
00:40:07,000 --> 00:40:09,039
This will hopefully make

1196
00:40:09,039 --> 00:40:11,640
everyone stay a
little bit easier.

1197
00:40:11,640 --> 00:40:13,700
This is called
template strings.

1198
00:40:13,700 --> 00:40:15,879
So typically, when we
want to add things with

1199
00:40:15,879 --> 00:40:17,519
a string so concateenate

1200
00:40:17,519 --> 00:40:18,840
strings together
with values,

1201
00:40:18,840 --> 00:40:20,319
I've taught you
to use the plus

1202
00:40:20,319 --> 00:40:22,679
operator, which is fine,

1203
00:40:22,679 --> 00:40:24,580
but sometimes it can
be quite annoying,

1204
00:40:24,580 --> 00:40:25,879
especially with
really long

1205
00:40:25,879 --> 00:40:28,520
complicated bits
of strings.

1206
00:40:28,520 --> 00:40:30,879
So instead, what
we could use is

1207
00:40:30,879 --> 00:40:32,819
something called a
template string.

1208
00:40:32,819 --> 00:40:35,939
Now, template strings
use the backtick.

1209
00:40:35,939 --> 00:40:37,359
In case people
weren't aware,

1210
00:40:37,359 --> 00:40:38,799
the backtick is
actually usually

1211
00:40:38,799 --> 00:40:40,699
the key underneath
your escape key.

1212
00:40:40,699 --> 00:40:42,799
It looks a bit like
a quotation mark,

1213
00:40:42,799 --> 00:40:44,200
but it's slightly pointed

1214
00:40:44,200 --> 00:40:45,700
in the opposite direction.

1215
00:40:45,700 --> 00:40:47,400
So if you kind of
see a standard

1216
00:40:47,400 --> 00:40:49,179
quotation mark is
this and this,

1217
00:40:49,179 --> 00:40:50,699
this is a b tick here.

1218
00:40:50,699 --> 00:40:52,799
So these just here a bats.

1219
00:40:52,799 --> 00:40:54,760
These are quotation marks.

1220
00:40:54,760 --> 00:40:56,420
So they are
slightly different.

1221
00:40:56,420 --> 00:40:57,279
They're a little bit more

1222
00:40:57,279 --> 00:40:58,680
tricky to see though.

1223
00:40:58,680 --> 00:41:00,119
But they are
usually the key

1224
00:41:00,119 --> 00:41:01,884
just under your
escape key.

1225
00:41:01,884 --> 00:41:04,689
So by using the
bac tick and

1226
00:41:04,689 --> 00:41:06,209
the dollar sign then

1227
00:41:06,209 --> 00:41:08,969
curly brackets and
a variable name,

1228
00:41:08,969 --> 00:41:10,690
you can actually
just print

1229
00:41:10,690 --> 00:41:13,329
a variable inside
of a string.

1230
00:41:13,329 --> 00:41:15,629
So in my case, I've
got the text hello.

1231
00:41:15,629 --> 00:41:17,550
If I'd like to
say hello world,

1232
00:41:17,550 --> 00:41:20,109
the old way of
doing this would be

1233
00:41:20,109 --> 00:41:22,289
quotation marks hello

1234
00:41:22,289 --> 00:41:25,339
plus quotation
marks World.

1235
00:41:25,339 --> 00:41:28,409
Whereas, in this case,
I'm saying B tick,

1236
00:41:28,409 --> 00:41:30,369
hello, dollar sign,

1237
00:41:30,369 --> 00:41:32,930
opening curly bracket,
closing curly bracket,

1238
00:41:32,930 --> 00:41:34,350
and then the
variable text,

1239
00:41:34,350 --> 00:41:36,669
and then the closing
backtick just here,

1240
00:41:36,669 --> 00:41:39,450
which gives me hello world

1241
00:41:39,450 --> 00:41:41,270
printed to my console.

1242
00:41:41,270 --> 00:41:42,309
Again, you might not

1243
00:41:42,309 --> 00:41:43,270
think this is very useful.

1244
00:41:43,270 --> 00:41:44,530
But if you did
the exercise

1245
00:41:44,530 --> 00:41:46,090
last week where I
got you to generate

1246
00:41:46,090 --> 00:41:49,830
three random numbers 1-255

1247
00:41:49,830 --> 00:41:51,649
and change the
background color of

1248
00:41:51,649 --> 00:41:54,110
that circle to a
completely random number,

1249
00:41:54,110 --> 00:41:57,175
it does actually make
our code a bit easier.

1250
00:41:57,175 --> 00:41:58,880
So using the old method,

1251
00:41:58,880 --> 00:42:00,559
you'd have to do
something like this.

1252
00:42:00,559 --> 00:42:02,520
So again, you
find the circle,

1253
00:42:02,520 --> 00:42:03,899
you create three
random numbers.

1254
00:42:03,899 --> 00:42:05,359
This is still
all the same.

1255
00:42:05,359 --> 00:42:06,840
But with the old method,

1256
00:42:06,840 --> 00:42:08,260
we'd have to say RGB,

1257
00:42:08,260 --> 00:42:10,960
then we'd close that
off and say plus random

1258
00:42:10,960 --> 00:42:13,959
one plus plus random two,

1259
00:42:13,959 --> 00:42:16,759
plus plus random three

1260
00:42:16,759 --> 00:42:19,234
plus the closing
bracket just here.

1261
00:42:19,234 --> 00:42:21,129
Whereas using a
template string.

1262
00:42:21,129 --> 00:42:22,569
We can actually
do that all in

1263
00:42:22,569 --> 00:42:24,629
one single string
like this.

1264
00:42:24,629 --> 00:42:28,609
We just say bticRGB
brackets, dollar sign,

1265
00:42:28,609 --> 00:42:30,669
random one, dollar sine,

1266
00:42:30,669 --> 00:42:33,769
random two, dollar
sine, random three.

1267
00:42:33,769 --> 00:42:35,809
And then we close
the b tick there.

1268
00:42:35,809 --> 00:42:38,209
It's a lot easier
to type. Trust me.

1269
00:42:38,209 --> 00:42:39,329
The number of times I've

1270
00:42:39,329 --> 00:42:40,470
had to make this
piece of code,

1271
00:42:40,470 --> 00:42:42,189
it's gone wrong because
I've either missed a

1272
00:42:42,189 --> 00:42:43,170
plus or I've missed

1273
00:42:43,170 --> 00:42:44,429
out where a
comma should be.

1274
00:42:44,429 --> 00:42:46,049
It's very, very
irritating.

1275
00:42:46,049 --> 00:42:47,730
Whereas with
templates strings,

1276
00:42:47,730 --> 00:42:49,269
it essentially
allows us to

1277
00:42:49,269 --> 00:42:52,170
insert things
into the strings.

1278
00:42:52,170 --> 00:42:54,670
Very easily. It's
very useful.

1279
00:42:54,670 --> 00:42:56,610
Again, it does
it's a bit tricky

1280
00:42:56,610 --> 00:42:57,469
to get into the habit of

1281
00:42:57,469 --> 00:42:58,769
using the ba tick, though.

1282
00:42:58,769 --> 00:43:00,589
Most people are quite
comfortable using

1283
00:43:00,589 --> 00:43:02,670
commons at this point
and quotation marks.

1284
00:43:02,670 --> 00:43:04,249
The back tick is in

1285
00:43:04,249 --> 00:43:06,349
a slightly different
location than the rest.

1286
00:43:06,349 --> 00:43:07,429
But the more you use it,

1287
00:43:07,429 --> 00:43:08,730
the easier that
muscle memory

1288
00:43:08,730 --> 00:43:09,810
will kind of get stored,

1289
00:43:09,810 --> 00:43:12,110
and again, the easier
it gets eventually.

1290
00:43:12,110 --> 00:43:13,549
So again, showing you how

1291
00:43:13,549 --> 00:43:14,829
really useful this is.

1292
00:43:14,829 --> 00:43:17,249
What I could say is.

1293
00:43:17,249 --> 00:43:20,589
So we could say
console dot log.

1294
00:43:22,300 --> 00:43:26,639
Bat. Player one has

1295
00:43:26,639 --> 00:43:32,280
the score Dollin
opening curly brackets,

1296
00:43:32,280 --> 00:43:34,799
and I could
then say P one,

1297
00:43:34,799 --> 00:43:38,319
one, which should now

1298
00:43:38,319 --> 00:43:40,479
print out the score
that Player one has.

1299
00:43:40,479 --> 00:43:42,559
So in my case, it
says, Player one

1300
00:43:42,559 --> 00:43:44,679
has the score of 100.

1301
00:43:44,679 --> 00:43:47,100
If I was going to use
the older approach

1302
00:43:47,100 --> 00:43:49,500
of doing this, I'd
have to say console.

1303
00:43:52,500 --> 00:44:01,139
Player one has the
score plus Player one.

1304
00:44:01,139 --> 00:44:02,639
Oh, we want P one,

1305
00:44:02,639 --> 00:44:05,339
don't mean P one
index position one.

1306
00:44:05,339 --> 00:44:06,559
Again, we'd have to use

1307
00:44:06,559 --> 00:44:07,940
the plus operator instead.

1308
00:44:07,940 --> 00:44:09,739
Whereas with this
approach, it's all being

1309
00:44:09,739 --> 00:44:11,980
contained in that
single string.

1310
00:44:11,980 --> 00:44:14,620
We're just using this
very unique syntax

1311
00:44:14,620 --> 00:44:16,700
to print out that
value instead.

1312
00:44:16,700 --> 00:44:18,979
It's a lot more
useful. Trust me.

1313
00:44:18,979 --> 00:44:22,219
Because what I could
do, I could say,

1314
00:44:25,080 --> 00:44:29,599
P one score equals this.

1315
00:44:31,240 --> 00:44:34,380
We need that inside
of it, actually.

1316
00:44:34,380 --> 00:44:37,740
P two score equals

1317
00:44:37,740 --> 00:44:42,039
then dollar sine,
P two, one.

1318
00:44:42,039 --> 00:44:50,850
Then P score
equals dollar sine

1319
00:44:50,850 --> 00:44:53,779
Oh, accidentally,

1320
00:44:53,779 --> 00:44:56,099
not done the Curly
brackets on that one.

1321
00:44:56,099 --> 00:44:59,099
Upsides. P three
equals this.

1322
00:44:59,099 --> 00:45:00,919
And this will
actually print out

1323
00:45:00,919 --> 00:45:02,239
the scores of
each of those

1324
00:45:02,239 --> 00:45:04,039
player characters,
which is good.

1325
00:45:04,039 --> 00:45:05,219
It we've done that in

1326
00:45:05,219 --> 00:45:06,539
quite a nice
stranger there.

1327
00:45:06,539 --> 00:45:08,040
So P one has a score 100,

1328
00:45:08,040 --> 00:45:11,299
P two has 50 and P three
has the score of 20.

1329
00:45:11,330 --> 00:45:13,770
To do this in
this approach,

1330
00:45:13,770 --> 00:45:16,449
I'd have to do plus

1331
00:45:16,690 --> 00:45:19,809
opening quotation
marks again,

1332
00:45:19,809 --> 00:45:28,209
P two score equals p20,

1333
00:45:28,209 --> 00:45:29,389
and I have to keep
on going like that.

1334
00:45:29,389 --> 00:45:30,729
So I'd keep on
having to close

1335
00:45:30,729 --> 00:45:32,610
these quotation marks,

1336
00:45:32,610 --> 00:45:34,829
do a plus sign
and then type out

1337
00:45:34,829 --> 00:45:37,730
again and then do
another plus sign,

1338
00:45:37,730 --> 00:45:40,229
open up those
quotation marks,

1339
00:45:40,229 --> 00:45:41,389
do a plus again, and print

1340
00:45:41,389 --> 00:45:42,470
out the play of
three score.

1341
00:45:42,470 --> 00:45:44,010
So it's a lot
more annoying.

1342
00:45:44,010 --> 00:45:45,730
Whereas with the
template strings,

1343
00:45:45,730 --> 00:45:46,950
it's a lot easier.

1344
00:45:46,950 --> 00:45:48,949
So typically, whenever
you're going to print

1345
00:45:48,949 --> 00:45:51,569
out kind of variables
into a string,

1346
00:45:51,569 --> 00:45:53,330
The more modern approach

1347
00:45:53,330 --> 00:45:54,589
for Java script is this.

1348
00:45:54,589 --> 00:45:56,489
So you can use those
back ticks and then have

1349
00:45:56,489 --> 00:45:58,810
the variables inside
of those instead.

1350
00:45:58,810 --> 00:46:00,849
So we're introducing
this at this stage.

1351
00:46:00,849 --> 00:46:02,330
Feel free to use it
for the assignment.

1352
00:46:02,330 --> 00:46:03,750
You won't receive
kind of different

1353
00:46:03,750 --> 00:46:05,110
marks for either approach.

1354
00:46:05,110 --> 00:46:06,929
If you prefer
using the plus

1355
00:46:06,929 --> 00:46:09,129
operation, feel free to,

1356
00:46:09,129 --> 00:46:10,569
for most of kind of

1357
00:46:10,569 --> 00:46:13,350
the modern Javascript
development,

1358
00:46:13,350 --> 00:46:16,329
it's more linking towards
this, I would say.

1359
00:46:16,329 --> 00:46:17,369
Okay.

1360
00:46:17,369 --> 00:46:19,309
So hopefully, that
makes a bit of sense.

1361
00:46:19,309 --> 00:46:20,529
It's genuinely quite a bit

1362
00:46:20,529 --> 00:46:21,750
easier, in my opinion.

1363
00:46:21,750 --> 00:46:23,489
You are using a few
different symbols there,

1364
00:46:23,489 --> 00:46:24,189
so it might look a

1365
00:46:24,189 --> 00:46:25,690
little bit weird
initially,

1366
00:46:25,690 --> 00:46:27,389
but I think it's

1367
00:46:27,389 --> 00:46:30,170
quite a bit of fun
in my opinion.

1368
00:46:30,620 --> 00:46:32,980
Moving on, then,
functions.

1369
00:46:32,980 --> 00:46:35,500
So we've done a bit
of work on functions.

1370
00:46:35,500 --> 00:46:37,639
Now, log functions are

1371
00:46:37,639 --> 00:46:39,620
typically quite
difficult to follow.

1372
00:46:39,620 --> 00:46:41,559
That's why breaking
up our code into

1373
00:46:41,559 --> 00:46:43,059
smaller chunks is a lot

1374
00:46:43,059 --> 00:46:45,140
easier to write
and understand.

1375
00:46:45,140 --> 00:46:47,039
So the way I've
taught you is to

1376
00:46:47,039 --> 00:46:48,500
break things up
into functions,

1377
00:46:48,500 --> 00:46:49,999
and that's really
the key to a lot

1378
00:46:49,999 --> 00:46:51,800
of the higher marks
in the assignment.

1379
00:46:51,800 --> 00:46:53,099
If you've got
everything in

1380
00:46:53,099 --> 00:46:54,599
one single function
where it's

1381
00:46:54,599 --> 00:46:56,160
50 lines of code

1382
00:46:56,160 --> 00:46:58,839
consecutively. That's
not very good.

1383
00:46:58,839 --> 00:47:00,139
Whereas if you
break things

1384
00:47:00,139 --> 00:47:01,440
up into smaller chunks,

1385
00:47:01,440 --> 00:47:02,699
it's a lot easier
to kind of

1386
00:47:02,699 --> 00:47:04,599
diagnose where things
might have gone wrong.

1387
00:47:04,599 --> 00:47:06,839
You can kind of follow
the chain and pick

1388
00:47:06,839 --> 00:47:08,239
exactly which function you

1389
00:47:08,239 --> 00:47:10,319
might need to
change or edit.

1390
00:47:10,319 --> 00:47:12,179
So, so far, we've used

1391
00:47:12,179 --> 00:47:14,320
functions to respond
to specific events,

1392
00:47:14,320 --> 00:47:15,760
whether that's
the page loading,

1393
00:47:15,760 --> 00:47:18,680
specific button clicks
or even timers.

1394
00:47:18,680 --> 00:47:20,719
We also know
that we can call

1395
00:47:20,719 --> 00:47:22,679
and create a
function ourselves.

1396
00:47:22,679 --> 00:47:24,459
So again, we call
a function by just

1397
00:47:24,459 --> 00:47:26,880
using its name
followed by brackets.

1398
00:47:26,880 --> 00:47:29,860
Now, the main use for
functions is to reduce

1399
00:47:29,860 --> 00:47:31,519
repeated code and break

1400
00:47:31,519 --> 00:47:33,760
that code into
smaller chunks.

1401
00:47:33,760 --> 00:47:36,260
When we put our code
into functions,

1402
00:47:36,260 --> 00:47:37,679
it makes it more
manageable and a

1403
00:47:37,679 --> 00:47:39,980
lot easier to
read and follow.

1404
00:47:39,980 --> 00:47:41,639
But the brand new bit

1405
00:47:41,639 --> 00:47:42,599
of content we're
going to go

1406
00:47:42,599 --> 00:47:45,260
through today is
called arguments.

1407
00:47:45,260 --> 00:47:46,940
So when you call
a function,

1408
00:47:46,940 --> 00:47:49,479
the code inside that
function is run.

1409
00:47:49,479 --> 00:47:51,039
But it's actually
possible to

1410
00:47:51,039 --> 00:47:52,800
send values to a function

1411
00:47:52,800 --> 00:47:54,219
that are unique every

1412
00:47:54,219 --> 00:47:56,460
single time we call
that function.

1413
00:47:56,460 --> 00:47:58,460
And this is actually
called arguments.

1414
00:47:58,460 --> 00:47:59,939
The really
interesting thing is,

1415
00:47:59,939 --> 00:48:02,019
we've been using arguments
since the start of

1416
00:48:02,019 --> 00:48:05,179
Java Script all the way
back from Week eight.

1417
00:48:05,179 --> 00:48:06,819
Well, when you use

1418
00:48:06,819 --> 00:48:08,240
functions like
query selector,

1419
00:48:08,240 --> 00:48:10,119
we put the ID
or the class or

1420
00:48:10,119 --> 00:48:12,259
the tag of the element
we'd like to find.

1421
00:48:12,259 --> 00:48:13,599
So in this case,
we're putting

1422
00:48:13,599 --> 00:48:15,760
the hashtag heading,
the dot point.

1423
00:48:15,760 --> 00:48:16,819
Even for an alert,

1424
00:48:16,819 --> 00:48:18,340
we're saying
hello and world,

1425
00:48:18,340 --> 00:48:20,200
we're putting
things inside

1426
00:48:20,200 --> 00:48:22,359
of these brackets
just here.

1427
00:48:22,359 --> 00:48:25,259
We're actually
sending that string

1428
00:48:25,259 --> 00:48:28,180
into that specific
function.

1429
00:48:28,180 --> 00:48:30,220
That's called an argument.

1430
00:48:30,220 --> 00:48:32,519
That function is
doing something

1431
00:48:32,519 --> 00:48:34,700
based on that data
that we provide.

1432
00:48:34,700 --> 00:48:36,480
In our case with
query selector,

1433
00:48:36,480 --> 00:48:39,299
it's finding those
elements from our HTML.

1434
00:48:39,299 --> 00:48:41,180
In alert, it's printing

1435
00:48:41,180 --> 00:48:44,539
that string into
that dialog box.

1436
00:48:44,650 --> 00:48:46,609
The interesting thing is,

1437
00:48:46,609 --> 00:48:47,930
we can actually create

1438
00:48:47,930 --> 00:48:50,110
functions that
take arguments

1439
00:48:50,110 --> 00:48:51,349
in the exact same way.

1440
00:48:51,349 --> 00:48:53,750
And the way we do
this is by putting

1441
00:48:53,750 --> 00:48:55,229
the variable name or

1442
00:48:55,229 --> 00:48:57,910
a variable name inside
of these brackets,

1443
00:48:57,910 --> 00:48:59,770
wherever we create
the function

1444
00:48:59,770 --> 00:49:02,030
where we've defined
that function.

1445
00:49:02,030 --> 00:49:03,969
So, in this
case, I'm saying

1446
00:49:03,969 --> 00:49:05,329
function print text,

1447
00:49:05,329 --> 00:49:06,550
so I'm creating a function

1448
00:49:06,550 --> 00:49:08,610
that's going to print
a piece of text.

1449
00:49:08,610 --> 00:49:11,730
Inside these brackets,
I'm then saying text.

1450
00:49:11,730 --> 00:49:13,209
So we're just going to say

1451
00:49:13,209 --> 00:49:15,130
expect a text variable.

1452
00:49:15,130 --> 00:49:16,889
Inside a console dot log,

1453
00:49:16,889 --> 00:49:19,050
I'm then using that
text variable.

1454
00:49:19,050 --> 00:49:21,669
So can you see how these
two match just here.

1455
00:49:21,669 --> 00:49:24,390
So actually, putting
this into practice,

1456
00:49:24,390 --> 00:49:26,009
if I were to call

1457
00:49:26,009 --> 00:49:28,949
print text with
the text test one,

1458
00:49:28,949 --> 00:49:32,189
test one as the
string gets sent to

1459
00:49:32,189 --> 00:49:34,389
this function
and gets used

1460
00:49:34,389 --> 00:49:37,110
wherever text is used
inside this function.

1461
00:49:37,110 --> 00:49:38,830
So in this
specific example,

1462
00:49:38,830 --> 00:49:40,449
when I say print text,

1463
00:49:40,449 --> 00:49:42,129
open up these brackets and

1464
00:49:42,129 --> 00:49:44,289
say string Test one,

1465
00:49:44,289 --> 00:49:47,395
Test one gets printed
to my console.

1466
00:49:47,395 --> 00:49:49,159
Changing this, I could

1467
00:49:49,159 --> 00:49:51,220
then change it to hello,

1468
00:49:51,220 --> 00:49:52,999
which would then
print hello

1469
00:49:52,999 --> 00:49:54,780
onto my console instead.

1470
00:49:54,780 --> 00:49:57,479
So I could put any
string in this I like,

1471
00:49:57,479 --> 00:50:00,700
and it'll print that
string into my console.

1472
00:50:00,700 --> 00:50:02,359
And the really
nice thing is,

1473
00:50:02,359 --> 00:50:04,220
we can call this
function multiple

1474
00:50:04,220 --> 00:50:06,420
times with
different values.

1475
00:50:06,420 --> 00:50:07,459
So I could call

1476
00:50:07,459 --> 00:50:08,919
the function once
and say hello.

1477
00:50:08,919 --> 00:50:10,280
Call it again world.

1478
00:50:10,280 --> 00:50:11,219
Call it again with

1479
00:50:11,219 --> 00:50:12,620
multiple
exclamation marks.

1480
00:50:12,620 --> 00:50:13,299
I could even put

1481
00:50:13,299 --> 00:50:14,799
numbers in there
if I'd like.

1482
00:50:14,799 --> 00:50:17,819
And that'll print out
all of this data every

1483
00:50:17,819 --> 00:50:19,259
single time because we've

1484
00:50:19,259 --> 00:50:21,259
built that function
to do exactly that.

1485
00:50:21,259 --> 00:50:22,479
We're saying we're going

1486
00:50:22,479 --> 00:50:23,959
to give you some
information,

1487
00:50:23,959 --> 00:50:26,619
print out the
information we give you.

1488
00:50:26,619 --> 00:50:28,720
And that's essentially
how arguments

1489
00:50:28,720 --> 00:50:29,839
in a function work.

1490
00:50:29,839 --> 00:50:31,799
The nice thing
is, we can have

1491
00:50:31,799 --> 00:50:34,119
multiple arguments
at a time.

1492
00:50:34,119 --> 00:50:35,960
So in this instance,
I'm passing

1493
00:50:35,960 --> 00:50:38,380
in two different
pieces of data.

1494
00:50:38,380 --> 00:50:40,400
So I'm creating a
brand new function

1495
00:50:40,400 --> 00:50:42,160
called create element.

1496
00:50:42,160 --> 00:50:45,020
I'm going to say, expect

1497
00:50:45,020 --> 00:50:46,219
the tag I would like to

1498
00:50:46,219 --> 00:50:48,240
create and expect
the piece of text,

1499
00:50:48,240 --> 00:50:50,419
I would like
inside that tag.

1500
00:50:50,419 --> 00:50:52,720
So in the first call
of this function,

1501
00:50:52,720 --> 00:50:54,040
I'm going to say
create element,

1502
00:50:54,040 --> 00:50:57,680
H one, and give it
the text heading.

1503
00:50:57,680 --> 00:50:59,859
So if we look inside
this function then,

1504
00:50:59,859 --> 00:51:01,834
so again, we're on
the first call.

1505
00:51:01,834 --> 00:51:05,430
We're saying,
create the element

1506
00:51:05,430 --> 00:51:07,869
based on the tag that
we've passed into it.

1507
00:51:07,869 --> 00:51:09,790
We're then saying,
create the text node

1508
00:51:09,790 --> 00:51:11,609
based on the text
we've passed in.

1509
00:51:11,609 --> 00:51:13,829
We're then adding
that text node onto

1510
00:51:13,829 --> 00:51:17,070
our tag and adding the
tag onto the body.

1511
00:51:17,070 --> 00:51:19,030
If this doesn't
look very familiar,

1512
00:51:19,030 --> 00:51:20,609
go back to last week when

1513
00:51:20,609 --> 00:51:22,170
we looked at the
document object model,

1514
00:51:22,170 --> 00:51:25,129
because last week, we
looked at so Week 11,

1515
00:51:25,129 --> 00:51:26,110
we looked at creating

1516
00:51:26,110 --> 00:51:27,330
elements and
removing elements.

1517
00:51:27,330 --> 00:51:28,769
And that's what we're
doing just here.

1518
00:51:28,769 --> 00:51:30,909
We're not going to go
back over that today.

1519
00:51:30,909 --> 00:51:33,169
But I do highly recommend
looking back at

1520
00:51:33,169 --> 00:51:36,050
last week if you didn't
attend that lecture.

1521
00:51:36,050 --> 00:51:37,629
We went over
quite a lot of

1522
00:51:37,629 --> 00:51:38,770
really useful concepts

1523
00:51:38,770 --> 00:51:40,705
in that particular
lecture.

1524
00:51:40,705 --> 00:51:43,019
So what we've actually
done here is we've

1525
00:51:43,019 --> 00:51:44,899
created a function
that will

1526
00:51:44,899 --> 00:51:46,599
create an element
for us and

1527
00:51:46,599 --> 00:51:47,799
populate that element with

1528
00:51:47,799 --> 00:51:49,340
a specific piece of text.

1529
00:51:49,340 --> 00:51:51,000
In my case, if I
call that function

1530
00:51:51,000 --> 00:51:52,900
once and say H
one and heading,

1531
00:51:52,900 --> 00:51:56,060
that will add this
heading onto my body.

1532
00:51:56,060 --> 00:51:58,539
Same thing with this H
four and this p tag,

1533
00:51:58,539 --> 00:52:00,539
it will create those
elements for me and

1534
00:52:00,539 --> 00:52:03,379
put it into my HTML.

1535
00:52:03,379 --> 00:52:06,259
That's pretty
cool. Let's try

1536
00:52:06,259 --> 00:52:08,809
and utilize one of
these ourselves, then.

1537
00:52:08,809 --> 00:52:11,419
So if I wanted
to, I could,

1538
00:52:11,419 --> 00:52:12,539
for instance, let's say,

1539
00:52:12,539 --> 00:52:13,780
create a brand
new function.

1540
00:52:13,780 --> 00:52:16,480
I could say
function addition.

1541
00:52:16,480 --> 00:52:18,100
And inside this
addition function,

1542
00:52:18,100 --> 00:52:18,819
I'm going to say,

1543
00:52:18,819 --> 00:52:22,999
expect the number one
and the number two.

1544
00:52:22,999 --> 00:52:26,180
So the idea is, I could
use this function,

1545
00:52:26,180 --> 00:52:27,759
and it's going
to tell me what

1546
00:52:27,759 --> 00:52:29,039
number one plus number

1547
00:52:29,039 --> 00:52:32,499
two equals. So I
could say add.

1548
00:52:32,499 --> 00:52:36,219
Let's say ten plus 20.

1549
00:52:36,219 --> 00:52:38,640
So the idea is if I
call this function,

1550
00:52:38,640 --> 00:52:40,340
I'm expecting
this function

1551
00:52:40,340 --> 00:52:42,680
to add ten and
20 together.

1552
00:52:42,680 --> 00:52:44,519
So inside of here,
I could create

1553
00:52:44,519 --> 00:52:46,280
a brand new variable
called total.

1554
00:52:46,280 --> 00:52:47,960
I could say total equals

1555
00:52:47,960 --> 00:52:51,339
number one plus
number two.

1556
00:52:51,610 --> 00:52:56,110
We're then going to
say alert total.

1557
00:52:56,110 --> 00:52:58,650
So if I use this
piece of code,

1558
00:52:58,650 --> 00:53:00,589
it should print out 30.

1559
00:53:00,589 --> 00:53:02,229
Because again,
we've put in ten,

1560
00:53:02,229 --> 00:53:03,509
and we've put in 20.

1561
00:53:03,509 --> 00:53:05,670
So opening this up
into the browser,

1562
00:53:05,670 --> 00:53:08,149
is telling me 30,
just like so.

1563
00:53:08,149 --> 00:53:10,349
We'll change that
to console dot log

1564
00:53:10,349 --> 00:53:12,890
because alert is
very annoying.

1565
00:53:16,270 --> 00:53:18,370
But I could keep calling

1566
00:53:18,370 --> 00:53:20,950
this function with
different values.

1567
00:53:20,950 --> 00:53:23,009
So sad of ten,

1568
00:53:23,009 --> 00:53:25,909
we could say
one plus five.

1569
00:53:25,910 --> 00:53:30,269
We could say 100 plus two.

1570
00:53:30,310 --> 00:53:37,189
We could say 55
plus 900. Why not?

1571
00:53:37,189 --> 00:53:39,109
And each time,
this should give

1572
00:53:39,109 --> 00:53:41,490
me the value of these
two added together.

1573
00:53:41,490 --> 00:53:45,070
So 36, 102, 955.

1574
00:53:45,070 --> 00:53:46,450
So using this approach,

1575
00:53:46,450 --> 00:53:46,989
we can make

1576
00:53:46,989 --> 00:53:49,200
some really
interesting functions.

1577
00:53:49,200 --> 00:53:51,630
From the previous
slide, we created

1578
00:53:51,630 --> 00:53:52,730
a function that actually

1579
00:53:52,730 --> 00:53:54,770
added elements
to our page.

1580
00:53:54,770 --> 00:53:56,549
But more importantly added

1581
00:53:56,549 --> 00:53:59,209
the text to those
elements as well.

1582
00:53:59,209 --> 00:54:00,709
In this approach,
we're just

1583
00:54:00,709 --> 00:54:01,910
adding two
numbers together.

1584
00:54:01,910 --> 00:54:03,209
But realistically,
we could

1585
00:54:03,209 --> 00:54:04,709
do anything we
really like.

1586
00:54:04,709 --> 00:54:07,130
We could pass in a
specific element

1587
00:54:07,130 --> 00:54:08,530
and move it around
the screen.

1588
00:54:08,530 --> 00:54:11,050
We could create a
collision tection function

1589
00:54:11,050 --> 00:54:13,510
that we pass in our left
and top properties,

1590
00:54:13,510 --> 00:54:14,589
and it'll give us

1591
00:54:14,589 --> 00:54:17,250
the collision
back, possibly.

1592
00:54:19,760 --> 00:54:24,060
Excuse me. So using
this approach,

1593
00:54:24,060 --> 00:54:26,979
we can pass data into
a function and it will

1594
00:54:26,979 --> 00:54:28,279
do something based on

1595
00:54:28,279 --> 00:54:30,320
the data we have provided.

1596
00:54:30,320 --> 00:54:32,240
It's really useful.

1597
00:54:32,240 --> 00:54:34,360
Following on with
that usefulness,

1598
00:54:34,360 --> 00:54:36,120
we can also return values

1599
00:54:36,120 --> 00:54:39,480
back when they
have been called.

1600
00:54:39,480 --> 00:54:41,539
The nice thing is,
we've been using

1601
00:54:41,539 --> 00:54:43,779
returns again,
from the start.

1602
00:54:43,779 --> 00:54:46,039
When we create an
element based on

1603
00:54:46,039 --> 00:54:47,560
document dot
query selector

1604
00:54:47,560 --> 00:54:48,840
or math dot random,

1605
00:54:48,840 --> 00:54:51,140
it brings us a value

1606
00:54:51,140 --> 00:54:53,340
and it stores that value

1607
00:54:53,340 --> 00:54:55,140
inside of that variable.

1608
00:54:55,140 --> 00:54:59,599
So constant element
becomes this P tag,

1609
00:54:59,599 --> 00:55:03,280
Enemies becomes all the
enemies on that page.

1610
00:55:03,280 --> 00:55:06,800
Random number becomes
a random number 0-1,

1611
00:55:06,800 --> 00:55:09,959
so it's bringing
something back.

1612
00:55:12,360 --> 00:55:15,939
Now, the reason this
happens is because

1613
00:55:15,939 --> 00:55:17,859
these functions
have something

1614
00:55:17,859 --> 00:55:19,920
built into them,
they're called returns.

1615
00:55:19,920 --> 00:55:21,159
So the idea is we call

1616
00:55:21,159 --> 00:55:23,480
this function and it
will return a value.

1617
00:55:23,480 --> 00:55:25,059
Whether that's a
random number,

1618
00:55:25,059 --> 00:55:26,300
whether it's an element,

1619
00:55:26,300 --> 00:55:27,879
whether it's a lean value,

1620
00:55:27,879 --> 00:55:28,819
true or false, it

1621
00:55:28,819 --> 00:55:30,299
will give us
something back.

1622
00:55:30,299 --> 00:55:31,939
And the really nice
thing is we can

1623
00:55:31,939 --> 00:55:34,545
add this to our
own functions.

1624
00:55:34,545 --> 00:55:37,250
So if you end a
function with return,

1625
00:55:37,250 --> 00:55:39,270
and then you return
either a variable

1626
00:55:39,270 --> 00:55:40,850
or a specific value,

1627
00:55:40,850 --> 00:55:43,830
you can create a
brand new element,

1628
00:55:43,830 --> 00:55:45,389
and it will be populated

1629
00:55:45,389 --> 00:55:46,630
by whatever
we've returned.

1630
00:55:46,630 --> 00:55:48,170
So in this case,
we've created

1631
00:55:48,170 --> 00:55:49,449
a brand new
function called

1632
00:55:49,449 --> 00:55:51,409
random number generator.

1633
00:55:51,409 --> 00:55:54,969
We're then generating
a random number 1-10.

1634
00:55:54,969 --> 00:55:56,369
Again, we can tell
that it's one to

1635
00:55:56,369 --> 00:55:58,324
ten because it's
math dot seal.

1636
00:55:58,324 --> 00:56:01,020
We're then returning
that random number,

1637
00:56:01,020 --> 00:56:02,960
so we're returning
that number variable.

1638
00:56:02,960 --> 00:56:04,899
So when we say
constant random one

1639
00:56:04,899 --> 00:56:06,700
equals random
number generator,

1640
00:56:06,700 --> 00:56:08,820
whatever

1641
00:56:08,820 --> 00:56:11,960
random number was
generated gets returned,

1642
00:56:11,960 --> 00:56:13,939
and then random one

1643
00:56:13,939 --> 00:56:15,919
becomes that
random number.

1644
00:56:15,919 --> 00:56:17,059
So if we create

1645
00:56:17,059 --> 00:56:18,559
three variables
based on this,

1646
00:56:18,559 --> 00:56:22,559
we get three different
random numbers back.

1647
00:56:22,680 --> 00:56:26,959
So again, adding a bit
more to this then.

1648
00:56:27,040 --> 00:56:30,120
We could say function.

1649
00:56:31,960 --> 00:56:35,080
Random numbers.

1650
00:56:35,440 --> 00:56:40,860
So we could say
constant random number

1651
00:56:40,860 --> 00:56:44,040
equals math dot Sal

1652
00:56:44,850 --> 00:56:47,229
Don't go to capital M,

1653
00:56:47,229 --> 00:56:50,430
Math dot heel
Math dot random.

1654
00:56:50,430 --> 00:56:52,509
Who, my shift key does

1655
00:56:52,509 --> 00:56:54,809
not seem to be responding
very well today.

1656
00:56:54,809 --> 00:56:56,690
Hopefully it doesn't
cause any more issues.

1657
00:56:56,690 --> 00:56:58,669
We'll say times
100. Why not?

1658
00:56:58,669 --> 00:57:02,030
And then we return
random number.

1659
00:57:02,030 --> 00:57:05,569
If I were to call this
function a few times.

1660
00:57:05,569 --> 00:57:08,149
So let's say
random number.

1661
00:57:08,149 --> 00:57:11,209
Let's say constant R one

1662
00:57:11,209 --> 00:57:13,810
equals random numbers.

1663
00:57:14,530 --> 00:57:17,809
So we'll do three of
these random one,

1664
00:57:17,809 --> 00:57:20,369
random two, and
random three.

1665
00:57:21,870 --> 00:57:27,989
You can then say
console dot log one,

1666
00:57:28,070 --> 00:57:31,669
R two and R three.

1667
00:57:35,070 --> 00:57:38,269
L so we should

1668
00:57:38,269 --> 00:57:40,309
now have

1669
00:57:40,309 --> 00:57:42,010
the randomly generating

1670
00:57:42,010 --> 00:57:43,549
numbers every single time,

1671
00:57:43,549 --> 00:57:45,590
and we're just using
that one function

1672
00:57:45,590 --> 00:57:47,450
to return those values.

1673
00:57:47,450 --> 00:57:50,530
So, you can see there,
our random numbers

1674
00:57:50,530 --> 00:57:53,750
are changing each time
we call this function.

1675
00:57:54,780 --> 00:57:56,960
So, believe it or
not, we've actually

1676
00:57:56,960 --> 00:57:57,400
created

1677
00:57:57,400 --> 00:57:59,899
quite a nice optimized
bit of code there.

1678
00:57:59,899 --> 00:58:01,800
With our previous
approach,

1679
00:58:01,800 --> 00:58:02,979
we'd have to have
this piece of

1680
00:58:02,979 --> 00:58:05,520
code inside of each
of these variables.

1681
00:58:05,520 --> 00:58:07,279
So we'd say, MthodoCL

1682
00:58:07,279 --> 00:58:08,720
method random times 100

1683
00:58:08,720 --> 00:58:10,080
for each of these lines.

1684
00:58:10,080 --> 00:58:11,619
Whereas now we're
just calling it

1685
00:58:11,619 --> 00:58:13,299
from a function
three times,

1686
00:58:13,299 --> 00:58:15,239
which is pretty
cool. We wanted to.

1687
00:58:15,239 --> 00:58:17,080
We could even kind of
forego that entirely.

1688
00:58:17,080 --> 00:58:19,300
We could just
put this inside

1689
00:58:19,300 --> 00:58:21,824
that console dot
log, like so.

1690
00:58:21,824 --> 00:58:23,229
So we wouldn't even

1691
00:58:23,229 --> 00:58:24,690
really need to create
these variables.

1692
00:58:24,690 --> 00:58:27,130
We could just have this
three times instead.

1693
00:58:27,130 --> 00:58:27,989
Because again,

1694
00:58:27,989 --> 00:58:29,809
it's returning
that value back.

1695
00:58:29,809 --> 00:58:33,109
So by having
this, we also get

1696
00:58:33,109 --> 00:58:35,290
those three randomly
generating numbers,

1697
00:58:35,290 --> 00:58:36,749
which is quite cool.

1698
00:58:36,749 --> 00:58:38,630
So if you are
returning a value,

1699
00:58:38,630 --> 00:58:39,809
you can put that
straight into

1700
00:58:39,809 --> 00:58:41,830
an alert or a console
up log or typically,

1701
00:58:41,830 --> 00:58:43,509
wherever you'd have
the variable name

1702
00:58:43,509 --> 00:58:45,290
for that value instead.

1703
00:58:45,290 --> 00:58:47,829
Very useful tool to know.

1704
00:58:48,350 --> 00:58:51,029
What we could do is

1705
00:58:51,029 --> 00:58:54,030
combine arguments and
returns together.

1706
00:58:54,030 --> 00:58:55,770
So, in our case,
we're creating

1707
00:58:55,770 --> 00:58:57,710
our random number
generator,

1708
00:58:57,710 --> 00:58:59,109
but we're also telling it

1709
00:58:59,109 --> 00:59:00,489
what number we'd like for

1710
00:59:00,489 --> 00:59:02,449
our maximum number to be.

1711
00:59:02,449 --> 00:59:04,909
So in this case
here, we're saying,

1712
00:59:04,909 --> 00:59:06,149
give me a random number

1713
00:59:06,149 --> 00:59:08,889
1-10 because we've
put ten here,

1714
00:59:08,889 --> 00:59:11,169
and the maximum number
it's expecting is ten.

1715
00:59:11,169 --> 00:59:13,530
So I was going to say
math dot random times

1716
00:59:13,530 --> 00:59:16,290
the maximum number we
put into that function.

1717
00:59:16,290 --> 00:59:17,849
In this case, it's
a random number

1718
00:59:17,849 --> 00:59:20,369
1-51 and 100.

1719
00:59:20,369 --> 00:59:22,149
Using this approach,
you can create

1720
00:59:22,149 --> 00:59:24,349
a function that does
multiple things.

1721
00:59:24,349 --> 00:59:25,829
You pass in a bit
information and

1722
00:59:25,829 --> 00:59:27,789
it returns a piece
of information.

1723
00:59:27,789 --> 00:59:29,790
It's very, very useful.

1724
00:59:29,790 --> 00:59:31,825
We could create
a function,

1725
00:59:31,825 --> 00:59:33,959
that creates
an element and

1726
00:59:33,959 --> 00:59:36,039
then returns that
element to us,

1727
00:59:36,039 --> 00:59:37,239
and we could then do

1728
00:59:37,239 --> 00:59:38,299
more things with
that element,

1729
00:59:38,299 --> 00:59:39,940
whether it's adding
click events,

1730
00:59:39,940 --> 00:59:42,260
adding specific
CSS styles.

1731
00:59:42,260 --> 00:59:44,879
The idea is, we can
optimize our code quite

1732
00:59:44,879 --> 00:59:46,379
significantly by

1733
00:59:46,379 --> 00:59:48,279
using both of
these approaches.

1734
00:59:48,279 --> 00:59:50,639
So it's passing arguments
into functions and

1735
00:59:50,639 --> 00:59:53,799
returning values from
said functions as well.

1736
00:59:53,799 --> 00:59:55,359
So again, we were
going to kind of

1737
00:59:55,359 --> 00:59:57,179
optimize our code
even more from this.

1738
00:59:57,179 --> 00:59:58,640
Instead of saying function

1739
00:59:58,640 --> 01:00:00,199
edition number one
plus number two,

1740
01:00:00,199 --> 01:00:01,739
what if we
actually retrieved

1741
01:00:01,739 --> 01:00:03,939
what this total
value was as well?

1742
01:00:03,939 --> 01:00:06,840
So we could say
return total.

1743
01:00:06,840 --> 01:00:11,619
So now I could
say console log,

1744
01:00:13,220 --> 01:00:20,879
The total of addition is,

1745
01:00:20,879 --> 01:00:22,899
I'm not done ten
plates string.

1746
01:00:22,899 --> 01:00:24,520
That's very annoying.

1747
01:00:24,520 --> 01:00:27,440
There we go. The total

1748
01:00:27,440 --> 01:00:33,340
of addition is addition,

1749
01:00:33,340 --> 01:00:38,219
let's maybe go for like
a ten by 100 by this.

1750
01:00:38,219 --> 01:00:43,460
So it so tell me
110 on this. Like

1751
01:00:43,460 --> 01:00:45,699
So we're combining a
few different things

1752
01:00:45,699 --> 01:00:47,379
together there,
which is quite nice.

1753
01:00:47,379 --> 01:00:49,020
We're basically
saying return

1754
01:00:49,020 --> 01:00:51,499
the value of number
one plus number two,

1755
01:00:51,499 --> 01:00:53,059
and we're going
to print that

1756
01:00:53,059 --> 01:00:54,520
out into console log,

1757
01:00:54,520 --> 01:00:55,819
because again, it's
returning what

1758
01:00:55,819 --> 01:00:57,779
that value was,
which is nice.

1759
01:00:57,779 --> 01:00:59,600
Putting this in terms
of the assignment,

1760
01:00:59,600 --> 01:01:01,179
we could create
a function that

1761
01:01:01,179 --> 01:01:03,460
adds things onto our page.

1762
01:01:03,460 --> 01:01:08,060
So if we could say
function, create elements.

1763
01:01:08,060 --> 01:01:09,680
Maybe not create elements,

1764
01:01:09,680 --> 01:01:14,100
create elements.
Create tag, maybe.

1765
01:01:15,100 --> 01:01:18,539
So first things first,
we're going to say

1766
01:01:18,860 --> 01:01:21,220
constant element

1767
01:01:21,220 --> 01:01:24,480
equals document,
create element.

1768
01:01:24,480 --> 01:01:26,259
And now we need to know

1769
01:01:26,259 --> 01:01:27,399
what tag we need to make.

1770
01:01:27,399 --> 01:01:29,099
So the first bit of data
we're going to pass

1771
01:01:29,099 --> 01:01:30,119
into this function is

1772
01:01:30,119 --> 01:01:31,659
the tag we're
going to make.

1773
01:01:31,659 --> 01:01:34,499
So we're going to
say tag just here.

1774
01:01:36,140 --> 01:01:38,199
We then need to
know where to

1775
01:01:38,199 --> 01:01:39,859
add this element
onto the page.

1776
01:01:39,859 --> 01:01:41,179
So for the purposes
of this, we're

1777
01:01:41,179 --> 01:01:42,419
just going to add
it onto the body.

1778
01:01:42,419 --> 01:01:44,720
So we could say document

1779
01:01:44,720 --> 01:01:51,679
body element like so.

1780
01:01:51,679 --> 01:01:55,620
What we could then do
is return this element.

1781
01:01:57,380 --> 01:02:00,559
Like this. And what

1782
01:02:00,559 --> 01:02:02,059
this would allow
me to do is

1783
01:02:02,059 --> 01:02:04,859
create multiple
elements in

1784
01:02:04,859 --> 01:02:05,639
the fraction of the time

1785
01:02:05,639 --> 01:02:06,559
it would normally take me,

1786
01:02:06,559 --> 01:02:15,180
so I could say
constant equals

1787
01:02:15,180 --> 01:02:19,099
create tag div.

1788
01:02:19,470 --> 01:02:23,430
And this should add
a div onto my page.

1789
01:02:23,430 --> 01:02:24,590
Although I fail
to actually

1790
01:02:24,590 --> 01:02:26,169
create on one cyst,

1791
01:02:26,169 --> 01:02:28,170
but only zero present.

1792
01:02:28,170 --> 01:02:31,389
A because I haven't
put that there.

1793
01:02:31,389 --> 01:02:33,130
Apologies. I
thought I already

1794
01:02:33,130 --> 01:02:34,549
had. There we go.

1795
01:02:34,549 --> 01:02:35,809
So we should
now have a div

1796
01:02:35,809 --> 01:02:37,289
that's been added
onto our page.

1797
01:02:37,289 --> 01:02:38,689
And I could keep
calling this.

1798
01:02:38,689 --> 01:02:42,709
So I could say D div.

1799
01:02:42,709 --> 01:02:46,910
So I could have
one two divs,

1800
01:02:46,910 --> 01:02:48,950
three divs, and four divs.

1801
01:02:48,950 --> 01:02:50,789
More importantly,
I could then

1802
01:02:50,789 --> 01:02:52,229
style these divs
in a certain way.

1803
01:02:52,229 --> 01:02:56,070
I could say div style
dark background color.

1804
01:02:59,710 --> 01:03:03,130
Equals red, for instance,

1805
01:03:03,130 --> 01:03:04,809
should probably also give

1806
01:03:04,809 --> 01:03:06,029
it like a width
and height.

1807
01:03:06,029 --> 01:03:07,569
Now I'm thinking
about it, but

1808
01:03:07,569 --> 01:03:08,989
we could probably
do this in here.

1809
01:03:08,989 --> 01:03:10,509
So we say element, do

1810
01:03:10,509 --> 01:03:15,670
style width equals
maybe 200 pixels.

1811
01:03:17,430 --> 01:03:21,549
And we'll say the
height as well.

1812
01:03:23,270 --> 01:03:27,629
So in this case, d d and

1813
01:03:27,629 --> 01:03:32,869
we can say two
three and four.

1814
01:03:32,869 --> 01:03:36,790
So we could say red, blue,

1815
01:03:39,030 --> 01:03:43,289
yellow and green.
Because, why not?

1816
01:03:43,289 --> 01:03:45,890
They should now
give me my multi

1817
01:03:45,890 --> 01:03:47,689
colored divs like so.

1818
01:03:47,689 --> 01:03:49,410
But we're only
ever creating

1819
01:03:49,410 --> 01:03:50,830
that div using
this function.

1820
01:03:50,830 --> 01:03:51,970
We're just calling
the function.

1821
01:03:51,970 --> 01:03:54,170
We're getting a reference
to that function,

1822
01:03:54,170 --> 01:03:57,669
and we're then styling
that background color.

1823
01:03:57,669 --> 01:03:59,489
If we wanted to combine
this even more,

1824
01:03:59,489 --> 01:04:00,729
we cove a function that

1825
01:04:00,729 --> 01:04:03,029
automatically changes
that color for us.

1826
01:04:03,029 --> 01:04:05,110
So we could say function,

1827
01:04:05,400 --> 01:04:08,959
random color. And we

1828
01:04:08,959 --> 01:04:10,219
could pass in the div

1829
01:04:10,219 --> 01:04:12,840
onto this, so we
could say element.

1830
01:04:12,920 --> 01:04:15,000
So we could then generate

1831
01:04:15,000 --> 01:04:16,219
three random
colors from this,

1832
01:04:16,219 --> 01:04:18,920
so we could say
constant red equals

1833
01:04:18,920 --> 01:04:24,159
math dot seal math

1834
01:04:24,159 --> 01:04:30,459
random times 255.

1835
01:04:30,459 --> 01:04:33,759
Let's do that for
red, green, and blue.

1836
01:04:36,880 --> 01:04:39,960
This will look
cool, I promise.

1837
01:04:39,960 --> 01:04:41,779
We could then just say

1838
01:04:41,779 --> 01:04:44,519
elements do

1839
01:04:44,519 --> 01:04:47,840
style dot background
color equals.

1840
01:04:47,840 --> 01:04:49,779
Then using our string
template that we've

1841
01:04:49,779 --> 01:04:56,639
just learned RGB. Red

1842
01:04:59,350 --> 01:05:05,889
green, and blue like so.

1843
01:05:05,889 --> 01:05:07,309
The idea is now

1844
01:05:07,309 --> 01:05:08,769
instead of having
each of these,

1845
01:05:08,769 --> 01:05:10,670
I could just simply

1846
01:05:10,670 --> 01:05:14,909
say scroll up
a little bit.

1847
01:05:15,270 --> 01:05:18,390
Random color,

1848
01:05:18,510 --> 01:05:27,469
D one and two,

1849
01:05:28,030 --> 01:05:32,570
and so generate these this

1850
01:05:32,570 --> 01:05:34,810
with completely
random colors

1851
01:05:34,810 --> 01:05:36,409
each time as well.

1852
01:05:36,409 --> 01:05:37,469
So again,

1853
01:05:37,469 --> 01:05:39,029
we've optimized this
code quite a bit,

1854
01:05:39,029 --> 01:05:39,890
because can you imagine

1855
01:05:39,890 --> 01:05:40,889
how much code
would have to

1856
01:05:40,889 --> 01:05:42,949
create to change each
of these each time.

1857
01:05:42,949 --> 01:05:44,789
Instead, we're
creating the div

1858
01:05:44,789 --> 01:05:46,670
using this create
tag function.

1859
01:05:46,670 --> 01:05:48,029
We're then
generating those

1860
01:05:48,029 --> 01:05:49,509
random colors
by passing in

1861
01:05:49,509 --> 01:05:50,890
that exist that newly

1862
01:05:50,890 --> 01:05:53,110
created div into
this function,

1863
01:05:53,110 --> 01:05:55,049
and it's then
using that div to

1864
01:05:55,049 --> 01:05:57,570
do something
with that data?

1865
01:05:57,570 --> 01:06:01,189
It's pretty cool. I
think it's pretty cool.

1866
01:06:01,189 --> 01:06:02,529
Again, if we wanted to

1867
01:06:02,529 --> 01:06:04,109
optimize this even more,

1868
01:06:04,109 --> 01:06:06,469
what we could do is

1869
01:06:06,469 --> 01:06:07,849
get rid of these
declarations

1870
01:06:07,849 --> 01:06:09,829
entirely and just have.

1871
01:06:10,980 --> 01:06:13,179
Well, actually,
we could just

1872
01:06:13,179 --> 01:06:15,379
copy that a few times.

1873
01:06:15,420 --> 01:06:18,599
You could say one, two,

1874
01:06:18,599 --> 01:06:22,299
three, four, like so.

1875
01:06:22,299 --> 01:06:23,819
And this would
also give us

1876
01:06:23,819 --> 01:06:25,300
the exact same results.

1877
01:06:25,300 --> 01:06:26,959
Because again, in theory,

1878
01:06:26,959 --> 01:06:28,159
don't really need
a reference to

1879
01:06:28,159 --> 01:06:30,299
that, which is quite nice.

1880
01:06:30,430 --> 01:06:32,369
So that's how we could use

1881
01:06:32,369 --> 01:06:33,490
a combination of passing

1882
01:06:33,490 --> 01:06:34,590
things into functions

1883
01:06:34,590 --> 01:06:35,710
so we could use arguments,

1884
01:06:35,710 --> 01:06:37,210
and we could then return

1885
01:06:37,210 --> 01:06:40,249
things from
elements as well.

1886
01:06:40,249 --> 01:06:42,369
Specifically,
where I would

1887
01:06:42,369 --> 01:06:44,769
find this quite useful is,

1888
01:06:44,769 --> 01:06:46,269
if you think about our

1889
01:06:46,269 --> 01:06:47,469
collision
detection that we

1890
01:06:47,469 --> 01:06:50,049
did in either week
ten or Week nine,

1891
01:06:50,049 --> 01:06:51,689
I'm going to say
it's week ten.

1892
01:06:51,689 --> 01:06:53,530
We had those statements,

1893
01:06:53,530 --> 01:06:55,089
and we had those two
variables that were

1894
01:06:55,089 --> 01:06:57,790
created inside of each
of those statements.

1895
01:06:57,790 --> 01:06:59,629
Wouldn't it be
cool if we had

1896
01:06:59,629 --> 01:07:01,909
one collision
function that we

1897
01:07:01,909 --> 01:07:05,234
could pass our left and
top properties into.

1898
01:07:05,234 --> 01:07:07,280
We could then return

1899
01:07:07,280 --> 01:07:08,900
a true or false variable

1900
01:07:08,900 --> 01:07:11,179
back if a collision
has taken place.

1901
01:07:11,179 --> 01:07:12,579
We could then just simply

1902
01:07:12,579 --> 01:07:13,939
change our If
statements to say,

1903
01:07:13,939 --> 01:07:16,479
if this collision
check is true,

1904
01:07:16,479 --> 01:07:18,159
we've collided
with a wall.

1905
01:07:18,159 --> 01:07:19,919
If the collision
check is false,

1906
01:07:19,919 --> 01:07:21,279
we haven't collided
with a wall,

1907
01:07:21,279 --> 01:07:22,860
and we can
continue moving.

1908
01:07:22,860 --> 01:07:24,220
So we could optimize

1909
01:07:24,220 --> 01:07:26,459
our code quite
significantly by

1910
01:07:26,459 --> 01:07:27,859
combining a lot of

1911
01:07:27,859 --> 01:07:30,419
our logic as it
exists currently into

1912
01:07:30,419 --> 01:07:33,339
one singular
function passing in

1913
01:07:33,339 --> 01:07:35,239
unique variables and then

1914
01:07:35,239 --> 01:07:37,794
returning a true or
false value back.

1915
01:07:37,794 --> 01:07:40,329
So if it were
me, I'd look at

1916
01:07:40,329 --> 01:07:42,909
ways of using this kind
of new technology,

1917
01:07:42,909 --> 01:07:45,189
these new concepts and

1918
01:07:45,189 --> 01:07:47,850
adding it to our collisions
tection function.

1919
01:07:47,850 --> 01:07:49,369
Because again, why not?

1920
01:07:49,369 --> 01:07:51,369
It could be quite fun.

1921
01:07:51,369 --> 01:07:54,069
Hopefully that makes
sense because you're now

1922
01:07:54,069 --> 01:07:56,809
going to have a go
at exercise too.

1923
01:07:56,809 --> 01:07:59,589
So I'd like you to
download Exercise two.

1924
01:07:59,589 --> 01:08:01,349
It contains the HTML and

1925
01:08:01,349 --> 01:08:03,849
CSS for a to do list.

1926
01:08:03,849 --> 01:08:05,869
I'd like you to add

1927
01:08:05,869 --> 01:08:09,170
a click event to the
add Task button,

1928
01:08:09,170 --> 01:08:11,210
then create a
function that returns

1929
01:08:11,210 --> 01:08:12,449
the value the user has

1930
01:08:12,449 --> 01:08:14,029
entered in the text box.

1931
01:08:14,029 --> 01:08:15,810
Try creating
another function

1932
01:08:15,810 --> 01:08:17,909
that accepts the
string as an argument.

1933
01:08:17,909 --> 01:08:19,989
Inside that function,
add the code from

1934
01:08:19,989 --> 01:08:22,809
last week to add a new
list item to the list.

1935
01:08:22,809 --> 01:08:24,409
Try and get the
delete button

1936
01:08:24,409 --> 01:08:25,469
in there as well.

1937
01:08:25,469 --> 01:08:26,609
Then you're going to add

1938
01:08:26,609 --> 01:08:28,529
the functionality for
the delete buttons.

1939
01:08:28,529 --> 01:08:29,849
They should delete

1940
01:08:29,849 --> 01:08:32,189
the correct
corresponding task.

1941
01:08:32,189 --> 01:08:35,054
So if you look
into Exercise two,

1942
01:08:35,054 --> 01:08:37,519
2 seconds, would be

1943
01:08:37,519 --> 01:08:38,579
helpful if I actually

1944
01:08:38,579 --> 01:08:40,759
had the right folder open.

1945
01:08:41,440 --> 01:08:49,179
There we go.
Yeah. You've got

1946
01:08:49,179 --> 01:08:50,860
this fun to do
list application.

1947
01:08:50,860 --> 01:08:52,619
Your job is to
get this working.

1948
01:08:52,619 --> 01:08:54,279
The idea is I can
enter a task here,

1949
01:08:54,279 --> 01:08:55,919
so I could say,

1950
01:08:56,760 --> 01:08:59,919
make new lecture.

1951
01:08:59,919 --> 01:09:01,479
I could click Add
task and that

1952
01:09:01,479 --> 01:09:03,619
then gets added
into this list.

1953
01:09:03,619 --> 01:09:05,199
I could then delete tasks

1954
01:09:05,199 --> 01:09:06,659
once I've signed them off.

1955
01:09:06,659 --> 01:09:08,139
I I click refresh.

1956
01:09:08,139 --> 01:09:09,559
All those tasks come back,

1957
01:09:09,559 --> 01:09:12,399
unfortunately. But
we'll work on that.

1958
01:09:12,399 --> 01:09:14,699
So your job is to have

1959
01:09:14,699 --> 01:09:17,999
a go at creating this
to do list, Okay?

1960
01:09:17,999 --> 01:09:20,759
Really try and utilize
functions, arguments,

1961
01:09:20,759 --> 01:09:22,840
and even try and do some
string manipulation

1962
01:09:22,840 --> 01:09:24,279
that we've just
learned as well.

1963
01:09:24,279 --> 01:09:25,599
To see if there's
any useful

1964
01:09:25,599 --> 01:09:27,399
string arguments
you can use.

1965
01:09:27,399 --> 01:09:30,099
Sorry. A useful string
methods you can use.

1966
01:09:30,099 --> 01:09:31,939
But really focus on using

1967
01:09:31,939 --> 01:09:34,209
functions on
this one. Okay.

1968
01:09:34,209 --> 01:09:36,779
Because you can
feasibly do

1969
01:09:36,779 --> 01:09:37,819
this piece of work in

1970
01:09:37,819 --> 01:09:39,739
hundreds and
hundreds of lines.

1971
01:09:39,739 --> 01:09:42,579
Using functions,
arguments, and returns.

1972
01:09:42,579 --> 01:09:44,539
You're looking at
about maybe 20,

1973
01:09:44,539 --> 01:09:46,099
possibly even under that.

1974
01:09:46,099 --> 01:09:47,919
So again, really
to try and utilize

1975
01:09:47,919 --> 01:09:49,179
those techniques
and make this

1976
01:09:49,179 --> 01:09:51,079
as optimal as possible.

1977
01:09:51,079 --> 01:09:53,039
Okay. So, pause the video.

1978
01:09:53,039 --> 01:09:54,299
Have a go with that,
and then we'll

1979
01:09:54,299 --> 01:09:55,839
continue with the
rest of the lecture.

1980
01:09:55,839 --> 01:09:57,139
After this
point, it's just

1981
01:09:57,139 --> 01:09:59,139
arrow functions
and arrays,

1982
01:09:59,139 --> 01:10:02,019
but there is a lot on
arrays, do not worry.

1983
01:10:02,019 --> 01:10:05,114
Okay. So, good luck
with exercise too.

1984
01:10:05,114 --> 01:10:06,969
Okay, hopefully,
you've had to go at

1985
01:10:06,969 --> 01:10:08,790
doing the to do
this application.

1986
01:10:08,790 --> 01:10:10,309
You will need
the solution to

1987
01:10:10,309 --> 01:10:12,249
that to do the next
exercise because

1988
01:10:12,249 --> 01:10:12,989
we're going to kind of be

1989
01:10:12,989 --> 01:10:14,209
adding things to that to

1990
01:10:14,209 --> 01:10:16,689
make the application
considerably better.

1991
01:10:16,689 --> 01:10:19,029
But just before we
move on to that,

1992
01:10:19,029 --> 01:10:19,969
we're going to go over a

1993
01:10:19,969 --> 01:10:21,289
little bit more
on functions,

1994
01:10:21,289 --> 01:10:23,049
specifically, a
slightly more

1995
01:10:23,049 --> 01:10:24,969
optimal way of
writing them.

1996
01:10:24,969 --> 01:10:26,829
So another function
we can use,

1997
01:10:26,829 --> 01:10:28,709
very similar to the
closures we looked at

1998
01:10:28,709 --> 01:10:31,609
last week is called
an arrow function.

1999
01:10:31,609 --> 01:10:33,969
Now these are a much
more concise way

2000
01:10:33,969 --> 01:10:35,729
to write functions
in Java script.

2001
01:10:35,729 --> 01:10:36,309
But when it's

2002
01:10:36,309 --> 01:10:37,730
your first time
learning Javascript,

2003
01:10:37,730 --> 01:10:39,369
they can look
really confusing.

2004
01:10:39,369 --> 01:10:41,029
That's why we've
only just introduced

2005
01:10:41,029 --> 01:10:43,009
them at this week
in particular.

2006
01:10:43,009 --> 01:10:44,469
But typically,
if you look at

2007
01:10:44,469 --> 01:10:45,789
some documentation online,

2008
01:10:45,789 --> 01:10:46,629
it's usually going to

2009
01:10:46,629 --> 01:10:47,789
be using arrow function,

2010
01:10:47,789 --> 01:10:48,629
so it's good to kind of

2011
01:10:48,629 --> 01:10:50,489
go over it at this stage.

2012
01:10:50,489 --> 01:10:52,789
Now, arrow functions use

2013
01:10:52,789 --> 01:10:54,089
an equal sign and

2014
01:10:54,089 --> 01:10:56,229
then the greater
than symbol.

2015
01:10:56,229 --> 01:10:58,154
I do that less than.

2016
01:10:58,154 --> 01:10:59,899
Might be less
than, actually.

2017
01:10:59,899 --> 01:11:02,339
The equal It looks like
an arrow basically.

2018
01:11:02,339 --> 01:11:04,639
And it actually
automatically returns

2019
01:11:04,639 --> 01:11:07,359
a value without needing
the return keyword.

2020
01:11:07,359 --> 01:11:08,559
So in this
instance, when I

2021
01:11:08,559 --> 01:11:10,399
say constant multiply,

2022
01:11:10,399 --> 01:11:12,059
multiply is the name of

2023
01:11:12,059 --> 01:11:13,999
the function we're
about to make.

2024
01:11:13,999 --> 01:11:16,379
So it's the
multiply function.

2025
01:11:16,379 --> 01:11:18,179
And then saying equals,

2026
01:11:18,179 --> 01:11:20,559
then brackets a B.

2027
01:11:20,559 --> 01:11:21,959
These are my arguments.

2028
01:11:21,959 --> 01:11:23,339
So I'm saying pass in

2029
01:11:23,339 --> 01:11:25,059
number one and pass
in number two,

2030
01:11:25,059 --> 01:11:26,079
but I'm calling them A and

2031
01:11:26,079 --> 01:11:27,679
B for simplicity on this.

2032
01:11:27,679 --> 01:11:29,319
Using this arrow function,

2033
01:11:29,319 --> 01:11:32,944
I'm then saying
return A times B.

2034
01:11:32,944 --> 01:11:35,169
So if I said
console dot log,

2035
01:11:35,169 --> 01:11:37,729
multiply ten two.

2036
01:11:37,729 --> 01:11:41,129
That's basically saying
times ten b two,

2037
01:11:41,129 --> 01:11:43,349
return ten b two,

2038
01:11:43,349 --> 01:11:45,729
ten times two,
which should be 20.

2039
01:11:45,729 --> 01:11:48,109
It's effectively the
exact same thing

2040
01:11:48,109 --> 01:11:49,689
as this piece
of code here.

2041
01:11:49,689 --> 01:11:50,829
So instead of saying

2042
01:11:50,829 --> 01:11:52,109
function multiply and then

2043
01:11:52,109 --> 01:11:55,489
cons total equals a
times B return total

2044
01:11:55,489 --> 01:11:57,569
All we're doing is kind

2045
01:11:57,569 --> 01:11:59,709
of removing some
of those keywords.

2046
01:11:59,709 --> 01:12:01,269
It's significantly less

2047
01:12:01,269 --> 01:12:03,729
code using this approach.

2048
01:12:03,729 --> 01:12:05,929
So, again, the
real big key is

2049
01:12:05,929 --> 01:12:06,909
you're essentially
just kind

2050
01:12:06,909 --> 01:12:08,029
of missing out
a few words.

2051
01:12:08,029 --> 01:12:09,629
So you're not having
the function keyword.

2052
01:12:09,629 --> 01:12:11,249
You're not using
curly brackets,

2053
01:12:11,249 --> 01:12:12,729
and you're not
using the return.

2054
01:12:12,729 --> 01:12:15,409
Instead, the return is
this arrow function,

2055
01:12:15,409 --> 01:12:17,189
and you're very
simply just kind of

2056
01:12:17,189 --> 01:12:17,969
saying what's going to

2057
01:12:17,969 --> 01:12:19,129
get returned in this case.

2058
01:12:19,129 --> 01:12:20,489
So in my case, I'm saying

2059
01:12:20,489 --> 01:12:22,229
return a constant
variable.

2060
01:12:22,229 --> 01:12:24,149
So constant is total.

2061
01:12:24,149 --> 01:12:26,969
Hence why total equals
multiply ten times

2062
01:12:26,969 --> 01:12:30,009
two in this instance,
is exactly the same.

2063
01:12:30,009 --> 01:12:32,049
So again, there's no
function keyword,

2064
01:12:32,049 --> 01:12:35,710
and there are no
curly brackets.

2065
01:12:35,710 --> 01:12:38,149
Cool thing is, our
functions can be used

2066
01:12:38,149 --> 01:12:40,489
anywhere you would
usually call a function.

2067
01:12:40,489 --> 01:12:41,849
So in our case,
we could add it

2068
01:12:41,849 --> 01:12:43,629
to the click event
for a start button.

2069
01:12:43,629 --> 01:12:46,319
So if you use this
piece of code Peter,

2070
01:12:46,319 --> 01:12:49,009
Our start button once

2071
01:12:49,009 --> 01:12:51,349
it gets clicked,
turns red.

2072
01:12:51,349 --> 01:12:53,789
So it doesn't always
need a return of value.

2073
01:12:53,789 --> 01:12:55,189
So in this case, we're

2074
01:12:55,189 --> 01:12:56,749
just using it as a
normal function,

2075
01:12:56,749 --> 01:12:58,789
instead of linking
it to a function.

2076
01:12:58,789 --> 01:13:01,489
We just have two empty
brackets just here.

2077
01:13:01,489 --> 01:13:03,349
Then the arrow symbol,

2078
01:13:03,349 --> 01:13:04,869
start button dot style dot

2079
01:13:04,869 --> 01:13:06,269
background color
equals red.

2080
01:13:06,269 --> 01:13:07,969
So if I click on
my start button,

2081
01:13:07,969 --> 01:13:09,789
the start button
will turn red.

2082
01:13:09,789 --> 01:13:11,709
I could use it
for my key up

2083
01:13:11,709 --> 01:13:13,109
and key down
functions as well.

2084
01:13:13,109 --> 01:13:14,549
By pass in the
event variable.

2085
01:13:14,549 --> 01:13:15,709
I can still say event dot

2086
01:13:15,709 --> 01:13:16,929
key on both of these,

2087
01:13:16,929 --> 01:13:19,949
and they work exactly
the same way.

2088
01:13:19,949 --> 01:13:21,909
But that's essentially
arrow functions.

2089
01:13:21,909 --> 01:13:24,549
They are pretty cool.

2090
01:13:24,549 --> 01:13:27,529
So what we could do is we

2091
01:13:27,529 --> 01:13:31,009
could look at doing
an arrow function

2092
01:13:32,210 --> 01:13:35,509
We could possibly try
optimizing it here.

2093
01:13:35,509 --> 01:13:36,869
What we could end
up doing is we

2094
01:13:36,869 --> 01:13:41,169
could say create tag.

2095
01:13:41,770 --> 01:13:47,209
Then we have, go to
close that very quickly.

2096
01:13:47,209 --> 01:13:49,589
Equals two brackets.

2097
01:13:49,589 --> 01:13:50,309
So in our case,

2098
01:13:50,309 --> 01:13:51,829
we're going to
pass in the tag,

2099
01:13:51,829 --> 01:13:53,529
and we have the
arrow function here.

2100
01:13:53,529 --> 01:13:54,229
Now, in this case,

2101
01:13:54,229 --> 01:13:55,549
we are going to use
two brackets because

2102
01:13:55,549 --> 01:13:56,489
we're kind of doing

2103
01:13:56,489 --> 01:13:58,249
multiple things onto this.

2104
01:13:58,249 --> 01:14:00,029
Because we're using
the color brackets

2105
01:14:00,029 --> 01:14:01,329
in this, we do still
need the return,

2106
01:14:01,329 --> 01:14:02,749
but we are still
optimizing it in

2107
01:14:02,749 --> 01:14:03,729
a way because we're not

2108
01:14:03,729 --> 01:14:05,289
using the
function keyword.

2109
01:14:05,289 --> 01:14:08,929
So if we were to copy
this content just here.

2110
01:14:09,000 --> 01:14:11,919
We have used an
arrow function here

2111
01:14:11,919 --> 01:14:15,359
instead of everything
we just did.

2112
01:14:15,359 --> 01:14:17,280
So if I click refresh.

2113
01:14:17,280 --> 01:14:20,699
Everything is now
working quite nicely.

2114
01:14:20,699 --> 01:14:22,619
So again, it's not
optimized it by much,

2115
01:14:22,619 --> 01:14:23,879
but we can use utilize

2116
01:14:23,879 --> 01:14:25,559
arrow functions
in that way,

2117
01:14:25,559 --> 01:14:27,039
which is kind of fun.

2118
01:14:27,039 --> 01:14:28,279
But essentially,

2119
01:14:28,279 --> 01:14:29,499
everything we did
with a closure

2120
01:14:29,499 --> 01:14:30,539
last week can also be

2121
01:14:30,539 --> 01:14:32,279
achieved using an
arrow function.

2122
01:14:32,279 --> 01:14:33,799
They are
incredibly useful.

2123
01:14:33,799 --> 01:14:35,419
If you've got a very
short function.

2124
01:14:35,419 --> 01:14:37,059
Okay. And you'd
like to do it

2125
01:14:37,059 --> 01:14:39,039
in quite a short
number of lines.

2126
01:14:39,039 --> 01:14:41,519
Again, usually just
one, it is quite nice.

2127
01:14:41,519 --> 01:14:43,699
So if we were going
to multiply something

2128
01:14:43,699 --> 01:14:44,979
or maybe we wanted

2129
01:14:44,979 --> 01:14:46,579
to compare one
thing to another,

2130
01:14:46,579 --> 01:14:48,539
Arra functions are
very useful in

2131
01:14:48,539 --> 01:14:51,679
that specific
instance. Okay.

2132
01:14:51,770 --> 01:14:53,429
Next key one.

2133
01:14:53,429 --> 01:14:55,029
So the next couple of
slides are going to

2134
01:14:55,029 --> 01:14:56,610
be very instrumental

2135
01:14:56,610 --> 01:14:58,310
to the leaderboard
functionality.

2136
01:14:58,310 --> 01:15:02,389
The first one is using
a prompt dialogue box.

2137
01:15:02,389 --> 01:15:05,389
So prompt is very
similar to an alert box.

2138
01:15:05,389 --> 01:15:07,009
The difference
is we actually

2139
01:15:07,009 --> 01:15:09,189
get an input back
from the user.

2140
01:15:09,189 --> 01:15:12,450
So if you say prompt
with two brackets,

2141
01:15:12,450 --> 01:15:13,769
it says this page says,

2142
01:15:13,769 --> 01:15:15,709
and then you've got an
empty dialogue box.

2143
01:15:15,709 --> 01:15:17,809
You can actually
pass in a string,

2144
01:15:17,809 --> 01:15:19,909
using a string
as an argument.

2145
01:15:19,909 --> 01:15:22,669
And it will just say
kind of the string

2146
01:15:22,669 --> 01:15:24,629
just above the
input itself.

2147
01:15:24,629 --> 01:15:26,689
So, in this case, we're
saying no your name,

2148
01:15:26,689 --> 01:15:28,849
and the dialogue box is
saying no your name.

2149
01:15:28,849 --> 01:15:30,249
Just making it
very clear that's

2150
01:15:30,249 --> 01:15:32,409
where the user
enters their name.

2151
01:15:32,409 --> 01:15:34,309
Where this gets a lot more

2152
01:15:34,309 --> 01:15:36,169
interesting is we
can save whatever

2153
01:15:36,169 --> 01:15:37,669
the user has typed in and

2154
01:15:37,669 --> 01:15:40,074
save it into a variable.

2155
01:15:40,074 --> 01:15:42,559
So in this instance,
I am saving

2156
01:15:42,559 --> 01:15:44,739
whatever the user is
put into this prompt.

2157
01:15:44,739 --> 01:15:45,939
So they're going to say to

2158
01:15:45,939 --> 01:15:47,319
your name, I'm
going to say Chris.

2159
01:15:47,319 --> 01:15:48,939
So I'm saving
whatever they've

2160
01:15:48,939 --> 01:15:51,979
typed in in a variable
called my name.

2161
01:15:51,979 --> 01:15:54,499
Inside this alert,
I am then very

2162
01:15:54,499 --> 01:15:56,039
simply saying exactly what

2163
01:15:56,039 --> 01:15:57,759
the user just typed
into that box.

2164
01:15:57,759 --> 01:15:59,579
So in my case, I'm
saying your name is

2165
01:15:59,579 --> 01:16:02,419
Chris because that's
what they just typed in.

2166
01:16:02,419 --> 01:16:05,380
This is very useful
in the leaderboard,

2167
01:16:05,380 --> 01:16:06,859
because you could create

2168
01:16:06,859 --> 01:16:08,499
a prompt asking
the user for

2169
01:16:08,499 --> 01:16:09,879
their username or for

2170
01:16:09,879 --> 01:16:11,439
their name that they would

2171
01:16:11,439 --> 01:16:13,380
like saved in
the leaderboard.

2172
01:16:13,380 --> 01:16:16,089
You could save that
into a variable.

2173
01:16:16,089 --> 01:16:17,779
And then save that

2174
01:16:17,779 --> 01:16:20,219
alongside their score,
if that makes sense.

2175
01:16:20,219 --> 01:16:21,659
But then going to look
at actually saving

2176
01:16:21,659 --> 01:16:23,459
that into the browser
very shortly.

2177
01:16:23,459 --> 01:16:25,099
But this is the
first step.

2178
01:16:25,099 --> 01:16:27,459
You save their name
using a prompt.

2179
01:16:27,459 --> 01:16:28,859
Another call box you

2180
01:16:28,859 --> 01:16:30,839
can use is called
a confirm.

2181
01:16:30,839 --> 01:16:33,619
Very similar to
prompt and alert,

2182
01:16:33,619 --> 01:16:35,719
except confirm brings back

2183
01:16:35,719 --> 01:16:37,619
a true or false value
depending on if

2184
01:16:37,619 --> 01:16:39,934
the users clicked
or cancel.

2185
01:16:39,934 --> 01:16:41,669
If the users clicked okay,

2186
01:16:41,669 --> 01:16:42,969
it will return true.

2187
01:16:42,969 --> 01:16:44,869
If the users
clicked cancel,

2188
01:16:44,869 --> 01:16:46,749
then it will return false.

2189
01:16:46,749 --> 01:16:48,269
So again, very useful
if you want to say,

2190
01:16:48,269 --> 01:16:50,169
would you like to
proceed? Yes or no?

2191
01:16:50,169 --> 01:16:52,529
Do you understand
navigating away from

2192
01:16:52,529 --> 01:16:55,149
this page will result
in unnecessary loss?

2193
01:16:55,149 --> 01:16:57,809
Okay. Again sometimes
you might get that when

2194
01:16:57,809 --> 01:16:59,509
you're maybe
creating an account

2195
01:16:59,509 --> 01:17:00,669
and you try
closing the tab.

2196
01:17:00,669 --> 01:17:01,869
It might say this data

2197
01:17:01,869 --> 01:17:03,049
will be lost or something.

2198
01:17:03,049 --> 01:17:04,469
It's very much
going to be in

2199
01:17:04,469 --> 01:17:06,489
a confirm box, which is
kind of interesting.

2200
01:17:06,489 --> 01:17:07,809
But the big
difference between

2201
01:17:07,809 --> 01:17:09,169
confirm and prompt is

2202
01:17:09,169 --> 01:17:10,669
confirm it doesn't
allow the users

2203
01:17:10,669 --> 01:17:12,029
to type data directly.

2204
01:17:12,029 --> 01:17:13,729
It's just a true
or a false.

2205
01:17:13,729 --> 01:17:15,349
Did they click,
or did they

2206
01:17:15,349 --> 01:17:18,429
click Cancel, if
that makes sense?

2207
01:17:18,790 --> 01:17:21,389
This is where it gets a

2208
01:17:21,389 --> 01:17:24,069
bit more interesting,
local storage.

2209
01:17:24,069 --> 01:17:25,989
So local storage is

2210
01:17:25,989 --> 01:17:28,050
how we're going to
create the leaderboard,

2211
01:17:28,050 --> 01:17:29,919
essentially for
the assignment.

2212
01:17:29,919 --> 01:17:31,629
Why not create
the leaderboards,

2213
01:17:31,629 --> 01:17:32,349
how we're going to add

2214
01:17:32,349 --> 01:17:34,109
functionality to
the leaderboard.

2215
01:17:34,109 --> 01:17:35,889
So local storage allows

2216
01:17:35,889 --> 01:17:38,229
you to save values
in the browser.

2217
01:17:38,229 --> 01:17:39,449
If you were to click

2218
01:17:39,449 --> 01:17:41,269
refresh or close
the browser,

2219
01:17:41,269 --> 01:17:43,689
those values will
still remain.

2220
01:17:43,689 --> 01:17:45,549
It's very, very cool.

2221
01:17:45,549 --> 01:17:47,269
So you could turn
your laptop off,

2222
01:17:47,269 --> 01:17:48,229
turn it back on,

2223
01:17:48,229 --> 01:17:50,289
and you can still
have those values

2224
01:17:50,289 --> 01:17:51,949
saved in local storage.

2225
01:17:51,949 --> 01:17:54,009
Now, to add values
to local storage,

2226
01:17:54,009 --> 01:17:56,089
you need to use the
set item function.

2227
01:17:56,089 --> 01:17:57,449
And for this to
work, you need

2228
01:17:57,449 --> 01:17:59,509
a key and the value.

2229
01:17:59,509 --> 01:18:01,209
The key is essentially

2230
01:18:01,209 --> 01:18:03,149
the name for that data.

2231
01:18:03,149 --> 01:18:05,099
So in this example here,

2232
01:18:05,099 --> 01:18:09,229
I'm saying local storage
set item my key.

2233
01:18:09,229 --> 01:18:10,629
So the name for this

2234
01:18:10,629 --> 01:18:12,369
data is going to be name,

2235
01:18:12,369 --> 01:18:13,889
and the actual value

2236
01:18:13,889 --> 01:18:15,929
to be saved is
going to be Chris.

2237
01:18:15,929 --> 01:18:17,549
If I would then like to

2238
01:18:17,549 --> 01:18:19,429
retrieve that data back,

2239
01:18:19,429 --> 01:18:22,209
I need to use the
get item function,

2240
01:18:22,209 --> 01:18:23,769
and I need to use the key

2241
01:18:23,769 --> 01:18:25,969
for the value I'd
like to retrieve.

2242
01:18:25,969 --> 01:18:26,809
So in my case,

2243
01:18:26,809 --> 01:18:28,929
if I'd like to
retrieve the name,

2244
01:18:28,929 --> 01:18:30,929
I'd create a brand
new variable

2245
01:18:30,929 --> 01:18:32,229
called in this
case, my name,

2246
01:18:32,229 --> 01:18:35,429
and I'd say local storage
do get item name.

2247
01:18:35,429 --> 01:18:38,109
That would then give
me the saved data

2248
01:18:38,109 --> 01:18:42,249
in local storage,
which is pretty cool.

2249
01:18:42,249 --> 01:18:45,189
So going through this
a little bit, then.

2250
01:18:46,470 --> 01:18:48,809
If I wanted to
save something

2251
01:18:48,809 --> 01:18:50,369
to local storage,
I would very,

2252
01:18:50,369 --> 01:18:54,509
very simply
just say, save.

2253
01:18:55,530 --> 01:18:57,909
So in my case, I could

2254
01:18:57,909 --> 01:18:59,629
say something
long lines of.

2255
01:18:59,629 --> 01:19:01,169
We might as well just
keep it to name.

2256
01:19:01,169 --> 01:19:07,189
I could say local
storage set item name.

2257
01:19:07,189 --> 01:19:09,489
And we're going
to save Chris

2258
01:19:09,489 --> 01:19:11,089
in this, just like so.

2259
01:19:11,089 --> 01:19:12,409
So that's going
to save this

2260
01:19:12,409 --> 01:19:14,049
into local storage.

2261
01:19:14,049 --> 01:19:16,429
So from the browser
perspective,

2262
01:19:16,429 --> 01:19:18,089
nothing's really
happened at this stage.

2263
01:19:18,089 --> 01:19:19,649
But if I wanted to, I

2264
01:19:19,649 --> 01:19:22,369
could retrieve that value.

2265
01:19:22,369 --> 01:19:24,209
So if I get rid
of this now,

2266
01:19:24,209 --> 01:19:26,169
a, I'll just comment
it out slightly.

2267
01:19:26,169 --> 01:19:30,409
I could say
Const. My name,

2268
01:19:31,200 --> 01:19:33,579
God my shift key
is definitely

2269
01:19:33,579 --> 01:19:34,839
not working today.
It's not good.

2270
01:19:34,839 --> 01:19:37,339
Equals local
storage dot get

2271
01:19:37,339 --> 01:19:42,199
item and get the name.

2272
01:19:42,840 --> 01:19:47,799
So then say
console dot log.

2273
01:19:48,430 --> 01:19:53,689
My name. And this
should give us Chris.

2274
01:19:53,689 --> 01:19:55,489
Like so. And I can keep

2275
01:19:55,489 --> 01:19:56,969
refreshing this and

2276
01:19:56,969 --> 01:19:58,209
it'll still give me Chris.

2277
01:19:58,209 --> 01:19:59,629
I could close this tab

2278
01:19:59,629 --> 01:20:02,589
entirely, open it again.

2279
01:20:02,870 --> 01:20:05,589
And it'll still
give me Chris.

2280
01:20:05,589 --> 01:20:07,149
So, Chris has been saved

2281
01:20:07,149 --> 01:20:10,689
onto my browser,
which is really cool.

2282
01:20:10,689 --> 01:20:12,389
And you can do this with

2283
01:20:12,389 --> 01:20:14,089
pretty much any
data you like.

2284
01:20:14,089 --> 01:20:15,909
So make worth noting is it

2285
01:20:15,909 --> 01:20:17,809
does get saved as
a string, though.

2286
01:20:17,809 --> 01:20:19,469
So you could save names.

2287
01:20:19,469 --> 01:20:21,549
You could save,
like a number.

2288
01:20:21,549 --> 01:20:22,769
You could save
true or false.

2289
01:20:22,769 --> 01:20:24,329
But when it gets saved,

2290
01:20:24,329 --> 01:20:26,169
it essentially
becomes a string.

2291
01:20:26,169 --> 01:20:27,489
So you might have
to convert it.

2292
01:20:27,489 --> 01:20:29,789
You'd like to use
it as a number.

2293
01:20:30,710 --> 01:20:34,909
Now, if you wanted
to, you could

2294
01:20:34,909 --> 01:20:39,509
try saving things as
an array, possibly.

2295
01:20:39,509 --> 01:20:41,409
So when you save something
to local storage,

2296
01:20:41,409 --> 01:20:43,149
it saves it as a string.

2297
01:20:43,149 --> 01:20:45,349
The problem is, if you
want to save an array,

2298
01:20:45,349 --> 01:20:46,889
for instance, a name

2299
01:20:46,889 --> 01:20:49,479
along with a high
score, for instance,

2300
01:20:49,479 --> 01:20:51,509
You essentially need to

2301
01:20:51,509 --> 01:20:54,009
save that as a string,

2302
01:20:54,009 --> 01:20:56,709
which again, can be
a little bit tricky.

2303
01:20:56,709 --> 01:20:58,649
So what you could
do is you could

2304
01:20:58,649 --> 01:21:01,270
concatenate a name
with an underscore.

2305
01:21:01,270 --> 01:21:02,369
So in my case,

2306
01:21:02,369 --> 01:21:03,649
we could say the
name is Chris.

2307
01:21:03,649 --> 01:21:06,449
Underscore. The score
Chris got was 100.

2308
01:21:06,449 --> 01:21:09,109
We then move on
to Mark plus 50,

2309
01:21:09,109 --> 01:21:11,369
and then Tom plus
55, for instance.

2310
01:21:11,369 --> 01:21:12,609
So again, the
idea is, we've

2311
01:21:12,609 --> 01:21:14,389
got the name of the user,

2312
01:21:14,389 --> 01:21:17,289
underscore the high
score of the user.

2313
01:21:17,289 --> 01:21:20,569
We could then save this
into local storage.

2314
01:21:20,569 --> 01:21:23,029
If I'd like to
retrieve this,

2315
01:21:23,029 --> 01:21:25,129
what I could utilize

2316
01:21:25,129 --> 01:21:28,309
is local storage dot
get item scores.

2317
01:21:28,309 --> 01:21:31,789
So bring back that big
string of schools,

2318
01:21:31,789 --> 01:21:34,489
and I could then
split those schools.

2319
01:21:34,489 --> 01:21:37,829
So using the splitt
method by the comm.

2320
01:21:37,829 --> 01:21:38,889
I could then for

2321
01:21:38,889 --> 01:21:40,369
loop through all
those schools.

2322
01:21:40,369 --> 01:21:41,989
So that could be
a way of kind of

2323
01:21:41,989 --> 01:21:44,689
keeping those schools
in local storage.

2324
01:21:44,689 --> 01:21:46,774
That's how I
achieved it anyway.

2325
01:21:46,774 --> 01:21:48,579
So the idea is, you save

2326
01:21:48,579 --> 01:21:51,179
the scores in some
kind of array.

2327
01:21:51,179 --> 01:21:54,199
You then save that
array in local storage.

2328
01:21:54,199 --> 01:21:56,439
When you then retrieve
those scores,

2329
01:21:56,439 --> 01:21:57,479
you then need to turn

2330
01:21:57,479 --> 01:21:59,459
that string back
into an array.

2331
01:21:59,459 --> 01:22:01,379
And the best way to
split that is with

2332
01:22:01,379 --> 01:22:07,419
the comm using the split
function just here.

2333
01:22:07,750 --> 01:22:10,629
So let's do a little
bit of that now.

2334
01:22:10,629 --> 01:22:13,429
So let's say the
scores for my game.

2335
01:22:13,429 --> 01:22:17,589
So we could say
let's scores equals.

2336
01:22:17,589 --> 01:22:20,209
So Chris got 100,

2337
01:22:20,209 --> 01:22:26,309
which was good.
Mark got 20.

2338
01:22:26,870 --> 01:22:32,849
Tom got 50 and John.

2339
01:22:32,849 --> 01:22:35,749
Unfortunately,
only got one.

2340
01:22:35,749 --> 01:22:38,069
That's what you get, John.

2341
01:22:38,069 --> 01:22:39,409
So these are our scores.

2342
01:22:39,409 --> 01:22:41,169
We could then save this
into local storage,

2343
01:22:41,169 --> 01:22:44,849
so we could say local
storage set item,

2344
01:22:44,849 --> 01:22:47,949
and we could just say
these are the scores.

2345
01:22:48,470 --> 01:22:51,329
Save this into our
local storage.

2346
01:22:51,329 --> 01:22:54,569
Okay. So again, nothing's
happened just yet,

2347
01:22:54,569 --> 01:22:56,909
but that's been saved
into local storage.

2348
01:22:56,909 --> 01:22:59,829
If I were to comment
this out now.

2349
01:22:59,829 --> 01:23:01,669
So that's been saved into

2350
01:23:01,669 --> 01:23:03,609
local storage like so.

2351
01:23:03,609 --> 01:23:06,290
I could then essentially

2352
01:23:06,290 --> 01:23:08,569
separate those scores.

2353
01:23:08,569 --> 01:23:12,569
So I could say scores

2354
01:23:12,569 --> 01:23:18,029
equals local
storage get item,

2355
01:23:18,030 --> 01:23:20,389
I could use the
key, which in

2356
01:23:20,389 --> 01:23:22,669
our case was scores.

2357
01:23:22,669 --> 01:23:25,049
The problem is,
if I try to print

2358
01:23:25,049 --> 01:23:27,869
this out, look
what happens.

2359
01:23:31,400 --> 01:23:34,059
It's all one big string.

2360
01:23:34,059 --> 01:23:36,619
So this is all one
big piece of text.

2361
01:23:36,619 --> 01:23:38,439
I want to
separate this and

2362
01:23:38,439 --> 01:23:40,799
actually have this be
a bit more useful.

2363
01:23:40,799 --> 01:23:42,579
Now, the way we
need to do this is

2364
01:23:42,579 --> 01:23:45,219
by separating this
into an array.

2365
01:23:45,219 --> 01:23:47,359
So what I could say is,

2366
01:23:47,359 --> 01:23:50,959
let's score array,
for instance.

2367
01:23:50,959 --> 01:23:52,439
Again, I'm very
creative with names.

2368
01:23:52,439 --> 01:23:54,559
I could then say scores

2369
01:23:54,720 --> 01:23:59,359
split and separate
it by the comm.

2370
01:23:59,920 --> 01:24:02,879
What is really
cool now is if I

2371
01:24:02,879 --> 01:24:03,999
were to call each

2372
01:24:03,999 --> 01:24:05,379
index position
of this array.

2373
01:24:05,379 --> 01:24:07,619
So if I said score zero,

2374
01:24:07,619 --> 01:24:10,559
it should give
me just Cris.

2375
01:24:10,559 --> 01:24:15,839
Like this. If I
said score one,

2376
01:24:17,520 --> 01:24:20,179
it should give
me mark like

2377
01:24:20,179 --> 01:24:22,239
that, which is
really cool.

2378
01:24:22,239 --> 01:24:24,159
If I wanted to
print them all out.

2379
01:24:24,159 --> 01:24:25,899
I could just use
a four loop,

2380
01:24:25,899 --> 01:24:32,239
so I could say four
S of score array.

2381
01:24:32,850 --> 01:24:35,409
And then console dot log,

2382
01:24:35,409 --> 01:24:37,649
and we just put S in here.

2383
01:24:37,649 --> 01:24:40,689
So again, got to
love our four loops.

2384
01:24:40,689 --> 01:24:41,909
They are very useful for

2385
01:24:41,909 --> 01:24:44,729
optimizing four
loops with a arrays.

2386
01:24:44,729 --> 01:24:46,089
But this should
now print out

2387
01:24:46,089 --> 01:24:47,129
every single score

2388
01:24:47,129 --> 01:24:48,709
retrieved in
local storage.

2389
01:24:48,709 --> 01:24:50,249
And the really
cool bit is.

2390
01:24:50,249 --> 01:24:51,849
Remember, we've
created that up here.

2391
01:24:51,849 --> 01:24:54,349
So I got rid of that
entirely, right?

2392
01:24:54,349 --> 01:24:56,749
If I were to refresh

2393
01:24:56,749 --> 01:24:57,989
the page, they're
still there.

2394
01:24:57,989 --> 01:24:59,629
If I close the
tab, if I were to

2395
01:24:59,629 --> 01:25:01,894
close the window
entirely as well.

2396
01:25:01,894 --> 01:25:04,979
T hose scores
are still there.

2397
01:25:04,979 --> 01:25:08,159
They've been saved
inside of local storage.

2398
01:25:08,159 --> 01:25:10,659
What we've done here is
we've retrieved them.

2399
01:25:10,659 --> 01:25:11,900
We've separated

2400
01:25:11,900 --> 01:25:13,419
the string that
was retrieved,

2401
01:25:13,419 --> 01:25:14,579
and we've put it into

2402
01:25:14,579 --> 01:25:16,239
a slightly more
usable array

2403
01:25:16,239 --> 01:25:17,999
that we can do
something with.

2404
01:25:17,999 --> 01:25:19,499
This is essentially how

2405
01:25:19,499 --> 01:25:20,800
I've done the leaderboard.

2406
01:25:20,800 --> 01:25:22,419
I've saved the name that

2407
01:25:22,419 --> 01:25:24,659
the users typed it in
along with their score.

2408
01:25:24,659 --> 01:25:26,279
I've put that
into an array.

2409
01:25:26,279 --> 01:25:28,579
I've then saved that
into local storage.

2410
01:25:28,579 --> 01:25:29,999
Then each time I reset

2411
01:25:29,999 --> 01:25:31,059
the game or the first time

2412
01:25:31,059 --> 01:25:32,239
I go onto the game,

2413
01:25:32,239 --> 01:25:33,899
I retrieve all
those scores

2414
01:25:33,899 --> 01:25:35,279
and all those names.

2415
01:25:35,279 --> 01:25:38,499
I separate that string
back into an array,

2416
01:25:38,499 --> 01:25:39,919
and then I populate the

2417
01:25:39,919 --> 01:25:42,399
leaderboard with
that content.

2418
01:25:42,399 --> 01:25:45,599
Pretty cool, right?
So, it makes

2419
01:25:45,599 --> 01:25:48,459
sense if we can add
things to local storage,

2420
01:25:48,459 --> 01:25:49,559
we can also remove things

2421
01:25:49,559 --> 01:25:51,199
from local
storage as well.

2422
01:25:51,199 --> 01:25:53,499
So to remove something
from local storage.

2423
01:25:53,499 --> 01:25:55,099
So individual things,

2424
01:25:55,099 --> 01:25:56,379
you can say local storage,

2425
01:25:56,379 --> 01:25:58,179
dot remove item,
and then the name,

2426
01:25:58,179 --> 01:26:01,019
so the key of the data
you'd like to remove.

2427
01:26:01,019 --> 01:26:03,759
So, if I'd like to remove
that name of Chris,

2428
01:26:03,759 --> 01:26:07,079
I could just say dot
remove item, brackets.

2429
01:26:07,079 --> 01:26:09,399
Quotation marks name.

2430
01:26:09,399 --> 01:26:10,539
If you want to clear

2431
01:26:10,539 --> 01:26:12,159
everything from
local storage,

2432
01:26:12,159 --> 01:26:14,579
you could say local
storage, dot clear.

2433
01:26:14,579 --> 01:26:16,979
And that gets rid of
every single item

2434
01:26:16,979 --> 01:26:18,819
inside of local storage.

2435
01:26:18,819 --> 01:26:20,479
Now, if you want
to see all the

2436
01:26:20,479 --> 01:26:21,759
items in local storage,

2437
01:26:21,759 --> 01:26:23,559
the unofficial way
of doing this is

2438
01:26:23,559 --> 01:26:26,239
typing local storage
into your console,

2439
01:26:26,239 --> 01:26:27,579
and that will show
you everything

2440
01:26:27,579 --> 01:26:29,259
inside of local storage.

2441
01:26:29,259 --> 01:26:31,879
Do I go back into
here really quickly?

2442
01:26:31,879 --> 01:26:34,359
If I type local storage,

2443
01:26:34,359 --> 01:26:36,979
and click enter,
it basically just

2444
01:26:36,979 --> 01:26:38,199
tells me I've
got two things

2445
01:26:38,199 --> 01:26:39,399
currently in
local storage.

2446
01:26:39,399 --> 01:26:41,159
I've got a name
called Chris,

2447
01:26:41,159 --> 01:26:42,579
and I've got my scores

2448
01:26:42,579 --> 01:26:44,539
string that we've
just created here.

2449
01:26:44,539 --> 01:26:47,039
So I am just going
to comment this out,

2450
01:26:47,039 --> 01:26:49,539
so it looks a
little bit cleaner.

2451
01:26:49,740 --> 01:26:53,459
So again, if I say
local storage.

2452
01:26:53,540 --> 01:26:56,219
Like so. I can

2453
01:26:56,219 --> 01:26:58,619
see both of my parts
in local storage.

2454
01:26:58,619 --> 01:26:59,959
I could add some
more things to this.

2455
01:26:59,959 --> 01:27:04,779
I could say local
storage set item.

2456
01:27:05,300 --> 01:27:07,659
Age. And I could

2457
01:27:07,659 --> 01:27:10,679
put maybe not
ten, 25 on this.

2458
01:27:10,679 --> 01:27:12,359
I could add a bit
more just so we have

2459
01:27:12,359 --> 01:27:17,740
a bit more data. Location.

2460
01:27:19,580 --> 01:27:21,900
Northampton.

2461
01:27:21,900 --> 01:27:23,179
Would help if I

2462
01:27:23,179 --> 01:27:24,599
spelled Northampton
correctly.

2463
01:27:24,599 --> 01:27:25,879
There we go.

2464
01:27:25,879 --> 01:27:28,279
So we should now
have two bits

2465
01:27:28,279 --> 01:27:29,799
inside of local storage,

2466
01:27:29,799 --> 01:27:31,099
two new bits, anyway.

2467
01:27:31,099 --> 01:27:33,100
So we have Chris,
25, Northampton,

2468
01:27:33,100 --> 01:27:34,759
and Chris 100 Mark 20,

2469
01:27:34,759 --> 01:27:36,239
Tom 50, and John one,

2470
01:27:36,239 --> 01:27:38,419
and that's a
length of four.

2471
01:27:38,419 --> 01:27:40,959
So we've now got a
few different items

2472
01:27:40,959 --> 01:27:43,789
inside of local
storage, which is nice.

2473
01:27:43,789 --> 01:27:46,699
So that's the unofficial
way of finding

2474
01:27:46,699 --> 01:27:48,299
things everything
you're currently

2475
01:27:48,299 --> 01:27:49,479
stored in local storage.

2476
01:27:49,479 --> 01:27:51,239
The official way
of doing this is

2477
01:27:51,239 --> 01:27:53,139
inside of developer tools.

2478
01:27:53,139 --> 01:27:54,679
Instead of the
console tab,

2479
01:27:54,679 --> 01:27:56,959
if you flip over to
the application tab,

2480
01:27:56,959 --> 01:27:58,919
then if you go
under storage,

2481
01:27:58,919 --> 01:28:00,399
local storage, and then

2482
01:28:00,399 --> 01:28:01,639
inside of local storage,

2483
01:28:01,639 --> 01:28:02,379
you should be able to

2484
01:28:02,379 --> 01:28:03,859
see everything
currently stored

2485
01:28:03,859 --> 01:28:06,539
inside of local storage
inside of this table.

2486
01:28:06,539 --> 01:28:07,959
So you can see the key,

2487
01:28:07,959 --> 01:28:09,239
so the name of the data

2488
01:28:09,239 --> 01:28:11,459
and the value
under that key.

2489
01:28:11,459 --> 01:28:12,559
So in this case,

2490
01:28:12,559 --> 01:28:14,799
I've got a slightly
different pieces

2491
01:28:14,799 --> 01:28:16,599
of data that
have been saved.

2492
01:28:16,599 --> 01:28:18,634
So if I wanted to,

2493
01:28:18,634 --> 01:28:21,429
To see it officially.
So in my case,

2494
01:28:21,429 --> 01:28:22,709
because of the
way I've kind of

2495
01:28:22,709 --> 01:28:24,229
clapped my browser
currently, so,

2496
01:28:24,229 --> 01:28:25,930
because of the
dimensions, application

2497
01:28:25,930 --> 01:28:27,689
is currently in these
two arrows just here.

2498
01:28:27,689 --> 01:28:30,230
So if I click on this
and go to application,

2499
01:28:30,230 --> 01:28:32,229
I go to local storage,

2500
01:28:32,229 --> 01:28:34,209
and then this one,
I can see all of

2501
01:28:34,209 --> 01:28:35,649
the local storage
information I've

2502
01:28:35,649 --> 01:28:37,809
got stored just here.

2503
01:28:37,809 --> 01:28:39,529
So I've got scores,

2504
01:28:39,529 --> 01:28:41,309
I've got age,
location name.

2505
01:28:41,309 --> 01:28:42,869
The cool thing is, I
can edit it from here,

2506
01:28:42,869 --> 01:28:44,469
and I can even delete
it from here if I'd

2507
01:28:44,469 --> 01:28:46,809
like to as well, which
is quite interesting.

2508
01:28:46,809 --> 01:28:47,809
So again, this is

2509
01:28:47,809 --> 01:28:49,149
the official way
of doing it.

2510
01:28:49,149 --> 01:28:51,869
The slightly shorter
cut way that

2511
01:28:51,869 --> 01:28:53,209
I like doing it
is just calling

2512
01:28:53,209 --> 01:28:54,629
local storage
in the console,

2513
01:28:54,629 --> 01:28:56,089
and then you can see
everything that's

2514
01:28:56,089 --> 01:28:58,049
been retrieved,
just like so.

2515
01:28:58,049 --> 01:28:59,429
Pretty cool there, right?

2516
01:28:59,429 --> 01:29:00,609
So you can always find out

2517
01:29:00,609 --> 01:29:01,969
exactly what is currently

2518
01:29:01,969 --> 01:29:04,669
stored inside of
local storage.

2519
01:29:05,540 --> 01:29:07,859
Now, if you'd like to, you

2520
01:29:07,859 --> 01:29:10,519
could get everything
from local storage,

2521
01:29:10,519 --> 01:29:12,839
and it will actually
store it into an array.

2522
01:29:12,839 --> 01:29:14,659
The way to do
this is if you

2523
01:29:14,659 --> 01:29:16,279
create an empty
array, so my case,

2524
01:29:16,279 --> 01:29:18,819
I'm creating an
empty called items,

2525
01:29:18,819 --> 01:29:20,599
you then need to four loop

2526
01:29:20,599 --> 01:29:21,999
through local storage.

2527
01:29:21,999 --> 01:29:24,219
So you're going to
say, let i equal zero,

2528
01:29:24,219 --> 01:29:25,559
I cannot be greater than

2529
01:29:25,559 --> 01:29:28,099
local storage dot
length, i plus plus.

2530
01:29:28,099 --> 01:29:29,239
You're then
going to create

2531
01:29:29,239 --> 01:29:30,639
a new variable called key

2532
01:29:30,639 --> 01:29:33,619
and using the key method
for local storage,

2533
01:29:33,619 --> 01:29:35,019
populate the key with the

2534
01:29:35,019 --> 01:29:37,179
current key of
local storage.

2535
01:29:37,179 --> 01:29:39,419
You're then going to
find the value under

2536
01:29:39,419 --> 01:29:41,979
that key by using
the key element.

2537
01:29:41,979 --> 01:29:44,019
You're then going to use
the dot push method,

2538
01:29:44,019 --> 01:29:46,079
which we're going to
learn very shortly.

2539
01:29:46,079 --> 01:29:49,679
So add that value
into this array.

2540
01:29:49,679 --> 01:29:51,219
So using this approach,

2541
01:29:51,219 --> 01:29:53,279
you can get everything
currently stored in

2542
01:29:53,279 --> 01:29:55,559
local storage and save

2543
01:29:55,559 --> 01:29:58,639
it into an array,
which is quite cool.

2544
01:29:58,639 --> 01:29:59,899
So if we were going to

2545
01:29:59,899 --> 01:30:01,019
go through the logic a bit

2546
01:30:01,019 --> 01:30:04,530
of kind of how to
do the leaderboard,

2547
01:30:04,530 --> 01:30:06,859
Essentially, this is
what you need to do.

2548
01:30:06,859 --> 01:30:08,359
Okay. So hopefully
you're paying

2549
01:30:08,359 --> 01:30:10,479
attention to this if
you'd like a B grade.

2550
01:30:10,479 --> 01:30:12,479
When the game ends, you

2551
01:30:12,479 --> 01:30:14,439
need to ask the user
for their name,

2552
01:30:14,439 --> 01:30:16,559
and you can do that
by using a prompt.

2553
01:30:16,559 --> 01:30:17,799
You then find out

2554
01:30:17,799 --> 01:30:19,139
what their
current score is.

2555
01:30:19,139 --> 01:30:20,519
So hopefully you've
got some kind of

2556
01:30:20,519 --> 01:30:22,579
variable that's
tracking their score.

2557
01:30:22,579 --> 01:30:24,859
You save their
name along with

2558
01:30:24,859 --> 01:30:27,499
their score inside
of local storage.

2559
01:30:27,499 --> 01:30:29,499
Whether that's in a
big scores array,

2560
01:30:29,499 --> 01:30:30,859
like I've shown
you in the slide,

2561
01:30:30,859 --> 01:30:33,099
or maybe it's under
an individual key.

2562
01:30:33,099 --> 01:30:35,419
It's up to you. So
you're going to

2563
01:30:35,419 --> 01:30:38,369
save all of that data
in local storage.

2564
01:30:38,369 --> 01:30:40,439
Then, either when the game

2565
01:30:40,439 --> 01:30:44,579
starts or just
every so often,

2566
01:30:44,579 --> 01:30:46,619
you need to retrieve
all the names and

2567
01:30:46,619 --> 01:30:49,039
all the scores from
local storage.

2568
01:30:49,039 --> 01:30:51,279
Using that information,
you're then going to

2569
01:30:51,279 --> 01:30:54,399
populate the leaderboard
with that content.

2570
01:30:54,399 --> 01:30:55,199
Now,

2571
01:30:55,199 --> 01:30:57,139
the tricky part is when
you retrieve things

2572
01:30:57,139 --> 01:30:59,879
from local storage,
it's a string.

2573
01:30:59,879 --> 01:31:01,579
Okay? So, if you've

2574
01:31:01,579 --> 01:31:04,639
stored the score and
the name together,

2575
01:31:04,639 --> 01:31:06,519
most likely they're
going to be in

2576
01:31:06,519 --> 01:31:08,179
a string format,
whether it's, you know,

2577
01:31:08,179 --> 01:31:09,659
the score,
underscore the name

2578
01:31:09,659 --> 01:31:11,619
or the name,
underscore the score.

2579
01:31:11,619 --> 01:31:13,599
You need some way
of separating that

2580
01:31:13,599 --> 01:31:16,724
possibly into a separate
array entirely.

2581
01:31:16,724 --> 01:31:18,169
And then you can kind

2582
01:31:18,169 --> 01:31:19,750
of use that information.

2583
01:31:19,750 --> 01:31:21,569
It sounds a bit
complicated,

2584
01:31:21,569 --> 01:31:22,849
but really breaking
it down by

2585
01:31:22,849 --> 01:31:24,069
a step by step approach.

2586
01:31:24,069 --> 01:31:25,789
What I would do is

2587
01:31:25,789 --> 01:31:27,189
create a function
that saves

2588
01:31:27,189 --> 01:31:28,649
things to local storage,

2589
01:31:28,649 --> 01:31:30,449
create a function
that retrieves

2590
01:31:30,449 --> 01:31:31,649
things from local storage.

2591
01:31:31,649 --> 01:31:32,989
And again, using
our function

2592
01:31:32,989 --> 01:31:34,229
knowledge from today will

2593
01:31:34,229 --> 01:31:37,809
make that considerably
easier. Okay?

2594
01:31:37,809 --> 01:31:41,329
Once you've got that
down, do it bit by bit.

2595
01:31:41,329 --> 01:31:42,769
You can clearly
track what's being

2596
01:31:42,769 --> 01:31:44,669
saved in local
storage by either

2597
01:31:44,669 --> 01:31:46,629
typing in local storage
in the console or

2598
01:31:46,629 --> 01:31:46,989
going in

2599
01:31:46,989 --> 01:31:49,529
the application window
in developer tools.

2600
01:31:49,529 --> 01:31:52,929
But again, it sounds
a bit tricky.

2601
01:31:52,929 --> 01:31:57,749
It's not. Okay. So
have a go with that.

2602
01:31:57,749 --> 01:31:59,629
I'd like to think it's a

2603
01:31:59,629 --> 01:32:01,369
little bit clearer
at this stage.

2604
01:32:01,369 --> 01:32:03,709
Okay. Moving slightly

2605
01:32:03,709 --> 01:32:05,749
away from local storage,

2606
01:32:05,749 --> 01:32:07,609
we're going to go
through two useful

2607
01:32:07,609 --> 01:32:09,694
functions for the math.

2608
01:32:09,694 --> 01:32:12,239
Property. So when you call

2609
01:32:12,239 --> 01:32:15,139
the dot Max
method on math,

2610
01:32:15,139 --> 01:32:17,499
it will actually return
the largest number

2611
01:32:17,499 --> 01:32:19,079
in a set of numbers.

2612
01:32:19,079 --> 01:32:20,899
So in my case, if
I wanted to find

2613
01:32:20,899 --> 01:32:23,959
the largest number out
of ten, 150, and 20,

2614
01:32:23,959 --> 01:32:26,119
I could say math dot
Max and then put

2615
01:32:26,119 --> 01:32:28,079
those numbers
directly inside

2616
01:32:28,079 --> 01:32:29,539
of the max function.

2617
01:32:29,539 --> 01:32:31,299
If you'd like to do
this on an array,

2618
01:32:31,299 --> 01:32:33,299
you need to use the
spread operator.

2619
01:32:33,299 --> 01:32:34,639
The spread operator are

2620
01:32:34,639 --> 01:32:37,559
these three dots
just here. Okay.

2621
01:32:39,570 --> 01:32:42,229
Sorry about that.
My door just rank.

2622
01:32:42,229 --> 01:32:44,329
So we've got the spread
operator just here.

2623
01:32:44,329 --> 01:32:45,829
So, the spread
operator allows

2624
01:32:45,829 --> 01:32:47,069
you to kind of expand

2625
01:32:47,069 --> 01:32:48,869
an array like it's

2626
01:32:48,869 --> 01:32:50,689
individual elements,
if that makes sense.

2627
01:32:50,689 --> 01:32:53,489
It kind of lets you go
through each value,

2628
01:32:53,489 --> 01:32:54,129
like they were

2629
01:32:54,129 --> 01:32:55,789
individually
declared elements.

2630
01:32:55,789 --> 01:32:57,309
So, in this case,
it's going to take

2631
01:32:57,309 --> 01:32:59,429
these numbers and
treat them just like

2632
01:32:59,429 --> 01:33:02,029
individual values that are

2633
01:33:02,029 --> 01:33:03,669
kind of stored inside
of other elements,

2634
01:33:03,669 --> 01:33:04,829
if that makes sense.

2635
01:33:04,829 --> 01:33:06,289
But in this case, we

2636
01:33:06,289 --> 01:33:07,489
just need to
use it to loop

2637
01:33:07,489 --> 01:33:10,149
through this array,
if that makes sense.

2638
01:33:10,149 --> 01:33:12,249
So when you say dot
dot dot numbers,

2639
01:33:12,249 --> 01:33:13,409
it's exactly the
same thing as

2640
01:33:13,409 --> 01:33:14,829
having these
numbers directly

2641
01:33:14,829 --> 01:33:18,089
typed into this
function just here.

2642
01:33:18,089 --> 01:33:20,089
So when you say
Math dot Max,

2643
01:33:20,089 --> 01:33:22,869
it gives you the
largest number

2644
01:33:22,869 --> 01:33:25,069
inside of a given
set of numbers.

2645
01:33:25,069 --> 01:33:26,909
When you say Math dot min,

2646
01:33:26,909 --> 01:33:28,530
it gives you the smallest

2647
01:33:28,530 --> 01:33:29,949
in a set of numbers.

2648
01:33:29,949 --> 01:33:31,969
So again, the opposite,

2649
01:33:31,969 --> 01:33:33,029
basically, and
you still need

2650
01:33:33,029 --> 01:33:34,229
to use the
spread operator.

2651
01:33:34,229 --> 01:33:35,709
You're going to use
this in an array.

2652
01:33:35,709 --> 01:33:37,309
So again, the
spread operator is

2653
01:33:37,309 --> 01:33:39,789
just three dots in front
of the array itself.

2654
01:33:39,789 --> 01:33:42,629
Okay. Hopefully,
that makes sense.

2655
01:33:42,629 --> 01:33:44,049
For exercise
three, I would

2656
01:33:44,049 --> 01:33:45,809
like you to change
the code from

2657
01:33:45,809 --> 01:33:48,149
exercise two and
actually save

2658
01:33:48,149 --> 01:33:51,889
the tasks in local storage
and retrieve them.

2659
01:33:51,889 --> 01:33:54,750
If you close the browser
or click refresh,

2660
01:33:54,750 --> 01:33:58,129
all of those tasks
should still be there.

2661
01:33:58,410 --> 01:34:00,969
Once you've done
that, I'd like you to

2662
01:34:00,969 --> 01:34:02,769
add a clear button and

2663
01:34:02,769 --> 01:34:04,569
add the code for
that clear button to

2664
01:34:04,569 --> 01:34:06,790
clear local storage
completely.

2665
01:34:06,790 --> 01:34:10,849
So it should look
something like this.

2666
01:34:12,290 --> 01:34:14,549
So all of my content is

2667
01:34:14,549 --> 01:34:15,869
being populated
from local storage.

2668
01:34:15,869 --> 01:34:18,309
If I click Cree fresh,
nothing is happening.

2669
01:34:18,309 --> 01:34:19,749
If I add something here,

2670
01:34:19,749 --> 01:34:21,569
it gets added to local
storage as well.

2671
01:34:21,569 --> 01:34:25,829
So I could say
finish lecture 12.

2672
01:34:25,829 --> 01:34:27,629
If I click Add
here. I click

2673
01:34:27,629 --> 01:34:29,249
Cree Fresh. It's
still there.

2674
01:34:29,249 --> 01:34:30,769
If I actually go
into here and

2675
01:34:30,769 --> 01:34:32,429
go into my
application window.

2676
01:34:32,429 --> 01:34:34,229
We actually have
finish lecture 12

2677
01:34:34,229 --> 01:34:36,729
stored just here,
which is quite fun.

2678
01:34:36,729 --> 01:34:38,649
But I could
delete this and

2679
01:34:38,649 --> 01:34:40,429
it gets deleted
from the task list.

2680
01:34:40,429 --> 01:34:42,029
I could click Clear,
and that clears

2681
01:34:42,029 --> 01:34:44,444
everything from local
storage as well.

2682
01:34:44,444 --> 01:34:47,299
So, have a go at
doing exercise three.

2683
01:34:47,299 --> 01:34:50,319
Okay. Like I said, once
you've got this down,

2684
01:34:50,319 --> 01:34:51,899
the leaderboard
functionality should

2685
01:34:51,899 --> 01:34:53,539
be considerably
easier because it's

2686
01:34:53,539 --> 01:34:55,139
only a small
extension on top of

2687
01:34:55,139 --> 01:34:56,539
this exercise
to get it fully

2688
01:34:56,539 --> 01:34:58,039
working, which is nice.

2689
01:34:58,039 --> 01:35:00,459
Okay. So give
exercise three ago,

2690
01:35:00,459 --> 01:35:02,939
and we'll finish up
with arrays at the end.

2691
01:35:02,939 --> 01:35:05,519
Okay. Good luck.
Right. So this

2692
01:35:05,519 --> 01:35:08,219
is the last section
for today's lecture.

2693
01:35:08,219 --> 01:35:10,319
This is going to be
all the methods we

2694
01:35:10,319 --> 01:35:12,719
can use inside of arrays.

2695
01:35:12,719 --> 01:35:14,699
So remember,
from last week,

2696
01:35:14,699 --> 01:35:15,919
we looked at arrays.

2697
01:35:15,919 --> 01:35:17,819
To array allow us to store

2698
01:35:17,819 --> 01:35:19,239
more than one value inside

2699
01:35:19,239 --> 01:35:20,659
of a single variable.

2700
01:35:20,659 --> 01:35:22,719
We can then access
those values

2701
01:35:22,719 --> 01:35:24,439
by using an
index position.

2702
01:35:24,439 --> 01:35:26,879
Now, the fun thing
is, with arrays,

2703
01:35:26,879 --> 01:35:29,039
we can actually
use a variety of

2704
01:35:29,039 --> 01:35:31,059
inbuilt methods that make

2705
01:35:31,059 --> 01:35:33,359
using arrays
significantly easier,

2706
01:35:33,359 --> 01:35:35,919
whether that's removing
or adding things to

2707
01:35:35,919 --> 01:35:37,219
a arrays or even sorting

2708
01:35:37,219 --> 01:35:39,399
an array from
largest to smallest.

2709
01:35:39,399 --> 01:35:42,399
That specific one is
very useful for sorting

2710
01:35:42,399 --> 01:35:43,879
the leaderboard
from the highest

2711
01:35:43,879 --> 01:35:45,759
score to the lowest score.

2712
01:35:45,759 --> 01:35:47,679
Don't maybe bear
with me on that one.

2713
01:35:47,679 --> 01:35:49,759
Hey. The first
method we'll look

2714
01:35:49,759 --> 01:35:52,619
at is the push method.

2715
01:35:52,619 --> 01:35:55,599
So when you say dot
push onto an array,

2716
01:35:55,599 --> 01:35:57,359
it will actually
add an element

2717
01:35:57,359 --> 01:35:59,079
to the end of an array.

2718
01:35:59,079 --> 01:36:00,759
So in these examples here,

2719
01:36:00,759 --> 01:36:02,319
I've got my
standard array,

2720
01:36:02,319 --> 01:36:03,739
which is Chris
Mark and Tom.

2721
01:36:03,739 --> 01:36:05,119
So, if I've printed
out this array,

2722
01:36:05,119 --> 01:36:06,999
it just says Chris
Mark and Tom.

2723
01:36:06,999 --> 01:36:08,339
If I wanted to add

2724
01:36:08,339 --> 01:36:09,879
John to the end
of this array,

2725
01:36:09,879 --> 01:36:12,219
I would say names
dot push John,

2726
01:36:12,219 --> 01:36:13,819
and that then adds John

2727
01:36:13,819 --> 01:36:16,059
to the end of the array.

2728
01:36:16,059 --> 01:36:17,459
So if you wanted to add

2729
01:36:17,459 --> 01:36:18,939
something to an array,

2730
01:36:18,939 --> 01:36:21,059
dot push is very
useful for adding

2731
01:36:21,059 --> 01:36:24,759
something to the end
of an array. Okay.

2732
01:36:25,080 --> 01:36:28,239
Dot pop is a
bit different.

2733
01:36:28,239 --> 01:36:30,219
Instead of adding to
the end of an array,

2734
01:36:30,219 --> 01:36:32,079
dot pop actually removes

2735
01:36:32,079 --> 01:36:34,159
an element from an array.

2736
01:36:34,159 --> 01:36:35,899
When you call dot pop,

2737
01:36:35,899 --> 01:36:38,339
it also returns the
element that was removed.

2738
01:36:38,339 --> 01:36:39,799
So in my case,
I've got the names

2739
01:36:39,799 --> 01:36:41,279
Chris Mark and Tom again.

2740
01:36:41,279 --> 01:36:44,259
If I wanted to remove
Tom from this array,

2741
01:36:44,259 --> 01:36:46,439
I could say names dot pop,

2742
01:36:46,439 --> 01:36:48,159
and that would remove Tom.

2743
01:36:48,159 --> 01:36:50,559
If I saved this
into a variable,

2744
01:36:50,559 --> 01:36:52,019
Tom would then be stored

2745
01:36:52,019 --> 01:36:53,459
inside this variable.

2746
01:36:53,459 --> 01:36:55,379
I could then use this
variable to say what

2747
01:36:55,379 --> 01:36:57,879
the last name was
inside that array.

2748
01:36:57,879 --> 01:36:59,779
So when I say
names dot pop,

2749
01:36:59,779 --> 01:37:02,249
it's removing Tom
from this array.

2750
01:37:02,249 --> 01:37:03,839
Hence, why the
array is now

2751
01:37:03,839 --> 01:37:05,279
only Chris and Mark.

2752
01:37:05,279 --> 01:37:06,739
So Push adds

2753
01:37:06,739 --> 01:37:08,079
something to the
end of an array.

2754
01:37:08,079 --> 01:37:09,379
Pop removes

2755
01:37:09,379 --> 01:37:11,039
something from the
end of an array.

2756
01:37:11,039 --> 01:37:12,339
So again, very useful

2757
01:37:12,339 --> 01:37:14,719
for modifying our arrays.

2758
01:37:14,719 --> 01:37:17,999
Shift is very similar
to Pop except it's

2759
01:37:17,999 --> 01:37:21,319
for the first element
instead of the last.

2760
01:37:21,319 --> 01:37:23,819
So if you wanted to
remove the first element

2761
01:37:23,819 --> 01:37:26,019
from an array, you
can use shift.

2762
01:37:26,019 --> 01:37:27,699
And again, just
like with Pop,

2763
01:37:27,699 --> 01:37:30,119
you can save that
into a variable.

2764
01:37:30,119 --> 01:37:31,519
So if I wanted to remove

2765
01:37:31,519 --> 01:37:32,759
Chris from this array,

2766
01:37:32,759 --> 01:37:34,299
I could say constant

2767
01:37:34,299 --> 01:37:36,279
element name
equals names do

2768
01:37:36,279 --> 01:37:38,099
shift and that will remove

2769
01:37:38,099 --> 01:37:40,539
Chris from the start
of this array.

2770
01:37:40,539 --> 01:37:42,959
Pretty interesting,
right? So Pop

2771
01:37:42,959 --> 01:37:45,039
is for the last
element of the array.

2772
01:37:45,039 --> 01:37:47,839
Shift is for the first
element in the array.

2773
01:37:47,839 --> 01:37:49,659
So again, pop and
shift are for

2774
01:37:49,659 --> 01:37:52,769
removing things
from arrays.

2775
01:37:52,769 --> 01:37:55,419
Unshift inserts a value

2776
01:37:55,419 --> 01:37:56,619
to the beginning
of an array.

2777
01:37:56,619 --> 01:37:58,699
So unshift is very
similar to push,

2778
01:37:58,699 --> 01:38:01,059
but for the starting
point of an array.

2779
01:38:01,059 --> 01:38:02,799
So, in our case, if I said

2780
01:38:02,799 --> 01:38:05,199
constant names Chris
Mark and Tom again,

2781
01:38:05,199 --> 01:38:06,719
you're going to see
those names quite a

2782
01:38:06,719 --> 01:38:08,499
bit today, I was
very creative.

2783
01:38:08,499 --> 01:38:10,659
If I said names
to unshift John,

2784
01:38:10,659 --> 01:38:12,199
John gets inserted at

2785
01:38:12,199 --> 01:38:13,739
the start of this array.

2786
01:38:13,739 --> 01:38:14,799
And the nice thing is,

2787
01:38:14,799 --> 01:38:16,479
multiple values
can be added to

2788
01:38:16,479 --> 01:38:17,659
the beginning of an array

2789
01:38:17,659 --> 01:38:19,439
by separating them
with a comma.

2790
01:38:19,439 --> 01:38:21,539
So if I said Dan
Liz and John

2791
01:38:21,539 --> 01:38:24,099
all separated with a
comma inside of unshift,

2792
01:38:24,099 --> 01:38:25,519
these names get added

2793
01:38:25,519 --> 01:38:27,439
to the start
of this array.

2794
01:38:27,439 --> 01:38:30,039
So unshift is very
useful for adding to

2795
01:38:30,039 --> 01:38:33,519
the start of an
array. Okay.

2796
01:38:34,440 --> 01:38:37,319
Splice then. So
splice can be

2797
01:38:37,319 --> 01:38:39,999
used to add or remove
elements of an array.

2798
01:38:39,999 --> 01:38:41,519
Now, the syntax
for splicee is a

2799
01:38:41,519 --> 01:38:42,459
little bit more complex

2800
01:38:42,459 --> 01:38:43,839
than we might be used to.

2801
01:38:43,839 --> 01:38:45,859
But essentially,
inside a splice,

2802
01:38:45,859 --> 01:38:47,699
we need the index
position for

2803
01:38:47,699 --> 01:38:48,719
where we're
either going to

2804
01:38:48,719 --> 01:38:50,299
add or remove something,

2805
01:38:50,299 --> 01:38:52,899
then how many things
we're going to remove,

2806
01:38:52,899 --> 01:38:54,399
and then how many elements

2807
01:38:54,399 --> 01:38:55,179
we're going to add.

2808
01:38:55,179 --> 01:38:55,519
Now,

2809
01:38:55,519 --> 01:38:57,579
removing and adding is
completely optional.

2810
01:38:57,579 --> 01:38:58,659
So again, if
you want to add

2811
01:38:58,659 --> 01:39:00,179
something without
removing anything,

2812
01:39:00,179 --> 01:39:02,019
you would just
have zero on

2813
01:39:02,019 --> 01:39:04,099
the remove section.

2814
01:39:04,099 --> 01:39:05,259
Vice versa, if you

2815
01:39:05,259 --> 01:39:06,319
wanted to remove
something,

2816
01:39:06,319 --> 01:39:07,919
but not necessarily
add something,

2817
01:39:07,919 --> 01:39:10,099
but zero where
the add would be.

2818
01:39:10,099 --> 01:39:12,499
So in this instance,
if I was going to add

2819
01:39:12,499 --> 01:39:15,904
something to a specific
location in an array,

2820
01:39:15,904 --> 01:39:17,429
First, I'd say where

2821
01:39:17,429 --> 01:39:18,789
I'd like to add this two.

2822
01:39:18,789 --> 01:39:20,489
So let's say,
I'd like to add

2823
01:39:20,489 --> 01:39:23,989
John and Dan in between
Chris and Mark.

2824
01:39:23,989 --> 01:39:26,229
So I'm going to say at
index position one.

2825
01:39:26,229 --> 01:39:28,229
So here, again, remember,

2826
01:39:28,229 --> 01:39:29,649
index position
zero is where

2827
01:39:29,649 --> 01:39:32,249
Chris is at index
position one.

2828
01:39:32,249 --> 01:39:33,969
Don't remove anything.

2829
01:39:33,969 --> 01:39:35,609
That's why I've
got a zero here,

2830
01:39:35,609 --> 01:39:38,429
and add John and
Dan just here.

2831
01:39:38,429 --> 01:39:40,229
That's why in the
output, it says,

2832
01:39:40,229 --> 01:39:42,629
Chris, John, Dan,
Mark and Tom.

2833
01:39:42,629 --> 01:39:44,229
We're adding John and Dan

2834
01:39:44,229 --> 01:39:46,369
in between Chris and Mark.

2835
01:39:46,369 --> 01:39:47,909
So multiple elements can

2836
01:39:47,909 --> 01:39:49,949
be added using splice.

2837
01:39:49,949 --> 01:39:52,979
Vice versa, we can
remove elements

2838
01:39:52,979 --> 01:39:55,609
by simply just saying
the index position,

2839
01:39:55,609 --> 01:39:56,769
we'd like to
remove something.

2840
01:39:56,769 --> 01:39:58,309
So again, one, and then

2841
01:39:58,309 --> 01:40:00,349
remove the first
element at one.

2842
01:40:00,349 --> 01:40:02,549
So in my case, it's
going to look for mark.

2843
01:40:02,549 --> 01:40:03,509
So we're going to look for

2844
01:40:03,509 --> 01:40:04,909
the first index position,

2845
01:40:04,909 --> 01:40:06,269
which is here and remove

2846
01:40:06,269 --> 01:40:09,069
one element from
this index position.

2847
01:40:09,069 --> 01:40:11,029
If you'd like to remove
multiple elements,

2848
01:40:11,029 --> 01:40:13,129
we change this one to
something like a two.

2849
01:40:13,129 --> 01:40:15,009
If we said one comma two,

2850
01:40:15,009 --> 01:40:17,229
it would remove
Mark and tom.

2851
01:40:17,229 --> 01:40:18,329
But in this case,

2852
01:40:18,329 --> 01:40:19,889
because we're
saying splice one,

2853
01:40:19,889 --> 01:40:21,609
one, we're saying remove

2854
01:40:21,609 --> 01:40:24,549
mark from this
position of the array.

2855
01:40:24,549 --> 01:40:28,509
To do remove and an
add at the same time,

2856
01:40:28,509 --> 01:40:30,909
you'd essentially say, the

2857
01:40:30,909 --> 01:40:31,909
index position you'd like

2858
01:40:31,909 --> 01:40:33,029
to remove or
add something.

2859
01:40:33,029 --> 01:40:34,829
In our case, again,
we're doing it at one,

2860
01:40:34,829 --> 01:40:38,049
remove Mark, but
in Mark's place,

2861
01:40:38,049 --> 01:40:40,629
add new name one
and new name two.

2862
01:40:40,629 --> 01:40:42,869
That's why both of
these new names have

2863
01:40:42,869 --> 01:40:45,689
been added where
Mark was before.

2864
01:40:45,689 --> 01:40:48,209
So splice is very
useful for adding and

2865
01:40:48,209 --> 01:40:50,830
removing at
specific locations.

2866
01:40:50,830 --> 01:40:52,569
Now, again, if you
want to add something

2867
01:40:52,569 --> 01:40:54,789
without removing anything,
you can do that.

2868
01:40:54,789 --> 01:40:55,929
If you want to remove

2869
01:40:55,929 --> 01:40:57,389
something without
adding something,

2870
01:40:57,389 --> 01:40:59,269
again, you can do that.

2871
01:40:59,269 --> 01:41:00,629
Just make sure
you're getting

2872
01:41:00,629 --> 01:41:03,369
the order of this in
the right location.

2873
01:41:03,369 --> 01:41:04,669
So again, it's where

2874
01:41:04,669 --> 01:41:06,909
in the array would
like to look?

2875
01:41:06,909 --> 01:41:09,229
Would you like to
remove something

2876
01:41:09,229 --> 01:41:11,229
and then would you
like to add something?

2877
01:41:11,229 --> 01:41:12,629
Again, if you put zero

2878
01:41:12,629 --> 01:41:14,289
either on the
add or remove,

2879
01:41:14,289 --> 01:41:17,069
it just won't do
that, which is nice.

2880
01:41:17,069 --> 01:41:19,349
So splice is
very useful for

2881
01:41:19,349 --> 01:41:20,589
modifying the array at

2882
01:41:20,589 --> 01:41:23,069
a specific index position.

2883
01:41:23,430 --> 01:41:27,029
Slice is used to
return elements,

2884
01:41:27,029 --> 01:41:28,850
and more importantly,

2885
01:41:28,850 --> 01:41:31,129
store them in a new array.

2886
01:41:31,129 --> 01:41:33,169
Now, slice uses

2887
01:41:33,169 --> 01:41:35,529
the start index
and the end index.

2888
01:41:35,529 --> 01:41:36,989
So if I wanted to
create a brand

2889
01:41:36,989 --> 01:41:38,949
new array that
only contained,

2890
01:41:38,949 --> 01:41:41,389
let's say, Dan and John.

2891
01:41:41,389 --> 01:41:43,089
First, I'd need
the index position

2892
01:41:43,089 --> 01:41:43,769
for where we're going to

2893
01:41:43,769 --> 01:41:44,689
start this new array.

2894
01:41:44,689 --> 01:41:46,249
So I'd say the third
index position,

2895
01:41:46,249 --> 01:41:49,109
so zero, one,
two, and three.

2896
01:41:49,109 --> 01:41:51,929
And then five, which
is just after John.

2897
01:41:51,929 --> 01:41:53,689
So we're going
to say start on

2898
01:41:53,689 --> 01:41:56,454
Dan and end just
after John.

2899
01:41:56,454 --> 01:41:59,019
So that's why this
new names array

2900
01:41:59,019 --> 01:42:03,059
contains Dan and John.
Pretty cool, right?

2901
01:42:03,059 --> 01:42:04,719
Now again, important
to remember,

2902
01:42:04,719 --> 01:42:07,159
slice does not modify
the original array.

2903
01:42:07,159 --> 01:42:09,119
So names still
contains Chris,

2904
01:42:09,119 --> 01:42:11,079
Mark, Tom, Dan, and John.

2905
01:42:11,079 --> 01:42:13,879
New names only
contains Dan and John.

2906
01:42:13,879 --> 01:42:15,339
Again, sometimes
it can be a bit

2907
01:42:15,339 --> 01:42:17,429
confusing, but that's
just how it works.

2908
01:42:17,429 --> 01:42:19,399
Four each now.
Now, a few of

2909
01:42:19,399 --> 01:42:20,979
you have already used
this in the lectures,

2910
01:42:20,979 --> 01:42:23,159
which is fantastic,
but four each

2911
01:42:23,159 --> 01:42:24,259
is essentially another way

2912
01:42:24,259 --> 01:42:26,079
of looping
through an array.

2913
01:42:26,079 --> 01:42:28,279
Now, the way we do a
four reach is first,

2914
01:42:28,279 --> 01:42:28,899
we have the array.

2915
01:42:28,899 --> 01:42:31,099
So in our case, it's
Chris Mark and Tom.

2916
01:42:31,099 --> 01:42:33,039
We then say names
dot four each,

2917
01:42:33,039 --> 01:42:34,579
and then the
function we'd like

2918
01:42:34,579 --> 01:42:36,779
to run inside
that four reach.

2919
01:42:36,779 --> 01:42:39,279
Okay. Inside
this function,

2920
01:42:39,279 --> 01:42:41,379
whatever variable we
passed inside there

2921
01:42:41,379 --> 01:42:45,059
becomes each value
of that array.

2922
01:42:45,059 --> 01:42:47,539
So name will become
Chris Mark and

2923
01:42:47,539 --> 01:42:50,019
Tom through each
iteration of that loop.

2924
01:42:50,019 --> 01:42:52,679
So names dot four, each
print name will print

2925
01:42:52,679 --> 01:42:54,639
each value of

2926
01:42:54,639 --> 01:42:57,659
this array, which
is pretty cool.

2927
01:42:57,780 --> 01:43:01,579
Map is similar
to for each,

2928
01:43:01,579 --> 01:43:04,019
except it creates
a new array,

2929
01:43:04,019 --> 01:43:05,459
leaving the original array

2930
01:43:05,459 --> 01:43:07,320
completely unchanged.

2931
01:43:07,320 --> 01:43:08,919
So in our case,
we could combine

2932
01:43:08,919 --> 01:43:10,539
this with some of
our string methods.

2933
01:43:10,539 --> 01:43:12,939
So if I wanted to create
a brand new array,

2934
01:43:12,939 --> 01:43:16,360
but all of my values
are in uppercase,

2935
01:43:16,360 --> 01:43:19,279
I could say constant
uppercase names equals

2936
01:43:19,279 --> 01:43:20,719
names dot map and run

2937
01:43:20,719 --> 01:43:22,619
my capitalized
names function.

2938
01:43:22,619 --> 01:43:25,259
Inside my capitalized
names function,

2939
01:43:25,259 --> 01:43:29,164
I'm then going to return
name to uppercase.

2940
01:43:29,164 --> 01:43:31,189
Using this approach, I now

2941
01:43:31,189 --> 01:43:32,989
have two different arrays.

2942
01:43:32,989 --> 01:43:34,449
I have the original array,

2943
01:43:34,449 --> 01:43:37,429
which contains all my
values as they were,

2944
01:43:37,429 --> 01:43:38,209
and then I have

2945
01:43:38,209 --> 01:43:39,849
this new upper
case names array,

2946
01:43:39,849 --> 01:43:41,369
which contains
all my values

2947
01:43:41,369 --> 01:43:43,709
to an upper case,
which is quite cool.

2948
01:43:43,709 --> 01:43:46,649
It's a map will loop
through an array

2949
01:43:46,649 --> 01:43:48,129
and do something to

2950
01:43:48,129 --> 01:43:50,169
a new version
of that array.

2951
01:43:50,169 --> 01:43:51,329
It's almost like a copy of

2952
01:43:51,329 --> 01:43:53,729
the array that we've
done something too.

2953
01:43:53,729 --> 01:43:54,849
Whether we've sorted it,

2954
01:43:54,849 --> 01:43:55,949
whether we've changed it,

2955
01:43:55,949 --> 01:43:56,609
like in this case,

2956
01:43:56,609 --> 01:43:58,229
we've changed it
to upper case.

2957
01:43:58,229 --> 01:43:59,509
That new array is

2958
01:43:59,509 --> 01:44:01,189
different from the
original array.

2959
01:44:01,189 --> 01:44:02,569
But more importantly, the

2960
01:44:02,569 --> 01:44:04,029
original array is still

2961
01:44:04,029 --> 01:44:08,029
completely intact,
which is really cool.

2962
01:44:08,080 --> 01:44:10,959
The next one is filter.

2963
01:44:10,959 --> 01:44:12,699
So filter can be used

2964
01:44:12,699 --> 01:44:14,139
to create a
brand new array,

2965
01:44:14,139 --> 01:44:15,759
which only
contains elements

2966
01:44:15,759 --> 01:44:17,379
that pass a condition.

2967
01:44:17,379 --> 01:44:18,819
So in our case, we could

2968
01:44:18,819 --> 01:44:21,079
use the includes method.

2969
01:44:21,850 --> 01:44:23,369
Apologies.

2970
01:44:23,369 --> 01:44:23,969
Again, there's a lot

2971
01:44:23,969 --> 01:44:24,989
of noise happening
outside.

2972
01:44:24,989 --> 01:44:26,649
It's very, very
irritating.

2973
01:44:26,649 --> 01:44:28,969
We could use the
includes method to

2974
01:44:28,969 --> 01:44:31,969
search a string for a
specific character.

2975
01:44:31,969 --> 01:44:35,309
So in my case, I could
search this array,

2976
01:44:35,309 --> 01:44:36,769
so we've got
this name ray,

2977
01:44:36,769 --> 01:44:39,069
Chris, Mark Connor,
Tom, and Case.

2978
01:44:39,069 --> 01:44:42,169
I only want the
values that contain

2979
01:44:42,169 --> 01:44:43,949
an uppercase C. So

2980
01:44:43,949 --> 01:44:45,369
I could create a
brand new array.

2981
01:44:45,369 --> 01:44:46,509
So my case, I could create

2982
01:44:46,509 --> 01:44:48,569
an array called
Contains C.

2983
01:44:48,569 --> 01:44:50,309
I could then say names do

2984
01:44:50,309 --> 01:44:53,309
filter and run my
check names function.

2985
01:44:53,309 --> 01:44:54,709
Inside of check names,

2986
01:44:54,709 --> 01:44:56,569
I'm then going
to return if

2987
01:44:56,569 --> 01:44:59,769
the name includes
an uppercase C.

2988
01:45:00,070 --> 01:45:02,489
So that's why in

2989
01:45:02,489 --> 01:45:05,269
this brand new array
called Contain C,

2990
01:45:05,269 --> 01:45:07,389
I have Chris
Connor and Case.

2991
01:45:07,389 --> 01:45:09,269
So it's removed
Mark and Tom

2992
01:45:09,269 --> 01:45:11,669
from this new array,
which is really cool.

2993
01:45:11,669 --> 01:45:12,589
But you don't just have

2994
01:45:12,589 --> 01:45:13,729
to use it with
an includes.

2995
01:45:13,729 --> 01:45:18,089
You could find a specific
value is a number.

2996
01:45:18,089 --> 01:45:20,229
If it's not a number,
we don't include it.

2997
01:45:20,229 --> 01:45:22,209
It's a way of checking
for a condition.

2998
01:45:22,209 --> 01:45:25,509
It filters out based on
a specific condition.

2999
01:45:25,509 --> 01:45:27,409
And the condition is
entirely up to you.

3000
01:45:27,409 --> 01:45:28,649
In this case,
I've just done

3001
01:45:28,649 --> 01:45:31,069
it a search for a
certain character.

3002
01:45:31,069 --> 01:45:32,869
But if it's a
numerical array,

3003
01:45:32,869 --> 01:45:35,334
you could do it based
on a numerical.

3004
01:45:35,334 --> 01:45:37,499
Condition. You could

3005
01:45:37,499 --> 01:45:38,779
say only give
me the values

3006
01:45:38,779 --> 01:45:40,039
back if they're
greater than

3007
01:45:40,039 --> 01:45:41,719
50 or if they're
less than ten,

3008
01:45:41,719 --> 01:45:43,319
or if they're
not negative.

3009
01:45:43,319 --> 01:45:44,599
Again, filter is

3010
01:45:44,599 --> 01:45:46,799
fantastic for
specifically checking

3011
01:45:46,799 --> 01:45:48,259
for a certain condition

3012
01:45:48,259 --> 01:45:50,619
along that piece of data.

3013
01:45:50,619 --> 01:45:52,999
So, again, in this case,
we're only finding

3014
01:45:52,999 --> 01:45:55,199
if these values contain

3015
01:45:55,199 --> 01:45:56,799
a C. If they contain a C,

3016
01:45:56,799 --> 01:45:58,219
we're going to
store it inside

3017
01:45:58,219 --> 01:45:59,779
this contained C array.

3018
01:45:59,779 --> 01:46:01,879
So we still have
the original array

3019
01:46:01,879 --> 01:46:03,259
that's left unchanged,

3020
01:46:03,259 --> 01:46:06,239
but we also have this
contained C array,

3021
01:46:06,239 --> 01:46:08,399
which only contains
the values that

3022
01:46:08,399 --> 01:46:11,999
contain a C. Again,
very useful.

3023
01:46:12,280 --> 01:46:15,299
We also have
join, so join can

3024
01:46:15,299 --> 01:46:17,919
be used to return an
array as a string.

3025
01:46:17,919 --> 01:46:19,259
So a bit like how we could

3026
01:46:19,259 --> 01:46:20,679
convert a string
to an array,

3027
01:46:20,679 --> 01:46:22,969
this is how we can
do the opposite.

3028
01:46:22,969 --> 01:46:25,559
So in my case, if
I wanted to turn

3029
01:46:25,559 --> 01:46:28,239
Chris Mark and Tom into
one single string,

3030
01:46:28,239 --> 01:46:30,759
all I need to do is
say name dot join,

3031
01:46:30,759 --> 01:46:32,459
and that would then become

3032
01:46:32,459 --> 01:46:36,479
the string,
Chris, Mark Tom.

3033
01:46:36,479 --> 01:46:38,339
If you wanted to,
you could actually

3034
01:46:38,339 --> 01:46:40,019
say what you wanted to
separate these from.

3035
01:46:40,019 --> 01:46:42,979
So if I wanted to say
Chris and Mark and Tom,

3036
01:46:42,979 --> 01:46:44,339
all I need to do is put

3037
01:46:44,339 --> 01:46:46,979
and in between
join just here.

3038
01:46:46,979 --> 01:46:48,499
Obviously, in this
case, I've done

3039
01:46:48,499 --> 01:46:49,499
two spaces just so they're

3040
01:46:49,499 --> 01:46:50,759
spaced out a
little bit more.

3041
01:46:50,759 --> 01:46:52,859
The idea is you can
convert an array to

3042
01:46:52,859 --> 01:46:54,139
a string or you
could convert

3043
01:46:54,139 --> 01:46:55,459
a string to an array.

3044
01:46:55,459 --> 01:46:56,999
So you can do
one way or you

3045
01:46:56,999 --> 01:46:59,609
could reverse it,
which is quite nice.

3046
01:46:59,609 --> 01:47:02,019
The next one is Index of.

3047
01:47:02,019 --> 01:47:04,659
And this is usually
to find out

3048
01:47:04,659 --> 01:47:07,839
where an index of an
array kind of lies.

3049
01:47:07,839 --> 01:47:09,679
So, in my case, I
could find out where

3050
01:47:09,679 --> 01:47:12,984
the value mark exists
inside this array.

3051
01:47:12,984 --> 01:47:15,029
Which again, very
useful finding out

3052
01:47:15,029 --> 01:47:17,789
exactly where a value
is inside of an array.

3053
01:47:17,789 --> 01:47:19,449
So in my case,
I'm going to say

3054
01:47:19,449 --> 01:47:21,249
names dot index of Mark,

3055
01:47:21,249 --> 01:47:22,669
and it's going
to tell me Mark

3056
01:47:22,669 --> 01:47:24,169
is at the index
position one,

3057
01:47:24,169 --> 01:47:25,849
because that's
where Mark is.

3058
01:47:25,849 --> 01:47:28,749
If I said names dot
index of Chris,

3059
01:47:28,749 --> 01:47:30,249
it would come
back as zero.

3060
01:47:30,249 --> 01:47:33,249
Index of Tom would
come back as two.

3061
01:47:33,610 --> 01:47:35,929
If we had Dan
right at the end,

3062
01:47:35,929 --> 01:47:37,609
it would say index
right at the end.

3063
01:47:37,609 --> 01:47:40,169
So index tells
you exactly where

3064
01:47:40,169 --> 01:47:41,549
the first instance of

3065
01:47:41,549 --> 01:47:44,609
that value exists
inside the array.

3066
01:47:45,780 --> 01:47:49,139
We can use includes
on an array as well,

3067
01:47:49,139 --> 01:47:50,879
and this will return
true or false if

3068
01:47:50,879 --> 01:47:53,059
the array contains
a specific value.

3069
01:47:53,059 --> 01:47:56,039
So, again, in my array
of Chris Mark and Tom,

3070
01:47:56,039 --> 01:47:59,919
I could say, does
names contain Chris?

3071
01:47:59,919 --> 01:48:02,599
So does names
include Chris?

3072
01:48:02,599 --> 01:48:06,139
If names include Chris,
it will return true.

3073
01:48:06,139 --> 01:48:07,819
If names didn't include

3074
01:48:07,819 --> 01:48:09,159
Chris, it will
return false.

3075
01:48:09,159 --> 01:48:09,879
So in this case,

3076
01:48:09,879 --> 01:48:11,859
when I say names
do includes John,

3077
01:48:11,859 --> 01:48:13,579
it's going to
return false.

3078
01:48:13,579 --> 01:48:15,879
So this is very useful
for checking to see

3079
01:48:15,879 --> 01:48:18,699
if a value exists
inside of an array.

3080
01:48:18,699 --> 01:48:20,839
Again, that will return
a boolean value,

3081
01:48:20,839 --> 01:48:23,299
either true or false.

3082
01:48:23,550 --> 01:48:27,149
Reverse is very,
very useful as well.

3083
01:48:27,149 --> 01:48:28,249
If you'd like to reverse

3084
01:48:28,249 --> 01:48:29,529
the order of an array,

3085
01:48:29,529 --> 01:48:30,869
you can very
simply just say

3086
01:48:30,869 --> 01:48:32,389
names dot reverse.

3087
01:48:32,389 --> 01:48:34,889
So instead of saying
Chris Mark and Tom,

3088
01:48:34,889 --> 01:48:36,729
we'll go Tom
Mark and Chris.

3089
01:48:36,729 --> 01:48:38,129
Please do be aware this

3090
01:48:38,129 --> 01:48:40,704
will overwrite the
original array.

3091
01:48:40,704 --> 01:48:43,559
Now, this is the
big one. This is

3092
01:48:43,559 --> 01:48:45,399
how we're going
to sort things.

3093
01:48:45,399 --> 01:48:47,119
So sort can be used to

3094
01:48:47,119 --> 01:48:48,940
sort an array
alphabetically.

3095
01:48:48,940 --> 01:48:50,979
So if we've got
the values,

3096
01:48:50,979 --> 01:48:53,459
John, Shawn, Chris,
Mark, Tom, and Alex,

3097
01:48:53,459 --> 01:48:55,439
if we said names dot sort,

3098
01:48:55,439 --> 01:48:56,919
it will sort them based

3099
01:48:56,919 --> 01:48:58,779
on their alphabetical
characters.

3100
01:48:58,779 --> 01:49:00,579
Hencefory we're
going to Alex,

3101
01:49:00,579 --> 01:49:02,699
Chris, John Mark
Shawn and Tom.

3102
01:49:02,699 --> 01:49:05,734
This will overwrite
the original array.

3103
01:49:05,734 --> 01:49:08,329
You can also
use two sorted,

3104
01:49:08,329 --> 01:49:09,249
which will prevent

3105
01:49:09,249 --> 01:49:11,029
that array from
being overwritten.

3106
01:49:11,029 --> 01:49:13,749
So if we said constant
sorted names,

3107
01:49:13,749 --> 01:49:16,049
we could store this
newly sorted array

3108
01:49:16,049 --> 01:49:18,969
inside of a copy of
that original array.

3109
01:49:18,969 --> 01:49:21,149
Very useful for
sorting strings.

3110
01:49:21,149 --> 01:49:22,209
But for the assignment,

3111
01:49:22,209 --> 01:49:23,830
specifically for
the leaderboard,

3112
01:49:23,830 --> 01:49:26,279
you're going to have
to sort numbers.

3113
01:49:26,279 --> 01:49:30,009
So the way we sort
numbers is similar,

3114
01:49:30,009 --> 01:49:32,369
but we do run into
a slight issue.

3115
01:49:32,369 --> 01:49:34,109
If you try and
sort numbers

3116
01:49:34,109 --> 01:49:35,789
using the sort function,

3117
01:49:35,789 --> 01:49:37,009
you're not going to get

3118
01:49:37,009 --> 01:49:39,009
the result you expect.

3119
01:49:39,009 --> 01:49:40,749
This is because SA is

3120
01:49:40,749 --> 01:49:43,329
only used to sort strings.

3121
01:49:43,329 --> 01:49:45,149
So these numbers here

3122
01:49:45,149 --> 01:49:47,529
will actually be
treated as strings.

3123
01:49:47,529 --> 01:49:49,929
Now, because 50, from

3124
01:49:49,929 --> 01:49:51,849
a string perspective
is larger than

3125
01:49:51,849 --> 01:49:54,569
1,000 because five
is larger than one,

3126
01:49:54,569 --> 01:49:57,489
50 will become
four, 1,000.

3127
01:49:57,489 --> 01:50:00,969
Sorry. You know what
I'm trying to say.

3128
01:50:00,969 --> 01:50:03,589
Essentially, it's based on

3129
01:50:03,589 --> 01:50:04,949
the first number
rather than

3130
01:50:04,949 --> 01:50:07,669
the whole number. Okay.

3131
01:50:07,980 --> 01:50:10,379
So if we wanted to sort

3132
01:50:10,379 --> 01:50:12,799
an array based on their
numerical values,

3133
01:50:12,799 --> 01:50:13,739
we have to kind of use

3134
01:50:13,739 --> 01:50:15,119
an arrow function
for this.

3135
01:50:15,119 --> 01:50:17,459
So to sort a number from
largest to smallest,

3136
01:50:17,459 --> 01:50:19,819
we'd say numbers
dot sort brackets,

3137
01:50:19,819 --> 01:50:22,879
A, com B, arrow
bracket, A minus B.

3138
01:50:22,879 --> 01:50:24,659
You're essentially
comparing the

3139
01:50:24,659 --> 01:50:26,499
smallest to the largest.

3140
01:50:26,499 --> 01:50:27,859
To go in the other way

3141
01:50:27,859 --> 01:50:29,219
round to largest
to smallest,

3142
01:50:29,219 --> 01:50:30,739
you'd say B minus A.

3143
01:50:30,739 --> 01:50:32,479
And that is how
you're going to sort

3144
01:50:32,479 --> 01:50:34,379
the high schools from
highest to lowest.

3145
01:50:34,379 --> 01:50:35,559
So you need some way of

3146
01:50:35,559 --> 01:50:37,184
reading all the
high schools.

3147
01:50:37,184 --> 01:50:38,389
You can then put it

3148
01:50:38,389 --> 01:50:39,769
through this
salt function,

3149
01:50:39,769 --> 01:50:41,989
and you can then
sort them based on

3150
01:50:41,989 --> 01:50:44,909
their high scores.
Pretty cool, right?

3151
01:50:44,909 --> 01:50:46,729
So salt function
is incredibly

3152
01:50:46,729 --> 01:50:47,889
useful for sorting things

3153
01:50:47,889 --> 01:50:48,849
from highest to lowest,

3154
01:50:48,849 --> 01:50:52,569
whether it's a string
through ABC EF G,

3155
01:50:52,569 --> 01:50:54,329
and so on, or

3156
01:50:54,329 --> 01:50:56,669
sorting them based on
their numerical values,

3157
01:50:56,669 --> 01:50:58,189
which in this
case, is using

3158
01:50:58,189 --> 01:51:00,049
a very fun arrow function.

3159
01:51:00,049 --> 01:51:01,869
So, for exercise four,

3160
01:51:01,869 --> 01:51:03,069
I would like you
to download and

3161
01:51:03,069 --> 01:51:05,314
extract the exercise
all zip file.

3162
01:51:05,314 --> 01:51:06,839
Follow the instructions in

3163
01:51:06,839 --> 01:51:07,799
the comments and try

3164
01:51:07,799 --> 01:51:09,059
editing the arrays using

3165
01:51:09,059 --> 01:51:10,779
the specified methods.

3166
01:51:10,779 --> 01:51:12,599
Make sure to print
each array to

3167
01:51:12,599 --> 01:51:14,999
the console to
see if it works.

3168
01:51:14,999 --> 01:51:17,799
Some of these methods
can be used to make

3169
01:51:17,799 --> 01:51:19,160
the leaderboard
functionality

3170
01:51:19,160 --> 01:51:20,799
considerably easier.

3171
01:51:20,799 --> 01:51:22,119
A couple of useful links

3172
01:51:22,119 --> 01:51:23,719
if you struggled
a bit today.

3173
01:51:23,719 --> 01:51:25,259
We've got a lot of

3174
01:51:25,259 --> 01:51:26,819
the string
methods on here,

3175
01:51:26,819 --> 01:51:28,759
a bit more on
functions, specifically

3176
01:51:28,759 --> 01:51:30,539
returns and arguments.

3177
01:51:30,539 --> 01:51:32,020
Then a bit more
documentation

3178
01:51:32,020 --> 01:51:33,639
on returns,
arrow functions.

3179
01:51:33,639 --> 01:51:35,239
This one is
especially useful,

3180
01:51:35,239 --> 01:51:37,459
prompt, confirm
and local storage.

3181
01:51:37,459 --> 01:51:38,679
I'd say, give a look at

3182
01:51:38,679 --> 01:51:40,419
local storage for
the assignment.

3183
01:51:40,419 --> 01:51:43,474
And the last one is
then our arrow methods.

3184
01:51:43,474 --> 01:51:45,469
So next week,

3185
01:51:45,469 --> 01:51:47,809
we're going to go over
a lot of provision,

3186
01:51:47,809 --> 01:51:49,729
as well as how to write

3187
01:51:49,729 --> 01:51:50,409
our reports in

3188
01:51:50,409 --> 01:51:52,089
the most effective
way possible.

3189
01:51:52,089 --> 01:51:54,189
Okay, so please do
turn up next week

3190
01:51:54,189 --> 01:51:55,009
because we are going to go

3191
01:51:55,009 --> 01:51:56,409
over a lot of content.

3192
01:51:56,409 --> 01:51:58,769
It's also an
opportunity for you to

3193
01:51:58,769 --> 01:51:59,909
ask me any assignment

3194
01:51:59,909 --> 01:52:01,589
questions before
the deadline.

3195
01:52:01,589 --> 01:52:03,069
Okay. So again,

3196
01:52:03,069 --> 01:52:04,329
please try and take
everything we've

3197
01:52:04,329 --> 01:52:05,709
done today and apply

3198
01:52:05,709 --> 01:52:07,189
it in some way to
your assignment.

3199
01:52:07,189 --> 01:52:08,730
That's the best
way of maximizing

3200
01:52:08,730 --> 01:52:10,394
the number of
marks you get.

3201
01:52:10,394 --> 01:52:12,859
In the end, basically.
You have to remember,

3202
01:52:12,859 --> 01:52:14,099
assignment two is worth

3203
01:52:14,099 --> 01:52:16,439
75% of your overall grade.

3204
01:52:16,439 --> 01:52:19,479
So it is very,
very important.

3205
01:52:19,479 --> 01:52:20,759
So again, if you didn't do

3206
01:52:20,759 --> 01:52:21,999
too well on the
first assignment,

3207
01:52:21,999 --> 01:52:23,979
you can more than make
up for it on this one.

3208
01:52:23,979 --> 01:52:26,620
Okay. So please
do the exercises.

3209
01:52:26,620 --> 01:52:27,359
It's the best way

3210
01:52:27,359 --> 01:52:28,099
you're going to
be learning.

3211
01:52:28,099 --> 01:52:28,899
I guarantee.

3212
01:52:28,899 --> 01:52:30,240
If you do the exercises,

3213
01:52:30,240 --> 01:52:33,019
you'll pretty much get

3214
01:52:33,019 --> 01:52:35,799
I can always guarantee
a passing grade.

3215
01:52:35,799 --> 01:52:38,039
Pretty much.
Not even that,

3216
01:52:38,039 --> 01:52:39,219
probably a good
grade, as well.

3217
01:52:39,219 --> 01:52:40,639
But you do every
single exercise,

3218
01:52:40,639 --> 01:52:41,699
and you really, really

3219
01:52:41,699 --> 01:52:43,039
kind of throw
yourself into it.

3220
01:52:43,039 --> 01:52:44,799
Realistically,
you'd be hard

3221
01:52:44,799 --> 01:52:46,839
pressed not to get
an A, I would say.

3222
01:52:46,839 --> 01:52:48,199
Every exercise is

3223
01:52:48,199 --> 01:52:49,819
specifically
designed to tackle

3224
01:52:49,819 --> 01:52:51,159
a certain requirement in

3225
01:52:51,159 --> 01:52:53,859
the assignment. So
please do them.

3226
01:52:53,859 --> 01:52:55,619
But yeah, hopefully
I'll see everyone

3227
01:52:55,619 --> 01:52:57,799
either this week
or next week.

3228
01:52:57,799 --> 01:53:02,799
If I don't, have a
good week, Okay? See.