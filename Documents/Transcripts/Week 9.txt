1
00:00:00,000 --> 00:00:02,360
All right, welcome
to week nine.

2
00:00:02,360 --> 00:00:03,900
This week is
our last week.

3
00:00:03,900 --> 00:00:05,060
Before we break
for Easter,

4
00:00:05,060 --> 00:00:06,540
we are throwing
in quite a lot

5
00:00:06,540 --> 00:00:08,400
of material into this one.

6
00:00:08,400 --> 00:00:10,799
Just prepare
yourself on that.

7
00:00:10,799 --> 00:00:12,240
Specifically,
we're going to be

8
00:00:12,240 --> 00:00:14,159
recapping
Javascript events.

9
00:00:14,159 --> 00:00:16,300
So remember from last
week we looked at

10
00:00:16,300 --> 00:00:18,440
dom content loaded
and click events.

11
00:00:18,440 --> 00:00:20,419
So the idea is we can
trigger a certain piece

12
00:00:20,419 --> 00:00:22,980
of code to run when
something happens.

13
00:00:22,980 --> 00:00:24,779
We're then going to
look at applying

14
00:00:24,779 --> 00:00:25,899
CSS properties and

15
00:00:25,899 --> 00:00:27,919
classes to
Javascript elements.

16
00:00:27,919 --> 00:00:29,280
So the idea is
we can select

17
00:00:29,280 --> 00:00:31,060
an element in our HTML,

18
00:00:31,060 --> 00:00:33,600
for example the Start
button in the game.

19
00:00:33,600 --> 00:00:36,590
Or we can get a H one
tag or a H two tag.

20
00:00:36,590 --> 00:00:39,919
Then we can apply
certain pieces of CSS.

21
00:00:39,919 --> 00:00:41,560
The nice thing
is we could also

22
00:00:41,560 --> 00:00:43,119
pair this up with
those events.

23
00:00:43,119 --> 00:00:46,559
We can apply that CSS
when something happens,

24
00:00:46,559 --> 00:00:49,320
we're going to look at
strings to numbers.

25
00:00:49,320 --> 00:00:50,620
The idea is we can convert

26
00:00:50,620 --> 00:00:54,360
a string data type to
a number data type,

27
00:00:54,360 --> 00:00:56,739
which is just a
big concept in

28
00:00:56,739 --> 00:00:57,659
programming that you need

29
00:00:57,659 --> 00:00:59,720
to know Moving forward,

30
00:00:59,720 --> 00:01:01,519
we're going to
look at intervals.

31
00:01:01,519 --> 00:01:02,920
This is the idea of adding

32
00:01:02,920 --> 00:01:04,019
timers to our code so

33
00:01:04,019 --> 00:01:04,979
we can trigger something

34
00:01:04,979 --> 00:01:07,030
again and again and again.

35
00:01:07,030 --> 00:01:10,220
But then the big
part for today is

36
00:01:10,220 --> 00:01:11,519
we're going to
focus on moving

37
00:01:11,519 --> 00:01:13,180
elements around
our screen.

38
00:01:13,180 --> 00:01:15,319
The exercise I'm going
to get to do is moving

39
00:01:15,319 --> 00:01:17,899
a circle around the
screen using the rakes.

40
00:01:17,899 --> 00:01:19,439
Very similarly
to how we've

41
00:01:19,439 --> 00:01:21,420
done the second
assignment code.

42
00:01:21,420 --> 00:01:23,159
The big part for that
is we're learning

43
00:01:23,159 --> 00:01:25,460
about key up and key down.

44
00:01:25,460 --> 00:01:28,820
Key up and key down
events in Javascript.

45
00:01:28,820 --> 00:01:30,220
This will pair off quite

46
00:01:30,220 --> 00:01:31,759
nicely with if statements.

47
00:01:31,759 --> 00:01:33,020
We can control when a

48
00:01:33,020 --> 00:01:34,240
piece of code
should trigger.

49
00:01:34,240 --> 00:01:36,360
We can add some
logic to that.

50
00:01:36,360 --> 00:01:38,580
I'll show you a few
different variations

51
00:01:38,580 --> 00:01:40,920
of if statements that
we can use as well.

52
00:01:40,920 --> 00:01:43,379
We'll then look at
global variables.

53
00:01:43,379 --> 00:01:44,900
And the last
one is finding

54
00:01:44,900 --> 00:01:46,259
elements by class name.

55
00:01:46,259 --> 00:01:47,339
Last week we looked at

56
00:01:47,339 --> 00:01:48,659
finding elements by ID's.

57
00:01:48,659 --> 00:01:50,879
And ID's were fantastic,
They're unique.

58
00:01:50,879 --> 00:01:52,239
We're always going
to bring back

59
00:01:52,239 --> 00:01:54,400
one thing when
we use ID's.

60
00:01:54,400 --> 00:01:56,199
The difference
with class names

61
00:01:56,199 --> 00:01:57,660
is multiple
elements can have

62
00:01:57,660 --> 00:01:59,780
the same class names

63
00:01:59,780 --> 00:02:01,920
a chance we can bring
multiple things back.

64
00:02:01,920 --> 00:02:03,280
And if that's the
case, we need

65
00:02:03,280 --> 00:02:05,039
to treat it in
a certain way.

66
00:02:05,039 --> 00:02:06,740
That's really what
we're setting

67
00:02:06,740 --> 00:02:08,440
out to do this week,

68
00:02:08,440 --> 00:02:10,179
probably one of
the biggest up

69
00:02:10,179 --> 00:02:12,220
Javascript lectures
we've got.

70
00:02:12,220 --> 00:02:15,600
Prepare yourself
on that one. Okay,

71
00:02:16,010 --> 00:02:18,229
as a bit of a recap, we

72
00:02:18,229 --> 00:02:20,309
looked at event
listeners last week.

73
00:02:20,309 --> 00:02:21,830
Add event listener
is a very

74
00:02:21,830 --> 00:02:23,569
useful function
for us to use.

75
00:02:23,569 --> 00:02:24,949
It essentially
allows us to

76
00:02:24,949 --> 00:02:26,649
run a specific
piece of code,

77
00:02:26,649 --> 00:02:28,089
run a function when

78
00:02:28,089 --> 00:02:30,649
an event occurs,
for example.

79
00:02:30,649 --> 00:02:32,650
It could be when we
click on the page,

80
00:02:32,650 --> 00:02:34,290
there are tons
more events.

81
00:02:34,290 --> 00:02:36,009
There's quite a
nice one called,

82
00:02:36,009 --> 00:02:38,909
I think it's called
Mouseenter Mouseleave.

83
00:02:38,909 --> 00:02:40,910
It allows us to
trigger things when

84
00:02:40,910 --> 00:02:43,130
our mouse cursor hovers
over certain items,

85
00:02:43,130 --> 00:02:46,580
very similar to the
hover selector in CSS.

86
00:02:46,580 --> 00:02:48,949
But I just realized

87
00:02:48,949 --> 00:02:50,790
I've got it stated
just on the slide,

88
00:02:50,790 --> 00:02:52,170
mouse over and mouse

89
00:02:52,170 --> 00:02:53,749
out is the one
I'm thinking of.

90
00:02:53,749 --> 00:02:55,570
But quite a few
fun events,

91
00:02:55,570 --> 00:02:57,209
we can use our
click mouse over,

92
00:02:57,209 --> 00:02:58,670
mouse out keyboard events,

93
00:02:58,670 --> 00:03:00,409
which we'll look
at a bit later on.

94
00:03:00,409 --> 00:03:02,510
Dom content loaded,
which is very

95
00:03:02,510 --> 00:03:04,769
similar to defer that
we used last week.

96
00:03:04,769 --> 00:03:06,209
There's even
certain events for

97
00:03:06,209 --> 00:03:07,930
resizing our browser and

98
00:03:07,930 --> 00:03:09,209
scrolling up and down,

99
00:03:09,209 --> 00:03:11,309
so we can have a
lot of control over

100
00:03:11,309 --> 00:03:12,670
the different things
that happen throughout

101
00:03:12,670 --> 00:03:15,150
our Java script,
which is quite fun.

102
00:03:15,180 --> 00:03:17,520
But in last
week's exercise,

103
00:03:17,520 --> 00:03:19,940
we looked at click events

104
00:03:20,220 --> 00:03:23,740
when we said document
advent listener click.

105
00:03:23,740 --> 00:03:25,640
And then we ran that
change heading function.

106
00:03:25,640 --> 00:03:27,479
We had those two
HT mail elements.

107
00:03:27,479 --> 00:03:28,899
We have the H one tag and

108
00:03:28,899 --> 00:03:31,379
the tag we clicked
somewhere on the screen,

109
00:03:31,379 --> 00:03:32,680
and that then ran our

110
00:03:32,680 --> 00:03:36,140
code for those elements.

111
00:03:36,140 --> 00:03:39,300
That makes sense. If I

112
00:03:39,300 --> 00:03:42,119
just show you the
exercise from last week,

113
00:03:42,119 --> 00:03:43,320
just so everyone's
completely

114
00:03:43,320 --> 00:03:44,120
on the same page.

115
00:03:44,120 --> 00:03:45,959
We have our index, Html.

116
00:03:45,959 --> 00:03:47,219
I'll zoom in a bit so it's

117
00:03:47,219 --> 00:03:49,380
a bit clearer in
the recording.

118
00:03:49,690 --> 00:03:51,730
The first thing
we need to do is

119
00:03:51,730 --> 00:03:52,949
link up our script tag.

120
00:03:52,949 --> 00:03:54,810
So we're going
to use script,

121
00:03:54,810 --> 00:03:57,470
we'll just say scripts.

122
00:03:57,470 --> 00:03:59,689
We need to include the
defer attribute in

123
00:03:59,689 --> 00:04:00,870
this just so we
can interact

124
00:04:00,870 --> 00:04:02,710
with our Html elements.

125
00:04:02,710 --> 00:04:05,169
We're then going to
have our H one tag,

126
00:04:05,169 --> 00:04:07,850
in this case we'll
just say heading.

127
00:04:07,930 --> 00:04:11,450
We'll have a tag
with some lorumext.

128
00:04:11,450 --> 00:04:12,889
Again, lorum is just that

129
00:04:12,889 --> 00:04:14,330
placeholder text
we can use.

130
00:04:14,330 --> 00:04:15,649
If we just need a piece of

131
00:04:15,649 --> 00:04:17,489
text, it's very useful.

132
00:04:17,489 --> 00:04:19,749
We'll then add an
ID to this heading,

133
00:04:19,749 --> 00:04:24,810
so we'll just say
heading under this tag

134
00:04:26,400 --> 00:04:30,819
paragraph, nice and easy.

135
00:04:30,819 --> 00:04:33,059
We'll then create
that script Js

136
00:04:33,059 --> 00:04:37,279
file scripts.

137
00:04:37,279 --> 00:04:38,739
And we'll just put

138
00:04:38,739 --> 00:04:39,860
an alert in here
just to make

139
00:04:39,860 --> 00:04:42,759
sure everything is all
working correctly.

140
00:04:42,980 --> 00:04:46,140
A bit of text in there
just to say Linked up.

141
00:04:46,140 --> 00:04:47,059
The idea is we run

142
00:04:47,059 --> 00:04:48,060
this and we can
tell it's all

143
00:04:48,060 --> 00:04:51,380
linked up correctly.
We'll just open this.

144
00:04:51,380 --> 00:04:53,559
This is opened
in the browser,

145
00:04:53,559 --> 00:04:54,479
and it's clearly said

146
00:04:54,479 --> 00:04:55,919
linked up, like L. Okay?

147
00:04:55,919 --> 00:04:58,640
And we'll go our H
one tag and ourP tag.

148
00:04:58,640 --> 00:05:00,739
The solution for
last week's exercise

149
00:05:00,739 --> 00:05:04,120
was creating a
new function.

150
00:05:04,120 --> 00:05:05,699
Again, using the
function keyword.

151
00:05:05,699 --> 00:05:09,139
We'll say function, we'll
say change heading.

152
00:05:09,650 --> 00:05:12,549
We need to find
that H one tag,

153
00:05:12,549 --> 00:05:15,230
we just

154
00:05:15,230 --> 00:05:16,610
add something about
that, that's not good.

155
00:05:16,610 --> 00:05:18,589
We'll say maybe say one in

156
00:05:18,589 --> 00:05:21,969
this case equals
document query selector.

157
00:05:21,969 --> 00:05:24,089
Then we'll use
hashtag heading.

158
00:05:24,089 --> 00:05:26,229
Again, hashtags
are for ID's.

159
00:05:26,229 --> 00:05:28,509
We can then say one first

160
00:05:28,509 --> 00:05:33,049
child node value equals

161
00:05:33,049 --> 00:05:36,749
changed heading.

162
00:05:36,749 --> 00:05:39,369
We can then add
that click event

163
00:05:39,369 --> 00:05:44,129
onto document.

164
00:05:44,129 --> 00:05:46,860
It then triggers
this function.

165
00:05:46,860 --> 00:05:49,570
When we click somewhere
on the screen,

166
00:05:49,570 --> 00:05:51,970
loading is back up
into the browser.

167
00:05:51,970 --> 00:05:53,169
Click refresh.

168
00:05:53,169 --> 00:05:54,950
If I click anywhere
on this document,

169
00:05:54,950 --> 00:05:56,929
that heading will change.

170
00:05:56,929 --> 00:05:58,949
When we use
document to advent

171
00:05:58,949 --> 00:06:00,529
listener, it's
essentially saying,

172
00:06:00,529 --> 00:06:02,409
if we click anywhere
on the screen,

173
00:06:02,409 --> 00:06:05,189
run that piece of code,
run this function.

174
00:06:05,189 --> 00:06:06,790
This is a function name.

175
00:06:06,790 --> 00:06:08,270
If I were to
misspell this,

176
00:06:08,270 --> 00:06:10,630
let's say my function
didn't have the in it.

177
00:06:10,630 --> 00:06:12,270
This then turns blue and

178
00:06:12,270 --> 00:06:14,050
has these three
dots under it.

179
00:06:14,050 --> 00:06:15,809
Those three dots
just signify,

180
00:06:15,809 --> 00:06:17,949
that's not really a
thing at this point.

181
00:06:17,949 --> 00:06:19,330
Actually, over
over it will

182
00:06:19,330 --> 00:06:20,829
say could not find
the change heading.

183
00:06:20,829 --> 00:06:22,529
Did you mean it'll
actually recommend

184
00:06:22,529 --> 00:06:25,285
the fix for you
which is quite nice.

185
00:06:25,285 --> 00:06:27,039
Again, get very used to

186
00:06:27,039 --> 00:06:29,259
looking at these
color codes.

187
00:06:29,540 --> 00:06:32,260
That was document
do advent listener.

188
00:06:32,260 --> 00:06:33,739
But if we wanted
to add that ad

189
00:06:33,739 --> 00:06:35,779
advent listener to
a specific element,

190
00:06:35,779 --> 00:06:38,720
instead of using document
do advent listener,

191
00:06:38,720 --> 00:06:40,280
we would actually just use

192
00:06:40,280 --> 00:06:41,779
heading advent listener

193
00:06:41,779 --> 00:06:42,960
or the element
we're looking

194
00:06:42,960 --> 00:06:45,459
to target advent listener.

195
00:06:45,459 --> 00:06:48,699
If we make that
very small change,

196
00:06:48,740 --> 00:06:52,100
we just take this
outside this function,

197
00:06:52,100 --> 00:06:56,020
put it up here, and
change this to H one.

198
00:06:58,860 --> 00:07:01,159
We now have made
it so if we click

199
00:07:01,159 --> 00:07:03,120
somewhere on the document,
nothing happens.

200
00:07:03,120 --> 00:07:06,279
But if we then just
click on that H one tag,

201
00:07:06,279 --> 00:07:08,599
it will then chat on
that piece of code.

202
00:07:08,599 --> 00:07:10,080
We're completely
able to put

203
00:07:10,080 --> 00:07:11,980
these event listeners on

204
00:07:11,980 --> 00:07:13,399
to specific elements.

205
00:07:13,399 --> 00:07:15,219
In this case, it's
just going to update

206
00:07:15,219 --> 00:07:16,360
that H one tag when

207
00:07:16,360 --> 00:07:17,900
we click on
that H one tag.

208
00:07:17,900 --> 00:07:21,060
Which is pretty
cool. That was

209
00:07:21,060 --> 00:07:23,145
the big learning
point of last week.

210
00:07:23,145 --> 00:07:25,769
The extension to that
exercise was adding

211
00:07:25,769 --> 00:07:27,049
two different
event listeners

212
00:07:27,049 --> 00:07:28,510
for two different
elements.

213
00:07:28,510 --> 00:07:30,470
If you remember the
exercise from last week,

214
00:07:30,470 --> 00:07:32,269
it said if you click
on the H one tag,

215
00:07:32,269 --> 00:07:34,610
it changes the content
in the H one tag.

216
00:07:34,610 --> 00:07:37,229
If you click on the
paragraph tag or the tag,

217
00:07:37,229 --> 00:07:38,390
it will change the content

218
00:07:38,390 --> 00:07:39,389
and the paragraph tag.

219
00:07:39,389 --> 00:07:41,070
They both do
different things.

220
00:07:41,070 --> 00:07:42,850
The really easy
solution to this,

221
00:07:42,850 --> 00:07:44,949
where was we find
the H one tag,

222
00:07:44,949 --> 00:07:46,470
we find the paragraph tag.

223
00:07:46,470 --> 00:07:48,049
We have two
separate functions,

224
00:07:48,049 --> 00:07:49,369
one that changes
the heading

225
00:07:49,369 --> 00:07:51,410
and one that changes
the paragraph.

226
00:07:51,410 --> 00:07:53,070
Then we add the
add event listener

227
00:07:53,070 --> 00:07:54,009
to each of those elements.

228
00:07:54,009 --> 00:07:55,270
Essentially, we're
doing exactly what

229
00:07:55,270 --> 00:07:56,549
we did for that H one tag,

230
00:07:56,549 --> 00:07:57,789
but we're also
doing it to the

231
00:07:57,789 --> 00:07:59,550
paragraph tag as well.

232
00:07:59,550 --> 00:08:02,709
If we make that small
change to our code,

233
00:08:03,240 --> 00:08:05,580
we find the paragraph tag,

234
00:08:05,580 --> 00:08:08,779
let P equals document
query selector,

235
00:08:08,779 --> 00:08:11,580
hashtag graph.

236
00:08:11,580 --> 00:08:12,740
I'm notorious

237
00:08:12,740 --> 00:08:13,859
for spelling things
incorrectly,

238
00:08:13,859 --> 00:08:14,960
so I'm just going
to triple check.

239
00:08:14,960 --> 00:08:16,519
I spell that correctly.

240
00:08:16,519 --> 00:08:18,499
Spelling will always
get you when it

241
00:08:18,499 --> 00:08:20,459
comes to this stuff,
it's very annoying.

242
00:08:20,459 --> 00:08:22,440
We'll then say function,

243
00:08:22,440 --> 00:08:24,820
but again, make she spell
function correctly.

244
00:08:24,820 --> 00:08:27,019
So get very used to
looking at those colors.

245
00:08:27,019 --> 00:08:32,919
Change. I guess we
can type in paragraph

246
00:08:33,300 --> 00:08:35,900
again, I'm terrible
with spelling.

247
00:08:35,900 --> 00:08:37,580
Just go with it that's

248
00:08:37,580 --> 00:08:39,419
already telling me that
spell incorrectly.

249
00:08:39,419 --> 00:08:41,999
That's fun. Thank you.

250
00:08:41,999 --> 00:08:51,899
Well then say first
child node value equals

251
00:08:52,300 --> 00:08:58,120
changed paragraph.

252
00:08:58,120 --> 00:09:00,819
Like then we just add

253
00:09:00,819 --> 00:09:02,539
the Adaventlistener
onto this

254
00:09:02,539 --> 00:09:05,619
do advent listener, click

255
00:09:06,360 --> 00:09:10,019
Change Paragraph, and that

256
00:09:10,019 --> 00:09:12,040
is the solution to
last week's exercise.

257
00:09:12,040 --> 00:09:12,960
Essentially we're having

258
00:09:12,960 --> 00:09:14,419
two different
event listeners,

259
00:09:14,419 --> 00:09:16,359
two different
functions that

260
00:09:16,359 --> 00:09:18,580
both do something
slightly different.

261
00:09:18,580 --> 00:09:20,940
Click anywhere,
nothing happens if I

262
00:09:20,940 --> 00:09:23,039
just click on this
P tag that changes.

263
00:09:23,039 --> 00:09:25,380
If I just click on
this one tag that then

264
00:09:25,380 --> 00:09:26,680
changes two

265
00:09:26,680 --> 00:09:28,419
separate event
listeners onto this.

266
00:09:28,419 --> 00:09:30,660
Pretty cool, right? So if

267
00:09:30,660 --> 00:09:32,140
you are struggling a
bit with that content,

268
00:09:32,140 --> 00:09:34,119
I do recommend
looking back over at

269
00:09:34,119 --> 00:09:35,359
week eight to the

270
00:09:35,359 --> 00:09:37,060
previous week
just because I'm

271
00:09:37,060 --> 00:09:38,220
expecting
everyone to be at

272
00:09:38,220 --> 00:09:40,319
this stage at
this point, okay?

273
00:09:40,319 --> 00:09:41,600
If you are struggling,

274
00:09:41,600 --> 00:09:43,300
that's absolutely fine.

275
00:09:43,300 --> 00:09:46,559
Javascript is a lot
more complex than H2lc.

276
00:09:46,559 --> 00:09:48,199
Assess You've
got to remember,

277
00:09:48,199 --> 00:09:51,614
this assignment is worth
75% of your grade.

278
00:09:51,614 --> 00:09:54,529
It's not going to
be easy, it's going

279
00:09:54,529 --> 00:09:55,809
to be significantly harder

280
00:09:55,809 --> 00:09:56,970
than the first assignment.

281
00:09:56,970 --> 00:09:58,170
It has to be, otherwise,

282
00:09:58,170 --> 00:09:59,230
there's no point in having

283
00:09:59,230 --> 00:10:00,850
that weighting
be that high.

284
00:10:00,850 --> 00:10:02,249
If you are struggling with

285
00:10:02,249 --> 00:10:04,470
this, again, it's fine.

286
00:10:04,470 --> 00:10:06,709
You just need to put
some more work into it,

287
00:10:06,709 --> 00:10:08,549
find out the best way

288
00:10:08,549 --> 00:10:10,449
that this makes
sense to you.

289
00:10:10,449 --> 00:10:12,270
What I mean by that
is I quite like

290
00:10:12,270 --> 00:10:14,309
adding spaces for me,

291
00:10:14,309 --> 00:10:15,869
I've got two
separate pieces of

292
00:10:15,869 --> 00:10:18,389
functionality here
doing something for H,

293
00:10:18,389 --> 00:10:20,530
one tag, I'm doing
something to the tag.

294
00:10:20,530 --> 00:10:22,510
I like separating this
with a bit of space.

295
00:10:22,510 --> 00:10:23,169
You might want to

296
00:10:23,169 --> 00:10:24,830
separate it with
some comments.

297
00:10:24,830 --> 00:10:26,329
We can do
comments by doing

298
00:10:26,329 --> 00:10:29,629
two slashes in Java
script, so we could say.

299
00:10:30,420 --> 00:10:35,080
Changing the
paragraph code.

300
00:10:35,080 --> 00:10:37,399
Boy, I am just not
doing very well with

301
00:10:37,399 --> 00:10:38,900
spelling the word
paragraph today.

302
00:10:38,900 --> 00:10:39,980
It's very fun.

303
00:10:39,980 --> 00:10:41,759
I've just downloaded this

304
00:10:41,759 --> 00:10:43,020
spell check extension,

305
00:10:43,020 --> 00:10:44,379
which I do recommend
for all of you.

306
00:10:44,379 --> 00:10:45,659
It's quite a good one.

307
00:10:45,659 --> 00:10:47,099
If you're a thing like me,

308
00:10:47,099 --> 00:10:48,719
I am awful at this.

309
00:10:48,719 --> 00:10:52,269
We can then say
changing heading

310
00:10:52,269 --> 00:10:54,860
code again, just separates

311
00:10:54,860 --> 00:10:56,239
it in a way that
makes sense to you.

312
00:10:56,239 --> 00:10:59,259
If you find making tons
and tons of comments,

313
00:10:59,259 --> 00:11:01,160
it makes it a little
bit easier to

314
00:11:01,160 --> 00:11:03,439
learn. Absolutely do that.

315
00:11:03,439 --> 00:11:06,020
We all code in slightly
different ways

316
00:11:06,020 --> 00:11:06,979
and it's good to

317
00:11:06,979 --> 00:11:08,499
identify the way that
makes sense to you.

318
00:11:08,499 --> 00:11:09,800
If you like spacing
things out,

319
00:11:09,800 --> 00:11:11,899
like me do that.

320
00:11:11,899 --> 00:11:13,000
Whatever reason,

321
00:11:13,000 --> 00:11:14,079
like having these
brackets on

322
00:11:14,079 --> 00:11:15,120
separate lines
because you think

323
00:11:15,120 --> 00:11:16,220
it looks a bit neater.

324
00:11:16,220 --> 00:11:17,440
Yeah, it's very clear

325
00:11:17,440 --> 00:11:19,120
that belongs to
that function,

326
00:11:19,120 --> 00:11:21,739
that you don't get
marked down for it.

327
00:11:21,739 --> 00:11:23,179
Again, we're
more focused on

328
00:11:23,179 --> 00:11:26,440
the output on this
assignment, okay?

329
00:11:26,740 --> 00:11:28,359
But if you're going to

330
00:11:28,359 --> 00:11:29,359
take any think
away from this,

331
00:11:29,359 --> 00:11:30,699
just remember if you
are finding this

332
00:11:30,699 --> 00:11:32,580
challenging at this
stage, that's fine.

333
00:11:32,580 --> 00:11:34,139
Especially after
today. I'm going to

334
00:11:34,139 --> 00:11:35,019
throw an awful lot of

335
00:11:35,019 --> 00:11:36,680
information at you today.

336
00:11:36,680 --> 00:11:38,660
Learn it at your own pace.

337
00:11:38,660 --> 00:11:40,859
You've got two weeks
off after this.

338
00:11:40,859 --> 00:11:41,579
Now,

339
00:11:41,579 --> 00:11:42,900
I've deliberately
thrown quite

340
00:11:42,900 --> 00:11:43,599
a lot at you in

341
00:11:43,599 --> 00:11:45,600
this lecture because

342
00:11:45,600 --> 00:11:46,839
you've got two weeks off,

343
00:11:46,839 --> 00:11:49,279
it's two weeks
to recuperate

344
00:11:49,279 --> 00:11:52,360
and go over all the
content we've looked at.

345
00:11:52,360 --> 00:11:56,359
Okay, the next part
we're going to focus on,

346
00:11:56,359 --> 00:11:56,620
this is

347
00:11:56,620 --> 00:11:58,300
the brand new content
for this lecture,

348
00:11:58,300 --> 00:12:00,139
we've had enough of the
recap from last week.

349
00:12:00,139 --> 00:12:02,559
We're going to focus
on adding CSS to

350
00:12:02,559 --> 00:12:05,459
our Java script to

351
00:12:05,459 --> 00:12:07,699
add CSS properties
on two elements.

352
00:12:07,699 --> 00:12:09,360
It's actually quite easy.

353
00:12:09,360 --> 00:12:10,819
The first thing
we need is to

354
00:12:10,819 --> 00:12:12,279
select the element
in question.

355
00:12:12,279 --> 00:12:13,859
We need select
the H one tag,

356
00:12:13,859 --> 00:12:15,800
or we select that
paragraph tag.

357
00:12:15,800 --> 00:12:17,540
Once we have that element,

358
00:12:17,540 --> 00:12:20,270
we then use the
style property,

359
00:12:20,270 --> 00:12:22,479
or the style variable,

360
00:12:22,479 --> 00:12:25,080
I should say
element do style,

361
00:12:25,080 --> 00:12:27,180
then the CSS property
would like to use.

362
00:12:27,180 --> 00:12:28,339
So that could be color,

363
00:12:28,339 --> 00:12:30,740
or background color,
or width, or height.

364
00:12:30,740 --> 00:12:32,160
The idea is
this can be any

365
00:12:32,160 --> 00:12:33,799
CSS property we like,

366
00:12:33,799 --> 00:12:36,120
the equal sign and
then the value

367
00:12:36,120 --> 00:12:37,480
for that CSS property,

368
00:12:37,480 --> 00:12:39,440
if we wanted to change
the background color,

369
00:12:39,440 --> 00:12:40,560
it would be H,

370
00:12:40,560 --> 00:12:43,820
one style background
color equals,

371
00:12:43,820 --> 00:12:45,780
and then the color, which
could be red, blue,

372
00:12:45,780 --> 00:12:48,694
or hexadecimal,
or an RGB value.

373
00:12:48,694 --> 00:12:50,189
We can even set

374
00:12:50,189 --> 00:12:51,570
the width and
heights of elements.

375
00:12:51,570 --> 00:12:52,649
We just need to
make sure we're

376
00:12:52,649 --> 00:12:53,689
including the unit of

377
00:12:53,689 --> 00:12:55,249
measurement in
there as well.

378
00:12:55,249 --> 00:12:57,370
In our case, we're
doing 50 pixels.

379
00:12:57,370 --> 00:12:58,649
But we could do
EM, we could

380
00:12:58,649 --> 00:13:00,650
do viewport height
percentage.

381
00:13:00,650 --> 00:13:02,169
It's really up to us.

382
00:13:02,169 --> 00:13:03,850
But doing the color
is really easy.

383
00:13:03,850 --> 00:13:05,510
We just say
style dot color

384
00:13:05,510 --> 00:13:07,814
equals and then the color.

385
00:13:07,814 --> 00:13:10,440
Now there is one
small change

386
00:13:10,440 --> 00:13:12,819
from standard CSS
to Javascript.

387
00:13:12,819 --> 00:13:14,819
The names can be
slightly different.

388
00:13:14,819 --> 00:13:18,199
Sometimes some CSS
properties have

389
00:13:18,199 --> 00:13:19,739
a in them or a

390
00:13:19,739 --> 00:13:22,540
hyphen as the proper
symbol is called.

391
00:13:22,540 --> 00:13:24,260
For example,
background hyphen,

392
00:13:24,260 --> 00:13:25,780
color or border hyphen,

393
00:13:25,780 --> 00:13:28,300
radius, font,
hyphen family.

394
00:13:28,300 --> 00:13:31,050
In Javascript we
don't do the hyphen.

395
00:13:31,050 --> 00:13:33,800
Instead we use something
called camel case.

396
00:13:33,800 --> 00:13:37,399
It's where you capitalize
the second letter.

397
00:13:37,399 --> 00:13:40,239
In our case, instead
of background color,

398
00:13:40,239 --> 00:13:41,679
it's the word background.

399
00:13:41,679 --> 00:13:44,079
Then an upper
case for color,

400
00:13:44,079 --> 00:13:46,560
you're capitalizing
that second word.

401
00:13:46,560 --> 00:13:48,480
It's just because we
can't have dashes at

402
00:13:48,480 --> 00:13:49,780
this point in Java script,

403
00:13:49,780 --> 00:13:50,980
if that makes sense.

404
00:13:50,980 --> 00:13:52,500
But other than
that, that's

405
00:13:52,500 --> 00:13:54,440
the main change
we need to make.

406
00:13:54,440 --> 00:13:56,359
Any CSS property
where there's a ah,

407
00:13:56,359 --> 00:13:57,940
we just use camel case,

408
00:13:57,940 --> 00:13:59,960
we can essentially do
this at any point.

409
00:13:59,960 --> 00:14:01,220
We could do it
to click events,

410
00:14:01,220 --> 00:14:02,740
we could do it,

411
00:14:02,740 --> 00:14:05,239
I really any
events we like,

412
00:14:05,239 --> 00:14:07,699
it's awesome giving you

413
00:14:07,699 --> 00:14:09,980
a few more
specific examples.

414
00:14:09,980 --> 00:14:12,439
This piece of
Javascript code here is

415
00:14:12,439 --> 00:14:14,120
essentially the
exact same piece

416
00:14:14,120 --> 00:14:16,220
of CSS from this point.

417
00:14:16,220 --> 00:14:18,180
Changing the background
color to green,

418
00:14:18,180 --> 00:14:19,740
border radius
to 50 pixels,

419
00:14:19,740 --> 00:14:21,400
font family to bandana.

420
00:14:21,400 --> 00:14:23,360
Changing the height
to 50 pixels.

421
00:14:23,360 --> 00:14:24,820
Again, trying not
to use pixels,

422
00:14:24,820 --> 00:14:26,879
it's not a fantastic
unit of measurement,

423
00:14:26,879 --> 00:14:29,340
but essentially these
are exactly the same.

424
00:14:29,340 --> 00:14:29,979
Just one of them is

425
00:14:29,979 --> 00:14:31,059
doing it through
Javascript

426
00:14:31,059 --> 00:14:33,640
and one of its doing
it through CSS.

427
00:14:33,640 --> 00:14:35,520
So going back to our code,

428
00:14:35,520 --> 00:14:37,679
we can actually modify
this quite a bit more.

429
00:14:37,679 --> 00:14:39,099
Now I wanted to, I could

430
00:14:39,099 --> 00:14:40,640
change this H one's
background color.

431
00:14:40,640 --> 00:14:43,439
I could say H one style.

432
00:14:43,439 --> 00:14:46,899
Sometimes you do
get that style.

433
00:14:47,180 --> 00:14:53,360
Background color
equals, let's say red.

434
00:14:53,360 --> 00:14:55,320
We could even
change this once.

435
00:14:55,320 --> 00:14:57,859
We could say style,

436
00:14:57,859 --> 00:15:04,199
do we go for Color
will be a nice color.

437
00:15:04,199 --> 00:15:06,200
Big, striking
red. I like red.

438
00:15:06,200 --> 00:15:08,484
We'll keep it with
red. Why not?

439
00:15:08,484 --> 00:15:13,450
By doing this, what we
can actually do is add

440
00:15:13,450 --> 00:15:15,469
a bit more code that
does something when we

441
00:15:15,469 --> 00:15:18,250
click on these cooler.

442
00:15:18,250 --> 00:15:20,290
Right now, we're
actually adding

443
00:15:20,290 --> 00:15:23,309
bits of CSS when we
click on these elements.

444
00:15:23,309 --> 00:15:25,230
If I wanted to, I
could completely

445
00:15:25,230 --> 00:15:26,110
hide this element by

446
00:15:26,110 --> 00:15:27,130
using the display
property.

447
00:15:27,130 --> 00:15:34,590
So I could say one style
display equals none.

448
00:15:35,750 --> 00:15:38,029
Now if I were to
click on this

449
00:15:38,029 --> 00:15:40,494
one tag, it disappears.

450
00:15:40,494 --> 00:15:42,540
Now if you were
in the face

451
00:15:42,540 --> 00:15:44,039
to face classes last week,

452
00:15:44,039 --> 00:15:45,200
I actually showed
you a bit of

453
00:15:45,200 --> 00:15:47,720
this functionality
for the Start button.

454
00:15:48,080 --> 00:15:50,160
If you weren't in
the face to face

455
00:15:50,160 --> 00:15:52,779
glasses, you should be.

456
00:15:52,779 --> 00:15:55,239
This is how you would
do the Start button.

457
00:15:55,239 --> 00:15:56,439
You'd find the
Start button,

458
00:15:56,439 --> 00:15:57,739
you add a click
event to it,

459
00:15:57,739 --> 00:15:58,879
and then you'd
add the display

460
00:15:58,879 --> 00:16:00,559
none property to
that Start button.

461
00:16:00,559 --> 00:16:01,840
That would then
remove the Start

462
00:16:01,840 --> 00:16:03,179
button from the page,

463
00:16:03,179 --> 00:16:05,020
gives it a very
nice effect.

464
00:16:05,020 --> 00:16:06,719
I would recommend
coming to the face to

465
00:16:06,719 --> 00:16:09,059
face classes, though
it's very useful.

466
00:16:09,059 --> 00:16:12,360
It's really just as
simple as saying style

467
00:16:12,360 --> 00:16:13,639
and the CSS property would

468
00:16:13,639 --> 00:16:15,600
like to use followed
by the value.

469
00:16:15,600 --> 00:16:17,999
It couldn't be
easier than that.

470
00:16:19,490 --> 00:16:21,930
You might be thinking,
why do we want to add

471
00:16:21,930 --> 00:16:23,709
some CSS to Javascript?

472
00:16:23,709 --> 00:16:26,149
It's technically a
slightly longer process,

473
00:16:26,149 --> 00:16:27,510
but the thing
is we can run

474
00:16:27,510 --> 00:16:29,409
this code at any
time we like.

475
00:16:29,409 --> 00:16:31,330
We can do it at those
specific events.

476
00:16:31,330 --> 00:16:32,709
We could say, if
you click on this,

477
00:16:32,709 --> 00:16:34,489
run this very
specific piece of

478
00:16:34,489 --> 00:16:38,029
code which now
includes CSS.

479
00:16:38,029 --> 00:16:40,510
The thing with
just standard CSS

480
00:16:40,510 --> 00:16:41,990
is it's applied once,

481
00:16:41,990 --> 00:16:43,890
when that page loads.

482
00:16:43,890 --> 00:16:46,449
Javascript can be used
to change the look of

483
00:16:46,449 --> 00:16:49,330
that element after
the page is loaded.

484
00:16:49,330 --> 00:16:50,850
Again, we're
typically going to be

485
00:16:50,850 --> 00:16:53,190
using this when
our events occur.

486
00:16:53,190 --> 00:16:56,649
Pretty cool, right?
With standard CSS,

487
00:16:56,649 --> 00:16:57,849
it's only applied once.

488
00:16:57,849 --> 00:16:59,290
With Java Script,
we can apply

489
00:16:59,290 --> 00:17:01,429
the CSS as much
as we like.

490
00:17:01,429 --> 00:17:03,530
To demonstrate this,
we're going to use

491
00:17:03,530 --> 00:17:05,450
a very fun
apacity property.

492
00:17:05,450 --> 00:17:06,029
We're going to be

493
00:17:06,029 --> 00:17:08,110
changing this
incrementally.

494
00:17:08,110 --> 00:17:09,389
If you remember

495
00:17:09,389 --> 00:17:11,149
our week five
animation lecture,

496
00:17:11,149 --> 00:17:15,149
we had Apacity, We had
that fade in menu,

497
00:17:15,149 --> 00:17:17,489
the dropdown menu. We
had that fade effect.

498
00:17:17,489 --> 00:17:20,210
It faded in and
fading out, again,

499
00:17:20,210 --> 00:17:21,670
using Apacity's
essentially

500
00:17:21,670 --> 00:17:23,229
the transparency
of an element.

501
00:17:23,229 --> 00:17:25,090
It takes a value
of zero to one,

502
00:17:25,090 --> 00:17:27,749
and anything in between
is semi transparent.

503
00:17:27,749 --> 00:17:29,129
Again, doing a very,

504
00:17:29,129 --> 00:17:30,629
very quick recap on this,

505
00:17:30,629 --> 00:17:33,289
we open up developer tools

506
00:17:34,170 --> 00:17:36,770
with this heading. For
instance, if I said

507
00:17:36,770 --> 00:17:40,070
opacity zero, the
element disappears.

508
00:17:40,070 --> 00:17:41,569
But if I said 0.5 it

509
00:17:41,569 --> 00:17:42,989
becomes semi transparent,

510
00:17:42,989 --> 00:17:45,649
and opacity one means
it's fully visible.

511
00:17:45,649 --> 00:17:47,790
But again, we should
have a good idea

512
00:17:47,790 --> 00:17:50,830
for this at this
stage, okay?

513
00:17:50,830 --> 00:17:53,510
The idea is if we
increment it slightly,

514
00:17:53,510 --> 00:17:56,289
it gets ever so slightly
more visible or ever

515
00:17:56,289 --> 00:18:00,290
so slightly more
transparent. Interesting,

516
00:18:00,390 --> 00:18:02,409
I'm going somewhere
with this.

517
00:18:02,409 --> 00:18:05,410
Don't worry again,

518
00:18:05,410 --> 00:18:07,589
transparency zero
is transparent,

519
00:18:07,589 --> 00:18:09,829
one is visible, anything

520
00:18:09,829 --> 00:18:12,409
in between is
semi transparent.

521
00:18:12,409 --> 00:18:15,250
Now the cool thing
is we can read

522
00:18:15,250 --> 00:18:17,270
a CSS property using

523
00:18:17,270 --> 00:18:19,609
the same syntax as

524
00:18:19,609 --> 00:18:21,269
setting the
property itself.

525
00:18:21,269 --> 00:18:22,709
Now, this doesn't
work if the

526
00:18:22,709 --> 00:18:24,090
original property
is set through

527
00:18:24,090 --> 00:18:27,684
a CSS style sheet.
What I mean by that,

528
00:18:27,684 --> 00:18:30,340
it can be a bit
confusing sometimes.

529
00:18:30,340 --> 00:18:32,559
Let's say we have a
circle element, right?

530
00:18:32,559 --> 00:18:34,360
Con circle equals
document doc,

531
00:18:34,360 --> 00:18:36,059
query selector,
hashtag circle.

532
00:18:36,059 --> 00:18:39,499
We're finding a circle
inside of our HTML.

533
00:18:39,499 --> 00:18:41,099
We're then setting
the opacity

534
00:18:41,099 --> 00:18:42,039
of that circle to

535
00:18:42,039 --> 00:18:45,580
0.5 We're setting that
through Javascript.

536
00:18:45,580 --> 00:18:47,519
What we could do is create

537
00:18:47,519 --> 00:18:49,219
a variable that is

538
00:18:49,219 --> 00:18:51,259
the value of this
current capacity.

539
00:18:51,259 --> 00:18:52,640
The way we do
that is by saying

540
00:18:52,640 --> 00:18:54,480
circle style dopacity.

541
00:18:54,480 --> 00:18:56,759
This will give us 0.5

542
00:18:56,759 --> 00:18:59,139
when we're saying console
dot log capacity,

543
00:18:59,139 --> 00:19:00,379
that's why it's
printing out

544
00:19:00,379 --> 00:19:02,439
0.5 We're reading what

545
00:19:02,439 --> 00:19:04,940
the current CSS
value is from

546
00:19:04,940 --> 00:19:08,979
that piece of code.
Let's try it.

547
00:19:11,230 --> 00:19:13,409
We add a circle

548
00:19:13,409 --> 00:19:15,209
into our code so we can
get rid of all this.

549
00:19:15,209 --> 00:19:16,630
Now we don't
need it, we'll

550
00:19:16,630 --> 00:19:19,389
just add a very quick
circle to this.

551
00:19:19,930 --> 00:19:22,229
The nice thing is this is

552
00:19:22,229 --> 00:19:23,750
going to be one of
your first exercises,

553
00:19:23,750 --> 00:19:25,509
so don't feel the need
to copy along with me.

554
00:19:25,509 --> 00:19:26,229
I'm going to give you

555
00:19:26,229 --> 00:19:27,369
a piece of code for this.

556
00:19:27,369 --> 00:19:28,650
Okay, So we're going

557
00:19:28,650 --> 00:19:29,770
to create a
very quick div.

558
00:19:29,770 --> 00:19:31,849
The ID is called circle.

559
00:19:31,849 --> 00:19:33,010
We'll just create

560
00:19:33,010 --> 00:19:34,369
a very quick style
sheet as well.

561
00:19:34,369 --> 00:19:36,929
So we'll say links,

562
00:19:37,210 --> 00:19:39,330
create the file, we'll

563
00:19:39,330 --> 00:19:41,529
just say hashtag circle.

564
00:19:41,529 --> 00:19:45,229
Let's go width of five M,

565
00:19:45,229 --> 00:19:48,510
height of five,

566
00:19:48,510 --> 00:19:51,370
Background color,
Let's go for red.

567
00:19:51,370 --> 00:19:54,129
I like red
border radius of

568
00:19:54,129 --> 00:20:00,289
100% This should give
us a nice ish circle.

569
00:20:00,289 --> 00:20:01,850
It's a bit small.

570
00:20:01,850 --> 00:20:04,009
Let's maybe change
that to ten.

571
00:20:04,410 --> 00:20:08,449
We want quite a big
circle to interact with.

572
00:20:08,449 --> 00:20:10,830
There we go, that's
a bit better.

573
00:20:10,830 --> 00:20:12,690
We have our circle there.

574
00:20:12,690 --> 00:20:14,649
Okay. Now if you remember,

575
00:20:14,649 --> 00:20:16,909
we're going to set the
transparency of this,

576
00:20:16,909 --> 00:20:20,249
the opacity of this
circle using Java script,

577
00:20:20,249 --> 00:20:22,029
flicking back over
to our Java script.

578
00:20:22,029 --> 00:20:22,769
The first thing we need to

579
00:20:22,769 --> 00:20:24,109
do is find the circle.

580
00:20:24,109 --> 00:20:25,949
Let's use a
constant for this,

581
00:20:25,949 --> 00:20:27,409
we'll say constant circle

582
00:20:27,409 --> 00:20:29,149
equals document query

583
00:20:29,149 --> 00:20:34,249
select, then
hashtag circle.

584
00:20:35,200 --> 00:20:38,079
What we can then do
is set the capacity.

585
00:20:38,079 --> 00:20:43,179
So we could say circle
style annoying.

586
00:20:43,179 --> 00:20:52,870
Shortcut again, style
do opacity equals 0.5

587
00:20:52,870 --> 00:20:55,400
I'm going to take that
outside of quotes

588
00:20:55,400 --> 00:20:56,339
because we can
just keep it

589
00:20:56,339 --> 00:20:57,979
as a number if
we wanted to.

590
00:20:57,979 --> 00:21:00,379
The cool thing is this
should now make it so

591
00:21:00,379 --> 00:21:03,319
that our circle is
slightly semi transparent.

592
00:21:03,319 --> 00:21:06,179
I could then create a
brand new variable,

593
00:21:06,179 --> 00:21:09,700
let's say lets opacity

594
00:21:09,700 --> 00:21:14,620
equals circle
style opacity.

595
00:21:14,620 --> 00:21:16,440
So we're setting
this variable

596
00:21:16,440 --> 00:21:18,579
to whatever the
current capacity is.

597
00:21:18,579 --> 00:21:20,160
We're then going
to use, that's

598
00:21:20,160 --> 00:21:21,319
using alerts just so

599
00:21:21,319 --> 00:21:24,780
we can clearly
see it. Opacity,

600
00:21:25,730 --> 00:21:28,570
my advice, don't use
words that you're

601
00:21:28,570 --> 00:21:30,790
not comfortable with
spelling multiple times.

602
00:21:30,790 --> 00:21:32,689
I don't use apacity
very often,

603
00:21:32,689 --> 00:21:35,169
but that's why 0.5
is being printed in

604
00:21:35,169 --> 00:21:36,570
this alert box because

605
00:21:36,570 --> 00:21:38,069
the current circle opacity

606
00:21:38,069 --> 00:21:41,969
is 0.5 If we were to
change this to say 0.90

607
00:21:41,969 --> 00:21:44,109
0.9 would now be

608
00:21:44,109 --> 00:21:46,489
printed inside that
alert box instead.

609
00:21:46,489 --> 00:21:47,230
Again,

610
00:21:47,230 --> 00:21:48,870
the really big takeaway
I want you to get

611
00:21:48,870 --> 00:21:51,289
from this is we're reading
the current value,

612
00:21:51,289 --> 00:21:52,989
we're reading the
current value of

613
00:21:52,989 --> 00:21:54,669
that CSS property, okay?

614
00:21:54,669 --> 00:21:56,730
And we're storing that
into a new variable.

615
00:21:56,730 --> 00:21:58,189
We're then saying alert,

616
00:21:58,189 --> 00:21:59,589
whatever that
current value

617
00:21:59,589 --> 00:22:01,229
for that property is.

618
00:22:01,229 --> 00:22:03,629
Interesting,
right? There is

619
00:22:03,629 --> 00:22:05,690
a point to this elsewhere.

620
00:22:05,810 --> 00:22:09,209
Now what we could
try and do is

621
00:22:09,209 --> 00:22:12,289
store that value
in a variable and

622
00:22:12,289 --> 00:22:13,789
then possibly
increment it by

623
00:22:13,789 --> 00:22:16,709
0.1 or minus it
by 0.1 The idea

624
00:22:16,709 --> 00:22:18,910
is we could gradually
get this circle being

625
00:22:18,910 --> 00:22:20,229
more and more transparent

626
00:22:20,229 --> 00:22:22,029
or more and more visible.

627
00:22:22,029 --> 00:22:25,250
Now you might think this
would be quite easy,

628
00:22:26,030 --> 00:22:28,889
unfortunately,
Isn't quite as easy

629
00:22:28,889 --> 00:22:31,229
as what I'm making
out on this slide.

630
00:22:31,229 --> 00:22:32,730
Again, nothing's
really changed

631
00:22:32,730 --> 00:22:33,950
from these first
three lines.

632
00:22:33,950 --> 00:22:34,769
We're still saving

633
00:22:34,769 --> 00:22:36,210
that opacity
into a variable.

634
00:22:36,210 --> 00:22:38,090
So we're saying
let circle opacity

635
00:22:38,090 --> 00:22:41,050
equals circle
style opacity.

636
00:22:41,050 --> 00:22:44,269
What I would like to do
is say stark style do

637
00:22:44,269 --> 00:22:45,650
opacity equals whatever

638
00:22:45,650 --> 00:22:47,469
the current value
of the opacity is.

639
00:22:47,469 --> 00:22:48,829
Again, remember
the current value

640
00:22:48,829 --> 00:22:52,590
is 0.5 plus 0.1

641
00:22:52,620 --> 00:22:55,100
The idea is we
can gradually

642
00:22:55,100 --> 00:22:57,299
increase that
circle's opacity.

643
00:22:57,299 --> 00:22:58,439
It should go from semi

644
00:22:58,439 --> 00:23:00,600
transparent to
fully visible.

645
00:23:00,600 --> 00:23:04,040
The problem is this
doesn't quite work.

646
00:23:04,040 --> 00:23:06,120
And the reason this
doesn't work is because

647
00:23:06,120 --> 00:23:08,459
CSS values are
stored as text.

648
00:23:08,459 --> 00:23:11,019
We need to convert that
text into a number

649
00:23:11,019 --> 00:23:12,319
before we can
really do any

650
00:23:12,319 --> 00:23:14,604
of these calculations
on them.

651
00:23:14,604 --> 00:23:17,010
Essentially, what
we've got is we've got

652
00:23:17,010 --> 00:23:18,689
two strings being
added together.

653
00:23:18,689 --> 00:23:21,529
We've got the string 0.5

654
00:23:21,529 --> 00:23:24,689
plus 0.1 as a string.

655
00:23:24,689 --> 00:23:26,029
Instead of getting
something like

656
00:23:26,029 --> 00:23:28,190
0.6 which is what we want,

657
00:23:28,190 --> 00:23:30,949
we're getting 0.50 0.1

658
00:23:30,949 --> 00:23:33,169
It's adding both of
those strings together.

659
00:23:33,169 --> 00:23:35,509
It's causing a bit
of an issue for us.

660
00:23:35,509 --> 00:23:37,349
Again, when we're
using this approach,

661
00:23:37,349 --> 00:23:39,150
it's bringing
back a string.

662
00:23:39,150 --> 00:23:40,809
Essentially what
it's doing is,

663
00:23:40,809 --> 00:23:43,289
is adding a string
to another string,

664
00:23:43,289 --> 00:23:46,030
which isn't quite
what we want.

665
00:23:46,100 --> 00:23:48,439
What we need to
do is convert

666
00:23:48,439 --> 00:23:50,479
that string into a number.

667
00:23:50,479 --> 00:23:52,399
Now there's two ways
for doing this.

668
00:23:52,399 --> 00:23:54,400
We can use one
called pass t,

669
00:23:54,400 --> 00:23:56,000
which is converting
a string

670
00:23:56,000 --> 00:23:57,759
into the closest
whole number.

671
00:23:57,759 --> 00:23:59,419
Or we can use pass float,

672
00:23:59,419 --> 00:24:00,720
which converts
a string into

673
00:24:00,720 --> 00:24:02,320
the closest
decimal number.

674
00:24:02,320 --> 00:24:05,180
Because we're, well, we're

675
00:24:05,180 --> 00:24:06,759
specifically dealing
with opacity

676
00:24:06,759 --> 00:24:08,259
and we want those
decimal numbers.

677
00:24:08,259 --> 00:24:10,219
We're going to use
pass float for this.

678
00:24:10,219 --> 00:24:13,619
Remember we're adding
0.5 and 0.1 together.

679
00:24:13,619 --> 00:24:15,159
We're dealing
with decimals,

680
00:24:15,159 --> 00:24:16,659
so it makes sense
that we're going to

681
00:24:16,659 --> 00:24:18,240
use pass float again.

682
00:24:18,240 --> 00:24:19,280
It converts a string into

683
00:24:19,280 --> 00:24:21,060
the closest
decimal number.

684
00:24:21,060 --> 00:24:23,039
By modifying the
code slightly,

685
00:24:23,039 --> 00:24:25,419
we're going to say
let circle opacity

686
00:24:25,419 --> 00:24:28,860
equals pass float
circle style opacity.

687
00:24:28,860 --> 00:24:31,940
Get me the current
opacity and convert

688
00:24:31,940 --> 00:24:35,459
it into a decimal number.

689
00:24:35,459 --> 00:24:38,919
Go from a string
into a number.

690
00:24:38,919 --> 00:24:43,119
We're then going to add
0.1 to that number.

691
00:24:43,119 --> 00:24:44,579
Effectively,
we're going to

692
00:24:44,579 --> 00:24:45,819
add two numbers
together now,

693
00:24:45,819 --> 00:24:46,659
and that's when we can do

694
00:24:46,659 --> 00:24:49,414
our mathematical
operations onto it.

695
00:24:49,414 --> 00:24:52,730
So let's try it again,

696
00:24:52,730 --> 00:24:54,869
making that very
small change.

697
00:24:54,869 --> 00:25:01,289
We're just going to say
pass float on this.

698
00:25:01,530 --> 00:25:06,949
So we'll just add a
few of these together.

699
00:25:06,949 --> 00:25:13,329
Let's start with 0.1
then let's just,

700
00:25:13,329 --> 00:25:14,470
so it's completely clear,

701
00:25:14,470 --> 00:25:15,630
we'll just add a click

702
00:25:15,630 --> 00:25:16,989
event onto this circle.

703
00:25:16,989 --> 00:25:21,250
We'll say circle or add
event listener click,

704
00:25:21,250 --> 00:25:30,089
we'll just call a circle
click. Circle click.

705
00:25:31,090 --> 00:25:36,749
We're going to get the
circle style opacity

706
00:25:36,749 --> 00:25:39,409
equals whatever the
current opacity is,

707
00:25:39,409 --> 00:25:42,470
plus 0.5 So we're going

708
00:25:42,470 --> 00:25:46,225
to add 0.5 onto
this opacity. Okay?

709
00:25:46,225 --> 00:25:48,599
What happens is
we start off with

710
00:25:48,599 --> 00:25:50,539
this really
transparent circle.

711
00:25:50,539 --> 00:25:51,939
The second we click on it,

712
00:25:51,939 --> 00:25:53,539
it becomes a lot
more visible

713
00:25:53,539 --> 00:25:56,179
because we're
adding 0.5 to it.

714
00:25:56,179 --> 00:25:59,160
Cool, right?
Essentially we're

715
00:25:59,160 --> 00:26:00,939
saying get the
current capacity,

716
00:26:00,939 --> 00:26:02,519
So I've changed that
current capacity to

717
00:26:02,519 --> 00:26:05,260
0.1 We then converting

718
00:26:05,260 --> 00:26:08,019
that string into
a decimal number.

719
00:26:08,019 --> 00:26:10,459
Then inside of this
click circle function,

720
00:26:10,459 --> 00:26:11,939
we're taking the
current capacity

721
00:26:11,939 --> 00:26:14,379
and adding 0.5 to it.

722
00:26:14,379 --> 00:26:17,839
Interesting, right?
I think it's

723
00:26:17,839 --> 00:26:22,399
interesting
anyway. Oh, okay.

724
00:26:24,210 --> 00:26:27,709
Moving forward
then, wouldn't

725
00:26:27,709 --> 00:26:30,109
it be cool if we
could gradually

726
00:26:30,109 --> 00:26:32,269
get this circle to
be more and more

727
00:26:32,269 --> 00:26:35,950
transparent or more
and more visible.

728
00:26:35,950 --> 00:26:38,449
If that makes sense.
I could click on it

729
00:26:38,449 --> 00:26:40,049
multiple times and it

730
00:26:40,049 --> 00:26:41,590
gets more and
more visible.

731
00:26:41,590 --> 00:26:44,129
Or more and more
transparent.

732
00:26:48,050 --> 00:26:50,710
Apologies, it's had
something really

733
00:26:50,710 --> 00:26:54,010
sound a typo in the
slides. It's not good.

734
00:26:56,930 --> 00:27:00,649
The way we're going
to do this is

735
00:27:00,649 --> 00:27:02,389
essentially we're going to

736
00:27:02,389 --> 00:27:04,069
modify our current
code slightly.

737
00:27:04,069 --> 00:27:05,309
The idea is we're
going to click on

738
00:27:05,309 --> 00:27:06,790
the circle more
and more and more.

739
00:27:06,790 --> 00:27:08,649
It's going to get more
and more transparent

740
00:27:08,649 --> 00:27:10,949
or more and more visible.

741
00:27:10,949 --> 00:27:12,709
The way we're going to do

742
00:27:12,709 --> 00:27:13,770
this is we're
going to store

743
00:27:13,770 --> 00:27:14,649
these two pieces of

744
00:27:14,649 --> 00:27:17,009
code inside that function.

745
00:27:18,670 --> 00:27:21,230
Let's say we're going
to start off being

746
00:27:21,230 --> 00:27:23,350
quite invisible as we
click on the circle.

747
00:27:23,350 --> 00:27:25,189
We're going to get
more and more visible.

748
00:27:25,189 --> 00:27:28,209
If that makes sense, we

749
00:27:28,209 --> 00:27:29,949
move this into a function,

750
00:27:29,949 --> 00:27:31,509
we'll just bolt this.

751
00:27:31,509 --> 00:27:35,990
It looks a bit nicer,
this is what we get.

752
00:27:36,790 --> 00:27:39,029
Just realize
that shouldn't

753
00:27:39,029 --> 00:27:40,950
be up there. It
should be here.

754
00:27:40,950 --> 00:27:43,709
Apologies. That's
the bit we want it.

755
00:27:43,709 --> 00:27:45,970
Okay, there we go.
We should be good.

756
00:27:45,970 --> 00:27:47,389
Now if I click
on this circle,

757
00:27:47,389 --> 00:27:51,029
it will get more and
more and more visible.

758
00:27:51,310 --> 00:27:53,810
Essentially, we're
reading that property

759
00:27:53,810 --> 00:27:55,090
again and again and again,

760
00:27:55,090 --> 00:27:58,070
and we're incrementing
it by 0.1

761
00:27:58,510 --> 00:28:00,650
Cool, right? We could

762
00:28:00,650 --> 00:28:01,929
do it the other way
around as well.

763
00:28:01,929 --> 00:28:04,530
We could set the
capacity to one,

764
00:28:04,530 --> 00:28:05,570
so make it fully

765
00:28:05,570 --> 00:28:07,330
visible at the
starting point.

766
00:28:07,330 --> 00:28:10,070
Instead of plusing
0.1 we could

767
00:28:10,070 --> 00:28:14,709
-0.1 The idea is we
start off fully visible.

768
00:28:14,709 --> 00:28:16,350
And the more we click,
the more it gets

769
00:28:16,350 --> 00:28:18,870
more and more transparent.

770
00:28:18,870 --> 00:28:21,510
And then it's
completely invisible.

771
00:28:21,510 --> 00:28:24,269
It's interesting,
isn't it?

772
00:28:24,630 --> 00:28:28,490
I think it's
interesting that's

773
00:28:28,490 --> 00:28:31,349
working by storing
that current opacity,

774
00:28:31,349 --> 00:28:33,670
and then modifying that
value incrementally,

775
00:28:33,670 --> 00:28:35,130
again and again and again.

776
00:28:35,130 --> 00:28:36,089
Now we're currently

777
00:28:36,089 --> 00:28:37,370
pressing this
multiple times.

778
00:28:37,370 --> 00:28:38,610
Wouldn't it be
cool if we could

779
00:28:38,610 --> 00:28:40,289
set this to some timer?

780
00:28:40,289 --> 00:28:42,509
So the idea is it will
gradually get more and

781
00:28:42,509 --> 00:28:45,369
more and more invisible
as time goes on.

782
00:28:45,369 --> 00:28:48,549
For example,
across 5 seconds,

783
00:28:48,549 --> 00:28:49,849
we could go from
being completely

784
00:28:49,849 --> 00:28:52,149
visible to completely
invisible.

785
00:28:52,149 --> 00:28:54,010
That can be interesting.

786
00:28:54,010 --> 00:28:55,390
For that to work though,

787
00:28:55,390 --> 00:28:58,750
I need to chalk you
through timers.

788
00:28:59,750 --> 00:29:02,309
The way we can trigger

789
00:29:02,309 --> 00:29:03,729
these timers is by

790
00:29:03,729 --> 00:29:05,889
using something
called an interval.

791
00:29:05,889 --> 00:29:08,009
Now, intervals are events

792
00:29:08,009 --> 00:29:09,670
that are based on timers.

793
00:29:09,670 --> 00:29:11,590
Now we've got tons
of other events.

794
00:29:11,590 --> 00:29:12,430
We've got click events,

795
00:29:12,430 --> 00:29:13,650
we've got key
up, key down,

796
00:29:13,650 --> 00:29:14,289
mouse, enter,

797
00:29:14,289 --> 00:29:16,029
mouse leave, dump
content loaded.

798
00:29:16,029 --> 00:29:17,409
We've got tons of
different events.

799
00:29:17,409 --> 00:29:19,069
The one we're going to
be focused on right

800
00:29:19,069 --> 00:29:22,510
now is one called
an interval.

801
00:29:22,510 --> 00:29:25,469
Now we can get the
browser to repeatedly run

802
00:29:25,469 --> 00:29:28,290
a function based
on a unit of time.

803
00:29:28,290 --> 00:29:29,809
For example, we
could trigger

804
00:29:29,809 --> 00:29:31,729
a function to run
every 10 seconds,

805
00:29:31,729 --> 00:29:33,929
or every second, or
every tenth of a second,

806
00:29:33,929 --> 00:29:35,689
or every hundredth
of a second.

807
00:29:35,689 --> 00:29:37,789
Basically, we could
call that function

808
00:29:37,789 --> 00:29:40,409
every single
second like that.

809
00:29:40,409 --> 00:29:41,589
That piece of code will

810
00:29:41,589 --> 00:29:43,464
run constantly like this.

811
00:29:43,464 --> 00:29:45,459
Now, the syntax behind

812
00:29:45,459 --> 00:29:48,660
this is we say set
interval again,

813
00:29:48,660 --> 00:29:49,859
remember there's a
capital I there,

814
00:29:49,859 --> 00:29:51,220
so do be a little bit
careful when you're

815
00:29:51,220 --> 00:29:53,200
typing that set interval.

816
00:29:53,200 --> 00:29:54,740
Regular brackets, the name

817
00:29:54,740 --> 00:29:56,419
of the function
would like to run,

818
00:29:56,419 --> 00:29:58,579
and then the
unit of time we

819
00:29:58,579 --> 00:30:01,059
would like to run
that function on.

820
00:30:01,059 --> 00:30:02,539
Again, it could
be 1 second,

821
00:30:02,539 --> 00:30:04,379
it could be 10 seconds,
it could be a minute.

822
00:30:04,379 --> 00:30:05,640
But run this
function every

823
00:30:05,640 --> 00:30:08,620
single second. Okay,

824
00:30:08,620 --> 00:30:10,580
Now putting this into

825
00:30:10,580 --> 00:30:12,120
actual practical context,

826
00:30:12,120 --> 00:30:13,459
intervals are measured in

827
00:30:13,459 --> 00:30:14,839
hundredths of a second.

828
00:30:14,839 --> 00:30:16,699
That can be a bit
confusing initially,

829
00:30:16,699 --> 00:30:18,639
but if you just
remember, 1,000

830
00:30:18,639 --> 00:30:20,259
is equal to 1 second,

831
00:30:20,259 --> 00:30:22,259
5,000 is 5 seconds,

832
00:30:22,259 --> 00:30:24,719
10,000 is 10 seconds,

833
00:30:24,719 --> 00:30:27,379
every 1,000 is 1 second.

834
00:30:27,379 --> 00:30:29,660
If I say set interval,

835
00:30:29,660 --> 00:30:31,679
this function which
is my interval,

836
00:30:31,679 --> 00:30:34,619
just opia 1,000 it

837
00:30:34,619 --> 00:30:35,819
will trigger this piece of

838
00:30:35,819 --> 00:30:38,639
code every 1 second.

839
00:30:38,639 --> 00:30:40,979
I'm not going to
put an alert on

840
00:30:40,979 --> 00:30:42,620
this because this would
be really painful.

841
00:30:42,620 --> 00:30:44,280
But if we were to say

842
00:30:44,280 --> 00:30:48,819
function console dot log,

843
00:30:49,620 --> 00:30:52,879
just realized I've not
done that correctly.

844
00:30:52,879 --> 00:30:57,099
Let's say function test,

845
00:30:57,099 --> 00:30:58,960
that's always a
nice function name.

846
00:30:58,960 --> 00:31:02,859
Hey, we could say
console dot log,

847
00:31:05,040 --> 00:31:09,079
working with a few
explanation marks.

848
00:31:09,079 --> 00:31:11,139
If I run this function,

849
00:31:11,139 --> 00:31:14,100
if I say test inside

850
00:31:14,100 --> 00:31:16,140
of our console. So
look over here.

851
00:31:16,140 --> 00:31:18,559
We get working
printed once.

852
00:31:18,559 --> 00:31:20,459
Okay? If I were

853
00:31:20,459 --> 00:31:22,360
to put this on
a set interval.

854
00:31:22,360 --> 00:31:24,780
If I said set interval,

855
00:31:24,780 --> 00:31:26,759
the name of the
function which is

856
00:31:26,759 --> 00:31:29,339
working? No, it's not.

857
00:31:29,339 --> 00:31:31,980
It's, see,

858
00:31:31,980 --> 00:31:33,579
I think initially I
wanted to call it

859
00:31:33,579 --> 00:31:35,379
working the name
of the function.

860
00:31:35,379 --> 00:31:36,360
So it's called test,

861
00:31:36,360 --> 00:31:37,460
and then the unit of time,

862
00:31:37,460 --> 00:31:41,439
if we trigger this
every 1 second.

863
00:31:44,020 --> 00:31:46,799
We get triggered
once, twice,

864
00:31:46,799 --> 00:31:49,160
three times, four
times, five times.

865
00:31:49,160 --> 00:31:50,240
Hope this is
coming through

866
00:31:50,240 --> 00:31:51,339
quite clearly on
the recording,

867
00:31:51,339 --> 00:31:53,440
but this number
here is indicating

868
00:31:53,440 --> 00:31:54,680
the number of times
this is being

869
00:31:54,680 --> 00:31:56,280
called to our console.

870
00:31:56,280 --> 00:31:58,719
Right now, 15 seconds

871
00:31:58,719 --> 00:31:59,860
of essentially
passed and we're

872
00:31:59,860 --> 00:32:02,180
triggering 15 of
these console logs

873
00:32:02,180 --> 00:32:03,399
would have been
quite painful,

874
00:32:03,399 --> 00:32:04,519
If we've done an
alert on this,

875
00:32:04,519 --> 00:32:05,480
you'd have an alert going

876
00:32:05,480 --> 00:32:06,500
off every single second,

877
00:32:06,500 --> 00:32:09,180
which would be
very annoying.

878
00:32:10,300 --> 00:32:12,720
But essentially
what we could

879
00:32:12,720 --> 00:32:15,039
do is we could
store a number.

880
00:32:15,039 --> 00:32:17,499
We could say,
for instance,

881
00:32:17,499 --> 00:32:20,660
number equals one.

882
00:32:20,660 --> 00:32:24,600
We could print that
number into our console.

883
00:32:24,600 --> 00:32:27,320
So we could say
number here,

884
00:32:27,320 --> 00:32:29,940
but at the end of that
we could then say

885
00:32:29,940 --> 00:32:33,880
number equals
number plus one.

886
00:32:33,880 --> 00:32:35,699
The idea is we can
increment that by

887
00:32:35,699 --> 00:32:36,900
one every single time

888
00:32:36,900 --> 00:32:38,299
that function is cooled,

889
00:32:38,299 --> 00:32:40,619
which gives us this
very cool effect.

890
00:32:40,619 --> 00:32:44,199
It triggers 1234,

891
00:32:44,199 --> 00:32:45,740
that number is
going up every

892
00:32:45,740 --> 00:32:48,320
single second,
which is cool.

893
00:32:48,320 --> 00:32:50,260
We could make
this even faster

894
00:32:50,260 --> 00:32:52,280
by reducing that
interval again.

895
00:32:52,280 --> 00:32:54,759
Right now 1,000 is
equal to 1 second.

896
00:32:54,759 --> 00:32:56,939
If we changed this to 500,

897
00:32:56,939 --> 00:32:59,199
it would take less
than half a second.

898
00:32:59,199 --> 00:33:00,239
So this will be

899
00:33:00,239 --> 00:33:02,454
triggered
significantly faster,

900
00:33:02,454 --> 00:33:04,909
which is cool. If we

901
00:33:04,909 --> 00:33:06,289
wanted to be
completely insane,

902
00:33:06,289 --> 00:33:08,949
we could trigger it
every 100 of a second,

903
00:33:08,949 --> 00:33:11,169
which is
significantly faster.

904
00:33:11,169 --> 00:33:13,510
So again, we're racking
up into 30 now.

905
00:33:13,510 --> 00:33:14,469
But hopefully you can

906
00:33:14,469 --> 00:33:15,709
see if that was an alert,

907
00:33:15,709 --> 00:33:16,890
we would have quite a few

908
00:33:16,890 --> 00:33:18,469
alerts currently
being triggered,

909
00:33:18,469 --> 00:33:20,629
which isn't very
good at all.

910
00:33:20,629 --> 00:33:22,529
Now, the reason
I'm teaching

911
00:33:22,529 --> 00:33:23,870
you this is because
we've built

912
00:33:23,870 --> 00:33:25,629
our function for
our circle capacity

913
00:33:25,629 --> 00:33:27,010
in a very certain way.

914
00:33:27,010 --> 00:33:28,989
What we could
try and do is

915
00:33:28,989 --> 00:33:31,750
set this function
onto an interval.

916
00:33:31,750 --> 00:33:33,389
The idea is instead of

917
00:33:33,389 --> 00:33:35,769
clicking our
circle constantly,

918
00:33:35,769 --> 00:33:38,410
we could set this
behind an interval.

919
00:33:38,410 --> 00:33:42,410
If we could say set
interval circle click,

920
00:33:42,410 --> 00:33:44,880
Let's trigger this every

921
00:33:44,880 --> 00:33:47,750
1 second. Actually, that
might be a bit slow.

922
00:33:47,750 --> 00:33:49,989
We'll trigger it
every 500 seconds,

923
00:33:49,989 --> 00:33:52,069
not 5,000 That
would be 5 seconds,

924
00:33:52,069 --> 00:33:54,309
which obviously we
don't want to do.

925
00:33:54,309 --> 00:33:56,129
What this should
happen now is

926
00:33:56,129 --> 00:33:57,449
our circle should
gradually get

927
00:33:57,449 --> 00:34:00,389
less and less visible
automatically.

928
00:34:00,389 --> 00:34:02,489
Which is interesting,
isn't it?

929
00:34:02,489 --> 00:34:04,350
To. We could speed
that up so it's

930
00:34:04,350 --> 00:34:05,829
a slightly cleaner effect.

931
00:34:05,829 --> 00:34:08,190
If I change this to 100,

932
00:34:08,190 --> 00:34:10,170
we're adding more frames

933
00:34:10,170 --> 00:34:12,289
to that animation to.

934
00:34:12,289 --> 00:34:15,610
I could add even more
parts to that process,

935
00:34:15,610 --> 00:34:17,929
change this to ten and

936
00:34:17,929 --> 00:34:20,629
make it a very smooth
animation like that.

937
00:34:20,629 --> 00:34:23,144
Which is quite cool. Hey,

938
00:34:23,144 --> 00:34:25,020
because I've built
this function

939
00:34:25,020 --> 00:34:26,299
in a very specific way,

940
00:34:26,299 --> 00:34:28,060
it's allowing us to
run that function

941
00:34:28,060 --> 00:34:30,120
multiple times in
that interval.

942
00:34:30,120 --> 00:34:32,479
Hopefully that makes
a bit of sense.

943
00:34:32,479 --> 00:34:34,159
If we want to
trigger something

944
00:34:34,159 --> 00:34:35,899
again and again and again,

945
00:34:35,899 --> 00:34:38,319
we can use set
interval for that.

946
00:34:38,319 --> 00:34:40,919
Again, set interval,
run this function every

947
00:34:40,919 --> 00:34:44,304
tenth of a second.
This is going off like

948
00:34:44,304 --> 00:34:46,869
faster than that. I can't

949
00:34:46,869 --> 00:34:47,989
click physically
that fast.

950
00:34:47,989 --> 00:34:50,269
That's how fast that
would be going off.

951
00:34:50,269 --> 00:34:52,749
But hopefully that
makes some sense.

952
00:34:52,749 --> 00:34:54,590
Now because we're
dealing with timers,

953
00:34:54,590 --> 00:34:55,790
it's important
to understand

954
00:34:55,790 --> 00:34:58,309
ways of canceling
timers as well.

955
00:34:58,309 --> 00:35:00,909
So the way we actually
cancel a timer is

956
00:35:00,909 --> 00:35:03,530
we stored the timer
into a variable.

957
00:35:03,530 --> 00:35:05,289
Then once we've reached

958
00:35:05,289 --> 00:35:06,430
the end point
of that timer,

959
00:35:06,430 --> 00:35:08,249
once we know that this
timer should stop,

960
00:35:08,249 --> 00:35:09,570
we can then use
the function

961
00:35:09,570 --> 00:35:10,849
clear interval and put

962
00:35:10,849 --> 00:35:15,144
that variable in
the function name.

963
00:35:15,144 --> 00:35:17,039
Breaking it down again,

964
00:35:17,039 --> 00:35:18,839
we say let timer again.

965
00:35:18,839 --> 00:35:20,319
This can be called
anything you like really,

966
00:35:20,319 --> 00:35:21,139
but we're just calling it

967
00:35:21,139 --> 00:35:22,639
timer for simplicity here.

968
00:35:22,639 --> 00:35:24,620
Equals set interval,
my interval

969
00:35:24,620 --> 00:35:26,279
1,000 This is running

970
00:35:26,279 --> 00:35:28,360
this function
every 1 second,

971
00:35:28,360 --> 00:35:31,020
we then immediately
canceling that timer.

972
00:35:31,020 --> 00:35:32,839
So this is a pointless
piece of code,

973
00:35:32,839 --> 00:35:34,400
but it's still good
to demonstrate

974
00:35:34,400 --> 00:35:36,019
this by saying clear,

975
00:35:36,019 --> 00:35:38,059
clear interval
and then we're

976
00:35:38,059 --> 00:35:40,319
putting the value
timer in there.

977
00:35:40,319 --> 00:35:42,780
This is a good way of
stopping that timer.

978
00:35:42,780 --> 00:35:44,319
If we have a lot of things

979
00:35:44,319 --> 00:35:46,180
based around timers,

980
00:35:46,180 --> 00:35:48,820
it's just a good idea
to clear those timers,

981
00:35:48,820 --> 00:35:50,419
either once the
game has ended

982
00:35:50,419 --> 00:35:52,619
or once we no longer
have a need for them.

983
00:35:52,619 --> 00:35:54,560
So you do that bit
clearer interval.

984
00:35:54,560 --> 00:35:55,639
This is actually something

985
00:35:55,639 --> 00:35:56,559
that gets assessed in

986
00:35:56,559 --> 00:35:58,820
the code quality and
efficiency section.

987
00:35:58,820 --> 00:36:00,179
You are going
to be dealing

988
00:36:00,179 --> 00:36:01,220
with quite a few timers

989
00:36:01,220 --> 00:36:03,459
in your assignment If
you don't clear them,

990
00:36:03,459 --> 00:36:04,819
but at the end of the game

991
00:36:04,819 --> 00:36:06,239
you'll lose one or
two marks there.

992
00:36:06,239 --> 00:36:07,480
So going to just make
sure you're keeping

993
00:36:07,480 --> 00:36:08,819
track of your
timers going off,

994
00:36:08,819 --> 00:36:11,619
it's a performance
aspect as well.

995
00:36:11,619 --> 00:36:13,699
I'm hoping that
makes sense.

996
00:36:13,699 --> 00:36:14,959
Again, if we were going to

997
00:36:14,959 --> 00:36:16,775
modify our code slightly,

998
00:36:16,775 --> 00:36:20,910
we could say if I taught
you if statements,

999
00:36:20,910 --> 00:36:22,209
which we're getting
to, don't worry.

1000
00:36:22,209 --> 00:36:24,629
I could say if the
opacity becomes zero,

1001
00:36:24,629 --> 00:36:25,910
once our circle becomes

1002
00:36:25,910 --> 00:36:28,070
completely invisible,
clear this timer.

1003
00:36:28,070 --> 00:36:29,869
Because once
it's invisible,

1004
00:36:29,869 --> 00:36:31,529
we can't go more

1005
00:36:31,529 --> 00:36:33,589
invisible, if
that makes sense.

1006
00:36:33,589 --> 00:36:35,909
Once we have hit
opacity zero,

1007
00:36:35,909 --> 00:36:37,749
we can't go any
further that

1008
00:36:37,749 --> 00:36:39,769
way, if that makes sense.

1009
00:36:39,769 --> 00:36:40,790
Once it's invisible,

1010
00:36:40,790 --> 00:36:42,049
there's not much
more we can do.

1011
00:36:42,049 --> 00:36:44,309
We could have said,
if that's the case,

1012
00:36:44,309 --> 00:36:46,249
clear this Tim, it's

1013
00:36:46,249 --> 00:36:48,350
literally just a matter
of saving this timer.

1014
00:36:48,350 --> 00:36:49,229
We'll just use the

1015
00:36:49,229 --> 00:36:51,220
same variable,
select timer.

1016
00:36:51,220 --> 00:36:55,210
And then clear
interval timer.

1017
00:36:55,210 --> 00:36:56,329
So this should just

1018
00:36:56,329 --> 00:36:57,690
cancel that timer
completely.

1019
00:36:57,690 --> 00:36:59,349
Nothing should really
happen on this page.

1020
00:36:59,349 --> 00:37:02,589
Now, interesting, right?

1021
00:37:02,630 --> 00:37:06,749
Very fun. I
think it's fun.

1022
00:37:07,950 --> 00:37:12,509
There we go. So that

1023
00:37:12,509 --> 00:37:14,089
was intervals and opacity.

1024
00:37:14,089 --> 00:37:15,709
What we're going
to focus on now is

1025
00:37:15,709 --> 00:37:16,370
actually moving

1026
00:37:16,370 --> 00:37:18,450
our elements
around the screen.

1027
00:37:18,450 --> 00:37:20,490
In the assignment,
I've created

1028
00:37:20,490 --> 00:37:22,049
the player
movement for you.

1029
00:37:22,049 --> 00:37:24,109
Depending on what grade
you'd like to get.

1030
00:37:24,109 --> 00:37:25,709
I'm hoping most of
you are aiming for

1031
00:37:25,709 --> 00:37:28,309
maybe slightly
higher than a grade.

1032
00:37:28,309 --> 00:37:30,489
Be nice to get quite
a few S this year.

1033
00:37:30,489 --> 00:37:32,530
But part of the
grade criteria

1034
00:37:32,530 --> 00:37:34,370
is moving the enemy
characters yourself.

1035
00:37:34,370 --> 00:37:36,109
It's important to
understand how we can

1036
00:37:36,109 --> 00:37:38,490
move elements
around the screen.

1037
00:37:38,490 --> 00:37:39,229
There's

1038
00:37:39,229 --> 00:37:40,089
quite a few different ways

1039
00:37:40,089 --> 00:37:41,150
of moving elements.

1040
00:37:41,150 --> 00:37:43,070
We could manipulate
the margins.

1041
00:37:43,070 --> 00:37:44,170
So we could add margin,

1042
00:37:44,170 --> 00:37:44,890
left margin,

1043
00:37:44,890 --> 00:37:46,910
right margin, top
margin, bottom.

1044
00:37:46,910 --> 00:37:48,569
We could use
the top, left,

1045
00:37:48,569 --> 00:37:49,970
right and bottom
properties.

1046
00:37:49,970 --> 00:37:51,569
Or we could even
try positioning it

1047
00:37:51,569 --> 00:37:54,469
using an entirely
separate element as well.

1048
00:37:55,620 --> 00:37:57,879
The method we're
going to go for

1049
00:37:57,879 --> 00:37:59,760
is using the top and
left properties,

1050
00:37:59,760 --> 00:38:01,639
like our x and
y coordinates.

1051
00:38:01,639 --> 00:38:04,359
But the reason this
could sometimes be

1052
00:38:04,359 --> 00:38:05,539
an issue is
because there's

1053
00:38:05,539 --> 00:38:06,459
so many different ways of

1054
00:38:06,459 --> 00:38:08,100
positioning elements,

1055
00:38:08,100 --> 00:38:10,740
it's difficult
to understand

1056
00:38:10,740 --> 00:38:13,360
how that elements
currently been positioned.

1057
00:38:13,360 --> 00:38:14,759
We don't necessarily
know if it's

1058
00:38:14,759 --> 00:38:17,100
based on the padding
or the margin.

1059
00:38:17,100 --> 00:38:19,260
We don't know sometimes

1060
00:38:19,260 --> 00:38:20,699
because that's the case,

1061
00:38:20,699 --> 00:38:22,499
we're mostly
going to be using

1062
00:38:22,499 --> 00:38:23,820
a function

1063
00:38:23,820 --> 00:38:26,060
called get bounding
clients wrecked.

1064
00:38:26,060 --> 00:38:28,119
It provides a
very simple way

1065
00:38:28,119 --> 00:38:29,539
of retrieving data on

1066
00:38:29,539 --> 00:38:31,859
elements position
irrelevant of

1067
00:38:31,859 --> 00:38:33,399
how it's been positioned
on that page.

1068
00:38:33,399 --> 00:38:34,779
We can get a variety of

1069
00:38:34,779 --> 00:38:38,300
specific coordinates
based on that element.

1070
00:38:38,300 --> 00:38:40,080
When you say elements

1071
00:38:40,080 --> 00:38:42,420
get bounding
client wrecked,

1072
00:38:42,420 --> 00:38:46,749
we get a variety of
different properties back

1073
00:38:46,749 --> 00:38:49,379
again. If we say
constant circle

1074
00:38:49,379 --> 00:38:50,660
equals document docuery,

1075
00:38:50,660 --> 00:38:53,659
select a circle, find
the circle in our HTML.

1076
00:38:53,659 --> 00:38:54,780
We can then create

1077
00:38:54,780 --> 00:38:56,720
a new variable
called position

1078
00:38:56,720 --> 00:38:59,360
based on the circle.

1079
00:38:59,360 --> 00:39:01,480
Get bounding
client wrecked.

1080
00:39:01,480 --> 00:39:03,039
Very weird word that.

1081
00:39:03,039 --> 00:39:04,099
The cool thing is we can

1082
00:39:04,099 --> 00:39:05,060
get the left position,

1083
00:39:05,060 --> 00:39:06,680
the right position,
the top position,

1084
00:39:06,680 --> 00:39:07,820
and the bottom position.

1085
00:39:07,820 --> 00:39:09,400
We're getting
four different

1086
00:39:09,400 --> 00:39:11,340
positions of that element.

1087
00:39:11,340 --> 00:39:13,079
We can also get the height

1088
00:39:13,079 --> 00:39:14,519
and width of that
element as well,

1089
00:39:14,519 --> 00:39:16,940
which is very
useful potentially.

1090
00:39:16,940 --> 00:39:18,220
We can get a variety

1091
00:39:18,220 --> 00:39:20,139
of information based
on how that element

1092
00:39:20,139 --> 00:39:22,340
is currently positioned
on that screen.

1093
00:39:22,340 --> 00:39:24,879
Quickly
demonstrating this.

1094
00:39:29,550 --> 00:39:33,129
Apologies again, a weird
to pop up just then.

1095
00:39:33,129 --> 00:39:35,390
Let's say we
found the circle.

1096
00:39:35,390 --> 00:39:38,290
We could say let's

1097
00:39:38,290 --> 00:39:43,730
circle position
equals circle.

1098
00:39:43,730 --> 00:39:47,129
Get bounding client
direct Again,

1099
00:39:47,129 --> 00:39:48,469
let it do the hard
work for you.

1100
00:39:48,469 --> 00:39:50,710
You automatically find
this information.

1101
00:39:50,710 --> 00:39:54,029
We could say console log

1102
00:39:56,560 --> 00:40:04,279
left position equals
circle position left.

1103
00:40:04,279 --> 00:40:05,799
So this should
give us the left

1104
00:40:05,799 --> 00:40:07,880
position of that circle,

1105
00:40:09,600 --> 00:40:13,739
123.4 at

1106
00:40:13,739 --> 00:40:18,120
the left position,
the right position,

1107
00:40:22,700 --> 00:40:28,860
the top position,
the bottom position.

1108
00:40:28,860 --> 00:40:31,399
We just need to set
those properties as

1109
00:40:31,399 --> 00:40:34,940
well, top and bottom.

1110
00:40:36,420 --> 00:40:39,439
By looking in the
console on this,

1111
00:40:39,439 --> 00:40:41,500
we can see exactly

1112
00:40:41,500 --> 00:40:43,120
where that element
has been positioned.

1113
00:40:43,120 --> 00:40:44,619
The left position
is eight,

1114
00:40:44,619 --> 00:40:46,600
the right position is 168,

1115
00:40:46,600 --> 00:40:47,939
the top position
is eight as well,

1116
00:40:47,939 --> 00:40:50,220
and the bottom
position is 168.

1117
00:40:50,220 --> 00:40:51,739
The right and
the bottom are

1118
00:40:51,739 --> 00:40:53,100
roughly in a
similar positions.

1119
00:40:53,100 --> 00:40:54,859
They should be about here,

1120
00:40:54,859 --> 00:40:56,499
which is quite cool.

1121
00:40:56,499 --> 00:40:57,659
But the point is

1122
00:40:57,659 --> 00:40:58,879
the point I'm
trying to make.

1123
00:40:58,879 --> 00:41:00,819
We can get the exact
positioning of

1124
00:41:00,819 --> 00:41:02,719
that element using

1125
00:41:02,719 --> 00:41:04,080
get bounding
client direct.

1126
00:41:04,080 --> 00:41:05,679
We can also retrieve
the height and

1127
00:41:05,679 --> 00:41:08,379
the width of these
elements as well.

1128
00:41:08,379 --> 00:41:10,219
We're going to
use this to move

1129
00:41:10,219 --> 00:41:12,380
these elements
around the screen.

1130
00:41:12,850 --> 00:41:15,170
Because we've got
the elements,

1131
00:41:15,170 --> 00:41:16,489
the elements
positions, it's

1132
00:41:16,489 --> 00:41:18,910
a good idea to store
this into a variable.

1133
00:41:18,910 --> 00:41:20,509
Let's focus on moving

1134
00:41:20,509 --> 00:41:22,829
this element slightly
to the left.

1135
00:41:22,829 --> 00:41:24,769
Okay, So if we're

1136
00:41:24,769 --> 00:41:26,049
going to move it
slightly to the left,

1137
00:41:26,049 --> 00:41:27,229
it's a good idea to store

1138
00:41:27,229 --> 00:41:29,590
the current left
position in a variable.

1139
00:41:29,590 --> 00:41:32,309
Okay, in this
instance we're

1140
00:41:32,309 --> 00:41:32,690
creating

1141
00:41:32,690 --> 00:41:35,249
a brand new variable
called position left.

1142
00:41:35,249 --> 00:41:36,869
And that's going
to be based on

1143
00:41:36,869 --> 00:41:40,190
the current left
position of that circle.

1144
00:41:40,190 --> 00:41:42,129
Again, we're getting
the left coordinate

1145
00:41:42,129 --> 00:41:44,585
and we're storing it
into a new variable.

1146
00:41:44,585 --> 00:41:46,959
We're then going
to use the left

1147
00:41:46,959 --> 00:41:50,020
CSS styles
circle styletft,

1148
00:41:50,020 --> 00:41:51,339
We're going to minus ten

1149
00:41:51,339 --> 00:41:53,420
from that current
position.

1150
00:41:53,420 --> 00:41:56,180
The idea is when we run
this piece of code,

1151
00:41:56,180 --> 00:41:57,640
it should move minus

1152
00:41:57,640 --> 00:42:00,000
ten from its current
left position.

1153
00:42:00,000 --> 00:42:02,019
If that makes
sense, we should

1154
00:42:02,019 --> 00:42:04,660
move this way when we
run this piece of code.

1155
00:42:04,660 --> 00:42:08,639
Okay, so let's try it.

1156
00:42:09,810 --> 00:42:12,130
If we created a function,

1157
00:42:12,130 --> 00:42:14,449
let's say function
move left.

1158
00:42:14,449 --> 00:42:17,429
For instance, we could

1159
00:42:17,429 --> 00:42:23,550
say position left
equals circle.

1160
00:42:23,550 --> 00:42:26,929
Position left might be

1161
00:42:26,929 --> 00:42:27,769
a good idea to have this

1162
00:42:27,769 --> 00:42:28,949
inside that
function as well.

1163
00:42:28,949 --> 00:42:30,249
Just so we can
constantly get it

1164
00:42:30,249 --> 00:42:37,269
updated every single time.

1165
00:42:37,269 --> 00:42:38,469
We call this function that

1166
00:42:38,469 --> 00:42:40,874
circle should move left.

1167
00:42:40,874 --> 00:42:43,900
If we say circle style,

1168
00:42:43,900 --> 00:42:46,159
it's done that
annoying thing again,

1169
00:42:46,159 --> 00:42:51,959
style left equals
position left minus ten.

1170
00:42:51,959 --> 00:42:53,540
We do also need to include

1171
00:42:53,540 --> 00:42:55,179
a unit of
measurement in this.

1172
00:42:55,179 --> 00:42:57,599
That's why we're
adding X onto the end,

1173
00:42:57,599 --> 00:42:59,840
because we're
moving ten pixels

1174
00:42:59,840 --> 00:43:02,199
minus ten pixels
to the left.

1175
00:43:02,199 --> 00:43:03,620
Again, you need to include

1176
00:43:03,620 --> 00:43:04,959
the X unit onto this.

1177
00:43:04,959 --> 00:43:06,639
We're taking the current
left position and

1178
00:43:06,639 --> 00:43:09,239
we're minusing ten
pixels from that.

1179
00:43:09,239 --> 00:43:11,760
Every time I call this
move left function,

1180
00:43:11,760 --> 00:43:13,899
we should move ten
pixels to the left.

1181
00:43:13,899 --> 00:43:16,119
We'll just add a very
quick click event onto

1182
00:43:16,119 --> 00:43:20,175
this ad event
listener. Click

1183
00:43:20,175 --> 00:43:25,249
move left like so.

1184
00:43:25,610 --> 00:43:29,909
Should touch wood work
every time I click.

1185
00:43:29,909 --> 00:43:32,309
Circle position is
not defined on line

1186
00:43:32,309 --> 00:43:35,189
three is because we're

1187
00:43:35,189 --> 00:43:36,089
using these and we've

1188
00:43:36,089 --> 00:43:37,089
moved that, That's fine.

1189
00:43:37,089 --> 00:43:39,169
We'll just get
rid of this bit

1190
00:43:39,970 --> 00:43:42,689
every single
time we click,

1191
00:43:42,689 --> 00:43:44,990
because it's not
absolute position.

1192
00:43:44,990 --> 00:43:46,869
Using the top
and left units,

1193
00:43:46,869 --> 00:43:47,709
it's a good idea to use

1194
00:43:47,709 --> 00:43:49,129
absolute positioning
for this.

1195
00:43:49,129 --> 00:43:52,009
If I say position
absolute,

1196
00:43:52,500 --> 00:43:56,479
we should now be
moving left like this.

1197
00:43:56,479 --> 00:43:58,599
Because we're
using the left and

1198
00:43:58,599 --> 00:44:00,180
we're using the
left coordinate

1199
00:44:00,180 --> 00:44:01,259
to basically
say move left.

1200
00:44:01,259 --> 00:44:03,479
When we click, that's
how we're going to be

1201
00:44:03,479 --> 00:44:04,599
moving our elements
and it's how

1202
00:44:04,599 --> 00:44:06,460
the current
assignment is built.

1203
00:44:06,460 --> 00:44:08,299
We're essentially
using the left and

1204
00:44:08,299 --> 00:44:10,179
the top properties
and we're either

1205
00:44:10,179 --> 00:44:12,159
minusing a certain
number of pixels or

1206
00:44:12,159 --> 00:44:14,640
we're adding a certain
number of pixels.

1207
00:44:14,640 --> 00:44:17,479
If we minus ten
pixels, we move left.

1208
00:44:17,479 --> 00:44:23,619
If we were to add ten
pixels, we'd move right

1209
00:44:24,500 --> 00:44:28,359
like this. Cool, right,

1210
00:44:28,359 --> 00:44:29,600
So we're essentially

1211
00:44:29,600 --> 00:44:30,699
moving this circle around

1212
00:44:30,699 --> 00:44:35,020
the screen by modifying
this left property.

1213
00:44:35,020 --> 00:44:37,200
That's really all it boils

1214
00:44:37,200 --> 00:44:38,979
down to, which
is quite fun.

1215
00:44:38,979 --> 00:44:41,080
This all works
based on clicking

1216
00:44:41,080 --> 00:44:42,279
that element
multiple times.

1217
00:44:42,279 --> 00:44:43,160
But click on the element

1218
00:44:43,160 --> 00:44:45,240
and then it slowly moves.

1219
00:44:45,240 --> 00:44:47,639
That's fine. It
would be good if

1220
00:44:47,639 --> 00:44:49,640
that's the game
aiming to create.

1221
00:44:49,640 --> 00:44:51,779
The problem is we

1222
00:44:51,779 --> 00:44:53,719
don't want to use
that movement style.

1223
00:44:53,719 --> 00:44:54,739
What I mean by that is

1224
00:44:54,739 --> 00:44:55,919
the games not built around

1225
00:44:55,919 --> 00:44:59,250
clicking the games built
with our arrow keys.

1226
00:44:59,250 --> 00:45:02,339
What we're actually
going to do instead is

1227
00:45:02,339 --> 00:45:05,859
by using a specific
event called key down.

1228
00:45:05,859 --> 00:45:07,919
Now, key down
is really cool.

1229
00:45:07,919 --> 00:45:08,360
Basically,

1230
00:45:08,360 --> 00:45:10,520
whenever we click a
key on our keyboard,

1231
00:45:10,520 --> 00:45:12,319
that will count
as a key down.

1232
00:45:12,319 --> 00:45:15,379
Event key down essentially

1233
00:45:15,379 --> 00:45:17,159
works whenever a key

1234
00:45:17,159 --> 00:45:18,920
on our keyboard
has been pressed.

1235
00:45:18,920 --> 00:45:20,299
If we make a
small change to

1236
00:45:20,299 --> 00:45:21,860
our function, if
we say document,

1237
00:45:21,860 --> 00:45:25,279
do event listener key
down instead of click.

1238
00:45:25,279 --> 00:45:27,079
This will then
trigger that piece of

1239
00:45:27,079 --> 00:45:28,800
code for whenever
we've clicked

1240
00:45:28,800 --> 00:45:33,040
a key on our keyboard.
Let's try modifying.

1241
00:45:33,840 --> 00:45:37,119
If I change this
to key down,

1242
00:45:37,119 --> 00:45:39,359
look what happens now

1243
00:45:39,359 --> 00:45:41,500
if I press any key
on my keyboard.

1244
00:45:41,500 --> 00:45:42,839
So right now I'm going
to press the space

1245
00:45:42,839 --> 00:45:44,459
bar, I'm moving left,

1246
00:45:44,459 --> 00:45:45,759
press the up key, I'm

1247
00:45:45,759 --> 00:45:48,259
moving down key,
left and right.

1248
00:45:48,259 --> 00:45:50,239
Point is if I
click any key,

1249
00:45:50,239 --> 00:45:54,039
that piece of code
will then run right.

1250
00:45:54,039 --> 00:45:55,339
We're getting
closer to the

1251
00:45:55,339 --> 00:45:57,079
movement style by
hold a key down,

1252
00:45:57,079 --> 00:45:57,899
it will continue to move

1253
00:45:57,899 --> 00:45:59,399
in that direction as well,

1254
00:45:59,399 --> 00:46:01,860
which is pretty
interesting.

1255
00:46:01,860 --> 00:46:03,539
That's working by using

1256
00:46:03,539 --> 00:46:05,239
something called key down,

1257
00:46:05,239 --> 00:46:07,580
which is very cool.

1258
00:46:07,580 --> 00:46:11,119
Hopefully this is
making sense so far.

1259
00:46:13,150 --> 00:46:15,269
Now, right now, this is

1260
00:46:15,269 --> 00:46:16,969
working with
every single key,

1261
00:46:16,969 --> 00:46:19,349
but it's not quite
what we want just yet.

1262
00:46:19,349 --> 00:46:21,169
It would be a lot
better if we could

1263
00:46:21,169 --> 00:46:24,170
detect the specific
key that was pressed.

1264
00:46:24,170 --> 00:46:26,209
For example, only
move left when

1265
00:46:26,209 --> 00:46:28,990
the left arrow key
has been pressed.

1266
00:46:29,230 --> 00:46:31,209
To do this, we
need to work

1267
00:46:31,209 --> 00:46:32,370
out which key was pressed.

1268
00:46:32,370 --> 00:46:33,469
And we also need some way

1269
00:46:33,469 --> 00:46:34,689
of deciding that logic.

1270
00:46:34,689 --> 00:46:35,989
We need some way
of saying if

1271
00:46:35,989 --> 00:46:37,870
the left arrow
was pressed.

1272
00:46:37,870 --> 00:46:39,629
That's going to
require a few

1273
00:46:39,629 --> 00:46:41,389
new programming
concepts that

1274
00:46:41,389 --> 00:46:43,129
I need to teach you.

1275
00:46:43,129 --> 00:46:45,449
The first part
we're going to use

1276
00:46:45,449 --> 00:46:48,190
is the event variable.

1277
00:46:48,190 --> 00:46:53,050
Now, event is a
very cool variable

1278
00:46:53,050 --> 00:46:54,730
that we can add
to our functions,

1279
00:46:54,730 --> 00:46:56,549
which gives us
specific pieces of

1280
00:46:56,549 --> 00:47:00,210
information about the
event in question.

1281
00:47:00,210 --> 00:47:05,070
For example, if I said
console log events,

1282
00:47:05,070 --> 00:47:06,689
I would get a ton
of information that

1283
00:47:06,689 --> 00:47:08,870
gets printed to
the console, okay?

1284
00:47:08,870 --> 00:47:10,969
So you can ask the
browser to give you

1285
00:47:10,969 --> 00:47:13,809
specific information
about whatever event

1286
00:47:13,809 --> 00:47:15,330
just yet got triggered.

1287
00:47:15,330 --> 00:47:17,130
This is using the
event parameter.

1288
00:47:17,130 --> 00:47:18,569
The first thing
we need to do to

1289
00:47:18,569 --> 00:47:20,129
make this work is add

1290
00:47:20,129 --> 00:47:21,369
the word event to

1291
00:47:21,369 --> 00:47:23,690
the variable event inside
of these brackets.

1292
00:47:23,690 --> 00:47:26,870
In this function, in
our move left function,

1293
00:47:26,870 --> 00:47:28,990
if we add the word event.

1294
00:47:29,030 --> 00:47:32,110
We can then use that
event variable.

1295
00:47:32,110 --> 00:47:34,829
Okay, so that's
kind of step one.

1296
00:47:35,950 --> 00:47:38,969
We can then use
event do key to

1297
00:47:38,969 --> 00:47:41,170
see which key was pressed.

1298
00:47:41,170 --> 00:47:43,809
If you say console
dot log, event key,

1299
00:47:43,809 --> 00:47:45,569
what gets printed
to the console is

1300
00:47:45,569 --> 00:47:47,409
information about
which key was just

1301
00:47:47,409 --> 00:47:49,309
pressed on our keyboards,

1302
00:47:49,309 --> 00:47:51,109
which is really cool.

1303
00:47:51,109 --> 00:47:57,589
If I said console
dot log, event key,

1304
00:47:57,590 --> 00:47:59,749
I'm going to press
a few keys on

1305
00:47:59,749 --> 00:48:00,529
the keyboard now and

1306
00:48:00,529 --> 00:48:01,770
look what happens
on the console.

1307
00:48:01,770 --> 00:48:03,189
So if I press the
left arrow key,

1308
00:48:03,189 --> 00:48:05,149
it says arrow left arrow,

1309
00:48:05,149 --> 00:48:11,089
right arrow up arrow
down spacebar C, D, K,

1310
00:48:11,089 --> 00:48:14,810
L. Enter back space,

1311
00:48:14,810 --> 00:48:19,490
12,345,678.9 We've
got the minus symbol,

1312
00:48:19,490 --> 00:48:22,709
the equal symbol, shift
key, control key.

1313
00:48:22,709 --> 00:48:24,550
Each of our keys
on our keyboard

1314
00:48:24,550 --> 00:48:27,065
have a specific name,

1315
00:48:27,065 --> 00:48:30,679
which is interesting,
don't you think?

1316
00:48:30,679 --> 00:48:33,560
If we had some
way of saying

1317
00:48:33,560 --> 00:48:37,019
when the key
is arrow left,

1318
00:48:37,019 --> 00:48:39,540
we know the left arra
key is being pressed.

1319
00:48:39,540 --> 00:48:41,499
We need some way
of testing that,

1320
00:48:41,499 --> 00:48:43,500
some way of deciding
that logic.

1321
00:48:43,500 --> 00:48:44,919
Essentially meaning
when we press

1322
00:48:44,919 --> 00:48:47,559
the left key,
only move left.

1323
00:48:47,559 --> 00:48:49,320
We need something
that allows

1324
00:48:49,320 --> 00:48:52,059
us to do this. Okay?

1325
00:48:53,700 --> 00:48:57,120
In most, most
programming languages,

1326
00:48:57,120 --> 00:48:58,879
I should say, we can
use something called

1327
00:48:58,879 --> 00:49:00,059
an if statement to see

1328
00:49:00,059 --> 00:49:01,799
if a condition is true.

1329
00:49:01,799 --> 00:49:03,699
We could use that logic to

1330
00:49:03,699 --> 00:49:06,240
decide if the left
arrow key was pressed.

1331
00:49:06,240 --> 00:49:08,259
The idea is we
could say if

1332
00:49:08,259 --> 00:49:11,199
the key is the
left arrow key,

1333
00:49:11,199 --> 00:49:17,919
move our function,
run our function.

1334
00:49:17,919 --> 00:49:19,199
I'm going to teach you

1335
00:49:19,199 --> 00:49:20,240
now about if statements.

1336
00:49:20,240 --> 00:49:21,459
It essentially
allows us to

1337
00:49:21,459 --> 00:49:23,909
test if a
condition is true.

1338
00:49:23,909 --> 00:49:26,340
Now if statement
in Java script

1339
00:49:26,340 --> 00:49:28,300
takes on this
type of syntax,

1340
00:49:28,300 --> 00:49:30,219
we have the keyword if.

1341
00:49:30,219 --> 00:49:32,120
Typically in the
default theme

1342
00:49:32,120 --> 00:49:33,340
of visual studio,

1343
00:49:33,340 --> 00:49:35,939
it's a purple color to it.

1344
00:49:35,939 --> 00:49:37,339
Again, makes it
a bit easier to

1345
00:49:37,339 --> 00:49:39,379
track which bits
of code of which.

1346
00:49:39,379 --> 00:49:41,799
We then have two regular
brackets and we have

1347
00:49:41,799 --> 00:49:42,839
the condition that's being

1348
00:49:42,839 --> 00:49:44,599
tested at this point.

1349
00:49:44,599 --> 00:49:46,480
We then have an
opening curly bracket

1350
00:49:46,480 --> 00:49:48,080
and a closing
curly bracket.

1351
00:49:48,080 --> 00:49:51,540
Any code inside of
these curly brackets,

1352
00:49:51,540 --> 00:49:53,599
any piece of code will run

1353
00:49:53,599 --> 00:49:55,809
if that condition is met.

1354
00:49:55,809 --> 00:49:58,579
If that makes
sense. This is

1355
00:49:58,579 --> 00:49:59,739
the basic syntax we're

1356
00:49:59,739 --> 00:50:00,939
going to follow for this.

1357
00:50:00,939 --> 00:50:03,219
If a condition is met,

1358
00:50:03,219 --> 00:50:05,020
run this piece of code.

1359
00:50:05,020 --> 00:50:06,959
Hopefully that makes
a bit of sense.

1360
00:50:06,959 --> 00:50:09,819
We're testing to see
if something is true.

1361
00:50:10,970 --> 00:50:14,489
Now if statements are
quite typically used to

1362
00:50:14,489 --> 00:50:15,669
check if variables are

1363
00:50:15,669 --> 00:50:17,250
equal to a specific value,

1364
00:50:17,250 --> 00:50:18,749
if the condition is true,

1365
00:50:18,749 --> 00:50:20,109
that piece of code will

1366
00:50:20,109 --> 00:50:22,269
run if the condition
is not met.

1367
00:50:22,269 --> 00:50:23,789
So the condition
is not true,

1368
00:50:23,789 --> 00:50:25,329
that piece of
code won't run.

1369
00:50:25,329 --> 00:50:27,269
If that makes sense,
what we could do,

1370
00:50:27,269 --> 00:50:29,770
we could say if a
variable equals

1371
00:50:29,770 --> 00:50:32,889
a specific value,
I could say,

1372
00:50:32,889 --> 00:50:37,169
for instance, if we

1373
00:50:37,169 --> 00:50:38,770
were dealing back with
our capacity variable,

1374
00:50:38,770 --> 00:50:42,309
I could say pacity
ever equals zero.

1375
00:50:42,309 --> 00:50:45,690
I could have
cleared that timer.

1376
00:50:46,260 --> 00:50:48,960
Remember, back with
our opacity code,

1377
00:50:48,960 --> 00:50:50,800
I could have said
this, which basically

1378
00:50:50,800 --> 00:50:52,680
would mean we can't go
any more invisible.

1379
00:50:52,680 --> 00:50:53,259
That would have been

1380
00:50:53,259 --> 00:50:54,539
quite a nice way
of doing it.

1381
00:50:54,539 --> 00:50:56,280
We're taking that
opacity variable

1382
00:50:56,280 --> 00:50:58,259
and we're saying if
that ever equals zero,

1383
00:50:58,259 --> 00:50:59,999
we know that we
can no longer be

1384
00:50:59,999 --> 00:51:02,219
any more invisible if

1385
00:51:02,219 --> 00:51:03,899
capacity didn't
equal zero but

1386
00:51:03,899 --> 00:51:06,659
equaled 12345 and
so on and so on.

1387
00:51:06,659 --> 00:51:08,019
Probably would
never equal that.

1388
00:51:08,019 --> 00:51:08,979
Bepacitys only

1389
00:51:08,979 --> 00:51:13,219
0-1 But the idea is if
it didn't equal zero,

1390
00:51:13,219 --> 00:51:15,079
this piece of code
wouldn't run.

1391
00:51:15,079 --> 00:51:16,739
It's only going to run if

1392
00:51:16,739 --> 00:51:20,260
that specific
condition is met y.

1393
00:51:20,260 --> 00:51:22,314
That makes a little
bit of sense.

1394
00:51:22,314 --> 00:51:25,110
Applying this back
to our logic,

1395
00:51:25,110 --> 00:51:26,890
we could use if statements

1396
00:51:26,890 --> 00:51:28,090
to run blocks of code.

1397
00:51:28,090 --> 00:51:29,610
In certain circumstances,

1398
00:51:29,610 --> 00:51:31,029
it's very useful
if we only

1399
00:51:31,029 --> 00:51:33,169
want to run that code at

1400
00:51:33,169 --> 00:51:35,790
a very specific
point in time.

1401
00:51:35,790 --> 00:51:38,410
To fix this to our code,

1402
00:51:38,410 --> 00:51:39,509
we could have
an if statement

1403
00:51:39,509 --> 00:51:40,790
for each of our keys.

1404
00:51:40,790 --> 00:51:42,349
We could say if
the arrow key

1405
00:51:42,349 --> 00:51:43,729
is left, move left,

1406
00:51:43,729 --> 00:51:48,409
if the key is right,
move right down.

1407
00:51:48,409 --> 00:51:50,970
We could have four
different if statements,

1408
00:51:50,970 --> 00:51:52,609
as I was showing three of

1409
00:51:52,609 --> 00:51:54,170
the four different
if statements

1410
00:51:54,170 --> 00:51:55,689
for the four
different arches,

1411
00:51:55,689 --> 00:51:57,689
we could say move
left, if it's left,

1412
00:51:57,689 --> 00:51:59,289
right if it's
right, move up

1413
00:51:59,289 --> 00:52:01,559
if it's move down,
if it's down.

1414
00:52:01,559 --> 00:52:03,369
The way we could
do this using

1415
00:52:03,369 --> 00:52:05,289
the event key
is we could say

1416
00:52:05,289 --> 00:52:10,509
if event doc key equals
equals arrow left.

1417
00:52:10,509 --> 00:52:11,849
Again ember, when we did

1418
00:52:11,849 --> 00:52:13,450
events do console dotlog,

1419
00:52:13,450 --> 00:52:14,609
we were printing out what

1420
00:52:14,609 --> 00:52:16,310
those arrow keys
were called.

1421
00:52:16,310 --> 00:52:18,109
If you just remember arrow

1422
00:52:18,109 --> 00:52:20,289
left is the
left arrow key.

1423
00:52:20,289 --> 00:52:21,809
We're essentially
saying if

1424
00:52:21,809 --> 00:52:24,269
this key is ever
equal to arrow left,

1425
00:52:24,269 --> 00:52:26,630
we know the left arrow
keys being pressed

1426
00:52:26,630 --> 00:52:28,170
and we could then
run this code

1427
00:52:28,170 --> 00:52:30,044
for our left arrow key.

1428
00:52:30,044 --> 00:52:32,600
Now it's really
important to remember,

1429
00:52:32,600 --> 00:52:33,999
this just goes for most

1430
00:52:33,999 --> 00:52:35,759
of statements
in Javascript,

1431
00:52:35,759 --> 00:52:37,520
it's two equal signs.

1432
00:52:37,520 --> 00:52:39,499
When we're
comparing it's not

1433
00:52:39,499 --> 00:52:43,820
12 equal signs are the
comparison operator.

1434
00:52:43,820 --> 00:52:44,460
We're essentially

1435
00:52:44,460 --> 00:52:46,659
saying compare
this to this.

1436
00:52:46,659 --> 00:52:48,459
If you use one equal sign,

1437
00:52:48,459 --> 00:52:49,360
you're actually setting

1438
00:52:49,360 --> 00:52:51,540
that variable
to that value.

1439
00:52:51,540 --> 00:52:53,579
The reason I'm
really highlighting

1440
00:52:53,579 --> 00:52:56,079
this is that's not
technically wrong.

1441
00:52:56,079 --> 00:52:57,860
Javascript won't interpret

1442
00:52:57,860 --> 00:52:59,199
that as being incorrect,

1443
00:52:59,199 --> 00:53:00,679
because what you're
doing is you're saying

1444
00:53:00,679 --> 00:53:03,040
set this variable
to this value.

1445
00:53:03,040 --> 00:53:06,339
Nothing has got wrong
there at that point.

1446
00:53:06,450 --> 00:53:10,629
It's a bit hard to fix
when there's no error.

1447
00:53:10,629 --> 00:53:12,509
Always, just make
sure if you, if

1448
00:53:12,509 --> 00:53:14,170
statements not
working properly,

1449
00:53:14,170 --> 00:53:16,750
double check, you're
using two equal signs.

1450
00:53:16,750 --> 00:53:18,369
Okay? We're actually
going to look at

1451
00:53:18,369 --> 00:53:20,389
three equal signs
further down the line,

1452
00:53:20,389 --> 00:53:21,349
but just for now,

1453
00:53:21,349 --> 00:53:22,809
we're going to
focus on two.

1454
00:53:22,809 --> 00:53:24,289
I figure three might be a

1455
00:53:24,289 --> 00:53:26,570
bit overwhelming
for some people.

1456
00:53:26,570 --> 00:53:29,209
Let's add this logic then.

1457
00:53:29,209 --> 00:53:38,930
Let's say event k equals
equals arrow left.

1458
00:53:40,680 --> 00:53:43,479
We'll just get rid of
this console dot log

1459
00:53:43,479 --> 00:53:46,100
very quickly just to
clean up our code.

1460
00:53:46,100 --> 00:53:47,319
We'll format this to

1461
00:53:47,319 --> 00:53:48,600
make it a little
bit nicer.

1462
00:53:48,600 --> 00:53:50,679
We're essentially
saying only move

1463
00:53:50,679 --> 00:53:53,699
left when the key
is arrow left.

1464
00:53:53,699 --> 00:53:56,180
Let's see if that
worked. I'm pressing

1465
00:53:56,180 --> 00:53:57,460
space bar, nothing's
happening.

1466
00:53:57,460 --> 00:53:58,559
I'm pressing a bunch of

1467
00:53:58,559 --> 00:53:59,680
keys, nothing's happening.

1468
00:53:59,680 --> 00:54:01,099
I'm pressing the
left arrow key

1469
00:54:01,099 --> 00:54:02,619
and we're only
moving left now.

1470
00:54:02,619 --> 00:54:03,919
I'm pressing down, I'm

1471
00:54:03,919 --> 00:54:05,399
pressing up, I'm
pressing right.

1472
00:54:05,399 --> 00:54:09,579
I'm pressing left.
Pretty cool, right?

1473
00:54:09,579 --> 00:54:12,119
That works perfectly for

1474
00:54:12,119 --> 00:54:14,940
if we're moving in one
specific direction.

1475
00:54:14,940 --> 00:54:16,779
Let's say we want to move

1476
00:54:16,779 --> 00:54:18,380
in a few different
directions.

1477
00:54:18,380 --> 00:54:20,679
In that case, we'd
need some way of

1478
00:54:20,679 --> 00:54:22,639
controlling the

1479
00:54:22,639 --> 00:54:24,259
different directions
we're going into.

1480
00:54:24,259 --> 00:54:25,599
Right now, We've
got that move left

1481
00:54:25,599 --> 00:54:26,880
function, which
is perfect.

1482
00:54:26,880 --> 00:54:29,499
We've got that if
statement in move left.

1483
00:54:29,499 --> 00:54:32,139
It would be a lot better
if perhaps we had

1484
00:54:32,139 --> 00:54:34,399
one function that decided

1485
00:54:34,399 --> 00:54:36,559
which direction we
should move in.

1486
00:54:36,559 --> 00:54:38,119
Let's say we're going to

1487
00:54:38,119 --> 00:54:39,380
create a move
right function.

1488
00:54:39,380 --> 00:54:40,519
Okay, let's just get rid

1489
00:54:40,519 --> 00:54:42,640
of this statement
entirely.

1490
00:54:44,800 --> 00:54:47,039
We've got move left.

1491
00:54:47,039 --> 00:54:49,719
Let's also have
move right as well.

1492
00:54:49,719 --> 00:54:51,460
Put us, copy and paste

1493
00:54:51,460 --> 00:54:53,599
this. And we'll
say move right.

1494
00:54:55,430 --> 00:54:58,510
This can all stay
pretty much the same

1495
00:54:58,510 --> 00:55:00,350
except instead of minus

1496
00:55:00,350 --> 00:55:02,509
ten, we'll say plus ten.

1497
00:55:03,510 --> 00:55:05,850
Let's then have a function

1498
00:55:05,850 --> 00:55:07,169
we could call this move.

1499
00:55:07,169 --> 00:55:11,149
For instance, let's also

1500
00:55:11,149 --> 00:55:12,689
change this key
down event to

1501
00:55:12,689 --> 00:55:15,489
that move
function like so.

1502
00:55:15,489 --> 00:55:17,629
Now the idea is we
could have that

1503
00:55:17,629 --> 00:55:20,010
if statement logic
inside of this function.

1504
00:55:20,010 --> 00:55:20,929
The idea is when we

1505
00:55:20,929 --> 00:55:22,250
press a key on
our keyboard,

1506
00:55:22,250 --> 00:55:23,750
it will run the
move function.

1507
00:55:23,750 --> 00:55:24,990
We'll then have
an if statement

1508
00:55:24,990 --> 00:55:26,309
in here that
tells us which

1509
00:55:26,309 --> 00:55:30,149
function we'd like
to use. Cool,

1510
00:55:32,030 --> 00:55:34,149
Essentially, we

1511
00:55:34,149 --> 00:55:35,549
could change our
code into this.

1512
00:55:35,549 --> 00:55:36,989
We could say function move

1513
00:55:36,989 --> 00:55:38,470
pass in that
event variable.

1514
00:55:38,470 --> 00:55:40,510
We could then say
if the event key

1515
00:55:40,510 --> 00:55:42,130
ever equals arrow left,

1516
00:55:42,130 --> 00:55:44,210
run our move
left function.

1517
00:55:44,210 --> 00:55:46,449
If the function ever

1518
00:55:46,449 --> 00:55:49,229
equals arrow
right, move right.

1519
00:55:49,229 --> 00:55:50,910
We can have a
specific if statement

1520
00:55:50,910 --> 00:55:53,300
for each of those
movement styles.

1521
00:55:53,300 --> 00:55:55,550
It's a lot better
having this contained

1522
00:55:55,550 --> 00:55:56,669
in one function
than having

1523
00:55:56,669 --> 00:55:57,770
each of those
if statements

1524
00:55:57,770 --> 00:55:58,669
contained in every single

1525
00:55:58,669 --> 00:55:59,590
one of those functions.

1526
00:55:59,590 --> 00:56:01,329
If that makes
sense, we've got

1527
00:56:01,329 --> 00:56:03,309
one general move
function that

1528
00:56:03,309 --> 00:56:05,110
just controls
which function

1529
00:56:05,110 --> 00:56:07,770
runs at that specific
point in time.

1530
00:56:07,770 --> 00:56:10,389
Hopefully that makes
a bit of sense.

1531
00:56:10,389 --> 00:56:12,289
Modifying our
code to this.

1532
00:56:12,289 --> 00:56:14,890
We could say event.

1533
00:56:15,050 --> 00:56:23,009
If event k equals
equals arrow left,

1534
00:56:23,009 --> 00:56:26,329
we know we should
move left.

1535
00:56:27,720 --> 00:56:35,519
However, if the vent
k equals arrow right,

1536
00:56:35,520 --> 00:56:40,499
we should move right
instead, like so.

1537
00:56:40,499 --> 00:56:42,520
This is all
working correctly,

1538
00:56:42,520 --> 00:56:44,079
which I'm hoping it is.

1539
00:56:44,079 --> 00:56:46,180
If I move up and down,
nothing happens.

1540
00:56:46,180 --> 00:56:47,439
If I move left,
I move left,

1541
00:56:47,439 --> 00:56:48,979
If I move right,
I move right.

1542
00:56:48,979 --> 00:56:52,219
I can now move in two
different directions.

1543
00:56:52,219 --> 00:56:57,399
Which is interesting.
That's really cool.

1544
00:56:59,310 --> 00:57:01,129
That's all being based

1545
00:57:01,129 --> 00:57:02,310
around this one
movement function.

1546
00:57:02,310 --> 00:57:03,809
We're saying if
it's left, left,

1547
00:57:03,809 --> 00:57:05,029
if it's right, move right.

1548
00:57:05,029 --> 00:57:05,469
We've got

1549
00:57:05,469 --> 00:57:07,389
our nice movement
functions up here.

1550
00:57:07,389 --> 00:57:09,170
We've got our
two F statements

1551
00:57:09,170 --> 00:57:11,130
inside of this one
move function.

1552
00:57:11,130 --> 00:57:12,969
That's funny
enough, very close

1553
00:57:12,969 --> 00:57:14,469
to how our assignments
being built.

1554
00:57:14,469 --> 00:57:15,770
There is one
big difference,

1555
00:57:15,770 --> 00:57:17,234
which we'll get to,

1556
00:57:17,234 --> 00:57:19,259
but this is the logic

1557
00:57:19,259 --> 00:57:21,499
we're using, which
is quite nice.

1558
00:57:21,499 --> 00:57:23,839
Now, there is some
duplication in

1559
00:57:23,839 --> 00:57:25,000
these functions
that we should

1560
00:57:25,000 --> 00:57:27,040
probably look at
possibly fixing,

1561
00:57:27,040 --> 00:57:28,499
but we'll worry
about that a

1562
00:57:28,499 --> 00:57:30,219
bit later down the line.

1563
00:57:30,219 --> 00:57:32,719
What we could
do is pass in

1564
00:57:32,719 --> 00:57:35,680
this variable into each
of these functions,

1565
00:57:35,680 --> 00:57:38,279
or entirely just
have these bits

1566
00:57:38,279 --> 00:57:40,020
of code inside these
if statements.

1567
00:57:40,020 --> 00:57:41,320
Again, we're
going to focus

1568
00:57:41,320 --> 00:57:42,660
on this segmented
approach.

1569
00:57:42,660 --> 00:57:45,590
It's a bit easier to
understand initially.

1570
00:57:45,590 --> 00:57:47,439
Now something
else to learn

1571
00:57:47,439 --> 00:57:48,739
about if statements is,

1572
00:57:48,739 --> 00:57:51,060
we can run a
piece of code.

1573
00:57:51,060 --> 00:57:53,879
If no statements are
considered true,

1574
00:57:53,879 --> 00:57:56,820
this is called an
L. Essentially,

1575
00:57:56,820 --> 00:57:58,100
if we've got our
movement function,

1576
00:57:58,100 --> 00:58:01,440
if we say event key
equals equals arrow left,

1577
00:58:01,440 --> 00:58:03,680
we're not using
the arrow left.

1578
00:58:03,680 --> 00:58:05,059
We're not using the
arrow left key,

1579
00:58:05,059 --> 00:58:06,339
the left arrow key.

1580
00:58:06,339 --> 00:58:08,459
This piece of
code won't run.

1581
00:58:08,459 --> 00:58:10,759
This piece of
code won't run.

1582
00:58:10,759 --> 00:58:13,719
But this piece of
code and the Ls will,

1583
00:58:13,719 --> 00:58:16,339
we can use an L
to run a piece of

1584
00:58:16,339 --> 00:58:19,419
code if that
condition is not met.

1585
00:58:19,419 --> 00:58:22,739
It's like a good
default state to use.

1586
00:58:22,739 --> 00:58:25,079
Going a bit
further than this,

1587
00:58:25,079 --> 00:58:27,479
we can use something
called an L if.

1588
00:58:27,479 --> 00:58:29,319
Now, L if is used to check

1589
00:58:29,319 --> 00:58:31,440
for multiple conditions
in a sequence.

1590
00:58:31,440 --> 00:58:33,360
It starts with
this if statement.

1591
00:58:33,360 --> 00:58:34,619
Here it's
essentially saying,

1592
00:58:34,619 --> 00:58:37,039
if the left arrow key
is pressed, do this.

1593
00:58:37,039 --> 00:58:39,120
If the left arra
key isn't pressed,

1594
00:58:39,120 --> 00:58:40,039
we then move down to

1595
00:58:40,039 --> 00:58:41,580
this second if statement.

1596
00:58:41,580 --> 00:58:43,359
So this lv just here.

1597
00:58:43,359 --> 00:58:45,559
This will run if the
left arrow key is not

1598
00:58:45,559 --> 00:58:48,139
pressed but the
right arrow key is.

1599
00:58:48,139 --> 00:58:51,059
We can then add another
live that says if

1600
00:58:51,059 --> 00:58:52,339
the left arrow key or

1601
00:58:52,339 --> 00:58:54,755
the right arrow
key isn't pressed,

1602
00:58:54,755 --> 00:58:57,050
check if the
upararky is pressed.

1603
00:58:57,050 --> 00:58:59,429
It goes on in a
sequence like that.

1604
00:58:59,429 --> 00:59:01,989
The difference
between these if

1605
00:59:01,989 --> 00:59:05,010
statements here and
these L if statements,

1606
00:59:05,010 --> 00:59:06,629
these conditions will be

1607
00:59:06,629 --> 00:59:07,949
checked at the same time.

1608
00:59:07,949 --> 00:59:10,109
It'll check if the left
arrochy and the right

1609
00:59:10,109 --> 00:59:11,410
arrochy are being pressed

1610
00:59:11,410 --> 00:59:13,370
at exactly the
same moment.

1611
00:59:13,370 --> 00:59:15,729
Whereas this approach
will check it

1612
00:59:15,729 --> 00:59:16,609
in order if the

1613
00:59:16,609 --> 00:59:17,890
left arrochy is
being pressed.

1614
00:59:17,890 --> 00:59:19,309
We're not going to be
checking for the right

1615
00:59:19,309 --> 00:59:22,100
archy or the up archy
or the down archy.

1616
00:59:22,100 --> 00:59:24,210
It will follow
that sequence.

1617
00:59:24,210 --> 00:59:25,349
It's checking to see

1618
00:59:25,349 --> 00:59:26,289
if the other
conditions are

1619
00:59:26,289 --> 00:59:29,890
met before checking that
specific condition.

1620
00:59:29,890 --> 00:59:32,269
If that makes
sense, we can even

1621
00:59:32,269 --> 00:59:33,870
combine an Ls
to the majority

1622
00:59:33,870 --> 00:59:35,050
of these else
if statements.

1623
00:59:35,050 --> 00:59:36,309
Again, we could
follow this order.

1624
00:59:36,309 --> 00:59:37,550
If left arrow
is not pressed,

1625
00:59:37,550 --> 00:59:38,329
it's going to check if

1626
00:59:38,329 --> 00:59:39,410
the right arrow
is pressed.

1627
00:59:39,410 --> 00:59:40,670
If neither of these rakes

1628
00:59:40,670 --> 00:59:42,049
are pressed, we'll
check this one.

1629
00:59:42,049 --> 00:59:43,469
If these three keys aren't

1630
00:59:43,469 --> 00:59:44,689
pressed, we'll
check this one.

1631
00:59:44,689 --> 00:59:46,950
If all four of these
rokeys aren't pressed,

1632
00:59:46,950 --> 00:59:47,769
we'll run this piece of

1633
00:59:47,769 --> 00:59:48,870
code in this L statement.

1634
00:59:48,870 --> 00:59:52,270
It's quite a nice catch
all in that sense,

1635
00:59:52,270 --> 00:59:54,869
saying if none of these
conditions are true,

1636
00:59:54,869 --> 00:59:58,789
do this essentially,
which is quite fun.

1637
00:59:58,790 --> 01:00:01,769
Now this can be a bit
complicated to see.

1638
01:00:01,769 --> 01:00:02,869
Initially, we've
got all these

1639
01:00:02,869 --> 01:00:04,330
If statements and
all these LCF

1640
01:00:04,330 --> 01:00:06,250
statements all
combining together.

1641
01:00:06,250 --> 01:00:07,710
It's quite good practice.

1642
01:00:07,710 --> 01:00:09,790
If you've got multiple
LF statements,

1643
01:00:09,790 --> 01:00:10,589
it can be quite

1644
01:00:10,589 --> 01:00:12,070
challenging to
read and manage.

1645
01:00:12,070 --> 01:00:13,869
What you can
use instead is

1646
01:00:13,869 --> 01:00:16,660
something called a switch
statement. Instead,

1647
01:00:16,660 --> 01:00:18,829
it's very similar
to else if,

1648
01:00:18,829 --> 01:00:21,610
but we use case for each
of these conditions.

1649
01:00:21,610 --> 01:00:23,849
So instead of
saying lv event

1650
01:00:23,849 --> 01:00:25,429
do key arrow, right?

1651
01:00:25,429 --> 01:00:27,829
We say switch whatever
the condition is,

1652
01:00:27,829 --> 01:00:30,249
then case value one,
value two, value three.

1653
01:00:30,249 --> 01:00:32,309
And then the default that

1654
01:00:32,309 --> 01:00:33,089
might look a little

1655
01:00:33,089 --> 01:00:34,289
bit confusing
initially, right?

1656
01:00:34,289 --> 01:00:35,429
We're essentially
going to take

1657
01:00:35,429 --> 01:00:37,029
this piece of code and use

1658
01:00:37,029 --> 01:00:39,249
a switch statement that

1659
01:00:39,249 --> 01:00:40,569
would look something
like this.

1660
01:00:40,569 --> 01:00:42,989
We're essentially
saying check

1661
01:00:42,989 --> 01:00:45,109
event key if
it's ever arrow,

1662
01:00:45,109 --> 01:00:47,984
left arrow, right arrow
up, or arrow down.

1663
01:00:47,984 --> 01:00:49,920
Run this piece of code.

1664
01:00:49,920 --> 01:00:51,840
When you're dealing
with switch statements,

1665
01:00:51,840 --> 01:00:52,539
you need to use

1666
01:00:52,539 --> 01:00:55,599
this break variable
just here.

1667
01:00:55,599 --> 01:00:57,039
It just means break out of

1668
01:00:57,039 --> 01:00:58,919
that current section we're

1669
01:00:58,919 --> 01:01:00,959
run, if that makes sense.

1670
01:01:01,050 --> 01:01:04,909
But switch statements are

1671
01:01:04,909 --> 01:01:06,069
generally a bit easier to

1672
01:01:06,069 --> 01:01:10,809
read than if and
so on and so on.

1673
01:01:10,809 --> 01:01:12,650
It just means you don't
have to duplicate

1674
01:01:12,650 --> 01:01:14,149
this bit over
and over again.

1675
01:01:14,149 --> 01:01:15,309
You're just going to use

1676
01:01:15,309 --> 01:01:17,049
this case part just there.

1677
01:01:17,049 --> 01:01:19,190
Now, the nice thing is
for the assignment,

1678
01:01:19,190 --> 01:01:20,929
there is no difference
between using

1679
01:01:20,929 --> 01:01:23,870
this approach or
this approach.

1680
01:01:23,870 --> 01:01:25,230
They both give you exactly

1681
01:01:25,230 --> 01:01:26,610
the same number of marks.

1682
01:01:26,610 --> 01:01:28,349
The cool thing is
I've actually used

1683
01:01:28,349 --> 01:01:30,830
a switch statement in
the second assignment.

1684
01:01:30,830 --> 01:01:33,109
Do you open up the second
assignment piece of

1685
01:01:33,109 --> 01:01:35,029
code which

1686
01:01:35,029 --> 01:01:36,529
I should have had
opened prior to this?

1687
01:01:36,529 --> 01:01:39,510
I do apologize. It's
a good opportunity

1688
01:01:39,510 --> 01:01:40,249
for me to show you where

1689
01:01:40,249 --> 01:01:41,889
this is located though.

1690
01:01:41,889 --> 01:01:45,570
So we'll just open up
a student preview,

1691
01:01:45,930 --> 01:01:47,709
scroll down a bit

1692
01:01:47,709 --> 01:01:49,189
to assessments
and submissions,

1693
01:01:49,189 --> 01:01:52,369
go to as two atop.

1694
01:01:52,369 --> 01:01:54,529
We can download
it from here,

1695
01:01:56,690 --> 01:02:01,029
we'll just extract this
like so we'll just

1696
01:02:01,029 --> 01:02:05,329
open this up just so
everyone can see it go.

1697
01:02:05,329 --> 01:02:07,590
I've used a
switch statement,

1698
01:02:07,590 --> 01:02:10,009
but when I'm
populating that ma,

1699
01:02:10,009 --> 01:02:11,810
so there is a
switch statement

1700
01:02:11,810 --> 01:02:13,335
in your assignment
already.

1701
01:02:13,335 --> 01:02:15,419
But it's also an
example of using

1702
01:02:15,419 --> 01:02:17,839
if statements along
with el as well.

1703
01:02:17,839 --> 01:02:19,039
Both of these
would get you

1704
01:02:19,039 --> 01:02:20,500
the same number of marks.

1705
01:02:20,500 --> 01:02:22,559
It's just however
you'd prefer to learn.

1706
01:02:22,559 --> 01:02:23,979
If you think
switch looks a

1707
01:02:23,979 --> 01:02:25,479
lot easier, looks
a lot cleaner,

1708
01:02:25,479 --> 01:02:26,860
and it's a lot
easier to manage,

1709
01:02:26,860 --> 01:02:28,759
you switch however
you think.

1710
01:02:28,759 --> 01:02:30,239
Elseif makes more
sense because you

1711
01:02:30,239 --> 01:02:32,380
can clearly see what's
being compared.

1712
01:02:32,380 --> 01:02:34,739
Go for that as
well. There's not

1713
01:02:34,739 --> 01:02:36,839
really a right or wrong
way of doing this.

1714
01:02:36,839 --> 01:02:39,439
There's preferred
ways, absolutely.

1715
01:02:39,439 --> 01:02:41,779
There's not
really a bang on

1716
01:02:41,779 --> 01:02:44,999
an incorrect or correct
way of doing it,

1717
01:02:44,999 --> 01:02:48,499
if we were going to
modify our code then.

1718
01:02:48,970 --> 01:02:51,770
Let's add a
switch statement

1719
01:02:51,770 --> 01:02:52,609
onto this just so it's a

1720
01:02:52,609 --> 01:02:54,310
bit easier to understand.

1721
01:02:54,310 --> 01:03:00,529
We could say
switch event key.

1722
01:03:00,570 --> 01:03:01,990
Essentially,

1723
01:03:01,990 --> 01:03:03,689
we're checking for
whatever the key is.

1724
01:03:03,689 --> 01:03:09,350
We could then say case
arrow left colon,

1725
01:03:09,350 --> 01:03:12,410
move left, Run our
move left function.

1726
01:03:12,410 --> 01:03:14,090
When the left arrow
key is pressed,

1727
01:03:14,090 --> 01:03:15,449
we need to break
out of that.

1728
01:03:15,449 --> 01:03:18,769
When we're over it,
we can then say case

1729
01:03:19,390 --> 01:03:24,330
arrow, right, colon,

1730
01:03:24,330 --> 01:03:29,449
move right, and
then break.

1731
01:03:29,449 --> 01:03:31,149
Then obviously
you probably

1732
01:03:31,149 --> 01:03:31,970
have the other arches,

1733
01:03:31,970 --> 01:03:33,369
but we haven't quite
done that just yet.

1734
01:03:33,369 --> 01:03:34,969
So we're going to add
the default onto this,

1735
01:03:34,969 --> 01:03:35,969
which is essentially like

1736
01:03:35,969 --> 01:03:37,169
that else at the end.

1737
01:03:37,169 --> 01:03:38,729
This would run if none

1738
01:03:38,729 --> 01:03:40,829
of those conditions
are met.

1739
01:03:41,110 --> 01:03:43,189
So we're just going
to leave this

1740
01:03:43,189 --> 01:03:43,749
blank because there's

1741
01:03:43,749 --> 01:03:44,849
something really to add.

1742
01:03:44,849 --> 01:03:47,334
If we were to
form at this,

1743
01:03:47,334 --> 01:03:49,659
this should still
allow us to move

1744
01:03:49,659 --> 01:03:51,319
the circle absolutely
the same way.

1745
01:03:51,319 --> 01:03:52,919
It's just a little
bit less code.

1746
01:03:52,919 --> 01:03:54,200
It's a little bit nicer

1747
01:03:54,200 --> 01:03:55,740
to look at in some cases.

1748
01:03:55,740 --> 01:03:56,739
But just using those

1749
01:03:56,739 --> 01:03:57,999
if statements is
fine as well.

1750
01:03:57,999 --> 01:03:59,559
You prefer if this,

1751
01:03:59,559 --> 01:04:04,820
if this go for that
approach instead.

1752
01:04:04,820 --> 01:04:06,179
But again, some people

1753
01:04:06,179 --> 01:04:07,159
prefer this
approach because

1754
01:04:07,159 --> 01:04:09,560
it's slightly easier
to read in some cases.

1755
01:04:09,560 --> 01:04:13,640
Okay, variable scope.

1756
01:04:13,640 --> 01:04:14,759
Now, when a variable is

1757
01:04:14,759 --> 01:04:16,220
created inside
of a function,

1758
01:04:16,220 --> 01:04:17,800
it's only
accessible inside

1759
01:04:17,800 --> 01:04:19,539
the function
it's created in.

1760
01:04:19,539 --> 01:04:21,539
Those variables
are then recreated

1761
01:04:21,539 --> 01:04:24,240
each time that
function is cooled.

1762
01:04:24,510 --> 01:04:27,570
Now the thing is
we can create

1763
01:04:27,570 --> 01:04:28,690
a variable
that's available

1764
01:04:28,690 --> 01:04:29,790
in every single function,

1765
01:04:29,790 --> 01:04:31,470
but more importantly,
it can retain

1766
01:04:31,470 --> 01:04:32,649
its value when those

1767
01:04:32,649 --> 01:04:34,209
functions are
cooled again.

1768
01:04:34,209 --> 01:04:37,149
This whole concept is

1769
01:04:37,149 --> 01:04:39,930
created by declaring
that variable

1770
01:04:39,930 --> 01:04:41,150
outside of any functions.

1771
01:04:41,150 --> 01:04:42,109
The cool thing is we're

1772
01:04:42,109 --> 01:04:43,909
already slightly
doing that.

1773
01:04:43,909 --> 01:04:45,649
What I mean by
that is this

1774
01:04:45,649 --> 01:04:47,350
is a global variable.

1775
01:04:47,350 --> 01:04:49,050
If we put a variable

1776
01:04:49,050 --> 01:04:50,330
outside of any functions,

1777
01:04:50,330 --> 01:04:51,789
this variable
is accessible

1778
01:04:51,789 --> 01:04:53,410
in any of our functions.

1779
01:04:53,410 --> 01:04:54,829
In this case,
we're saying let

1780
01:04:54,829 --> 01:04:56,609
my variable equals zero.

1781
01:04:56,609 --> 01:04:58,490
We can then access
this variable

1782
01:04:58,490 --> 01:04:59,949
in any single
function we like.

1783
01:04:59,949 --> 01:05:02,720
It's called a
global variable.

1784
01:05:02,720 --> 01:05:06,769
Now, when global
variables are used,

1785
01:05:06,769 --> 01:05:08,250
they've already
been defined.

1786
01:05:08,250 --> 01:05:10,690
We don't need the let
or constant keyword.

1787
01:05:10,690 --> 01:05:11,669
We need it when we've

1788
01:05:11,669 --> 01:05:13,409
initially declared
them up here.

1789
01:05:13,409 --> 01:05:15,269
But we don't
need to add that

1790
01:05:15,269 --> 01:05:17,409
let or constant again
inside of these.

1791
01:05:17,409 --> 01:05:18,790
But the point is
we can actually

1792
01:05:18,790 --> 01:05:20,429
create these global
variables and

1793
01:05:20,429 --> 01:05:21,649
use them throughout all of

1794
01:05:21,649 --> 01:05:24,329
our other functions,
which is quite nice.

1795
01:05:24,329 --> 01:05:26,329
We've actually already
done that in our code

1796
01:05:26,329 --> 01:05:28,460
up here with this
circle variable.

1797
01:05:28,460 --> 01:05:30,269
When we've said
constant circle

1798
01:05:30,269 --> 01:05:32,490
equals document docquary,
select a circle.

1799
01:05:32,490 --> 01:05:34,050
We're using this circle

1800
01:05:34,050 --> 01:05:35,590
in each of these
functions.

1801
01:05:35,590 --> 01:05:37,750
We don't have to create
this circle variable.

1802
01:05:37,750 --> 01:05:40,449
Again, this is what a
global variable is.

1803
01:05:40,449 --> 01:05:41,649
It's a variable
that we can

1804
01:05:41,649 --> 01:05:43,930
access inside of all
of our functions.

1805
01:05:43,930 --> 01:05:45,090
It's declared outside

1806
01:05:45,090 --> 01:05:46,249
the functions that we can

1807
01:05:46,249 --> 01:05:47,209
then continue to use

1808
01:05:47,209 --> 01:05:49,089
again and again and again.

1809
01:05:49,089 --> 01:05:54,089
Pretty cool, right?
Hopefully you've

1810
01:05:54,089 --> 01:05:54,769
understood everything

1811
01:05:54,769 --> 01:05:55,969
we've gone through today.

1812
01:05:55,969 --> 01:05:57,689
We've hit the
halfway point

1813
01:05:57,689 --> 01:05:59,339
now, which is nice

1814
01:05:59,339 --> 01:06:01,369
if you are
struggling a bit.

1815
01:06:01,369 --> 01:06:02,669
I do recommend
going back and

1816
01:06:02,669 --> 01:06:04,410
maybe rewatching the
lecture recording.

1817
01:06:04,410 --> 01:06:05,249
There has been a lot of

1818
01:06:05,249 --> 01:06:06,549
big concepts
we've gone over.

1819
01:06:06,549 --> 01:06:09,210
We've looked at CSS,
key down events,

1820
01:06:09,210 --> 01:06:09,990
if statements,

1821
01:06:09,990 --> 01:06:12,490
switch statements
L statements.

1822
01:06:12,490 --> 01:06:14,709
We've gone through
quite a lot.

1823
01:06:14,709 --> 01:06:16,829
I would say doing
the exercises is

1824
01:06:16,829 --> 01:06:19,249
by far the best way of
learning this stuff.

1825
01:06:19,249 --> 01:06:21,190
Please do try
this exercise.

1826
01:06:21,190 --> 01:06:24,089
If you download exercise
one, the zip file,

1827
01:06:24,089 --> 01:06:25,749
exercise one
and extract it,

1828
01:06:25,749 --> 01:06:27,109
you'll get something that

1829
01:06:27,109 --> 01:06:28,309
looks a bit like this.

1830
01:06:28,309 --> 01:06:31,209
What I'll do is just
describe this because I

1831
01:06:31,209 --> 01:06:32,329
don't think we've
actually got the

1832
01:06:32,329 --> 01:06:34,589
exercise visible just yet.

1833
01:06:34,589 --> 01:06:37,409
If you download
exercise one,

1834
01:06:37,580 --> 01:06:39,900
I'm going to make sure
you're extracting

1835
01:06:39,900 --> 01:06:42,100
it as well. That's
really important.

1836
01:06:42,100 --> 01:06:44,759
You'll get something
that looks like this.

1837
01:06:44,759 --> 01:06:47,179
I want you to add
a script tag to

1838
01:06:47,179 --> 01:06:49,359
this page so that you

1839
01:06:49,359 --> 01:06:52,619
can then add some Java
script to it. Okay,

1840
01:06:53,040 --> 01:06:55,580
I want you to add
a click event

1841
01:06:55,580 --> 01:06:57,580
to that circle element.

1842
01:06:57,580 --> 01:06:58,819
Make it so that when you

1843
01:06:58,819 --> 01:06:59,800
click on that circle,

1844
01:06:59,800 --> 01:07:01,679
an alert box will
pop up that says,

1845
01:07:01,679 --> 01:07:02,780
this circle was pressed

1846
01:07:02,780 --> 01:07:04,920
or the circle was pressed.

1847
01:07:05,120 --> 01:07:07,339
Alter your code
slightly and

1848
01:07:07,339 --> 01:07:08,840
make it so that when you
click on the circle,

1849
01:07:08,840 --> 01:07:10,280
you're then
moving the circle

1850
01:07:10,280 --> 01:07:12,699
ten pixels to the left.

1851
01:07:12,699 --> 01:07:15,219
Once that's working,
change it from

1852
01:07:15,219 --> 01:07:17,440
a click event to
a key down event.

1853
01:07:17,440 --> 01:07:18,679
You should then
make it so that

1854
01:07:18,679 --> 01:07:19,679
when you click on a key,

1855
01:07:19,679 --> 01:07:22,459
that circle will move
ten pixels to the left.

1856
01:07:22,459 --> 01:07:24,459
Any key at all. You
press on the key,

1857
01:07:24,459 --> 01:07:27,239
that circle will
move ten pixels.

1858
01:07:27,980 --> 01:07:30,920
Add four other
if statements.

1859
01:07:30,920 --> 01:07:32,680
You want an if statement,

1860
01:07:32,680 --> 01:07:34,479
a down if statement,
right if statement,

1861
01:07:34,479 --> 01:07:35,880
and a left if statement.

1862
01:07:35,880 --> 01:07:37,599
Okay, so the idea is when

1863
01:07:37,599 --> 01:07:39,299
you press left,
circle moves left.

1864
01:07:39,299 --> 01:07:41,079
When you move right,
the circle moves right.

1865
01:07:41,079 --> 01:07:42,659
When you move up,
the circle moves up.

1866
01:07:42,659 --> 01:07:45,239
When you press down,
the circle moves down.

1867
01:07:45,239 --> 01:07:47,479
You'll need arrow
up, arrow down,

1868
01:07:47,479 --> 01:07:48,899
arrow right,
and arrow left.

1869
01:07:48,899 --> 01:07:49,999
You'll need if
statement for

1870
01:07:49,999 --> 01:07:51,260
each of those arrow keys.

1871
01:07:51,260 --> 01:07:51,980
Now remember,

1872
01:07:51,980 --> 01:07:54,199
one if statement
can follow another.

1873
01:07:54,199 --> 01:07:56,140
You should only be styling

1874
01:07:56,140 --> 01:07:58,299
the left and top
properties in

1875
01:07:58,299 --> 01:08:00,459
the CSS if you want
to move up or down,

1876
01:08:00,459 --> 01:08:02,259
either minus ten or plus

1877
01:08:02,259 --> 01:08:04,335
ten from the top property.

1878
01:08:04,335 --> 01:08:06,789
Now, instead of once
that's working,

1879
01:08:06,789 --> 01:08:08,169
that's a big ask as well.

1880
01:08:08,169 --> 01:08:09,669
Once that's
working, instead of

1881
01:08:09,669 --> 01:08:11,910
moving the circle
ten pixels,

1882
01:08:11,910 --> 01:08:14,570
I want you to use an
interval instead.

1883
01:08:14,570 --> 01:08:16,209
So when you press the key,

1884
01:08:16,209 --> 01:08:18,850
that interval will
move constantly,

1885
01:08:18,850 --> 01:08:21,284
consistently. Okay?

1886
01:08:21,284 --> 01:08:24,619
Each arrow should trigger
a different timer,

1887
01:08:24,619 --> 01:08:26,799
and each timer will
need its own function.

1888
01:08:26,799 --> 01:08:29,299
You should have five
functions for this,

1889
01:08:29,299 --> 01:08:31,179
one for the key
down event,

1890
01:08:31,179 --> 01:08:32,899
and one for four
directions.

1891
01:08:32,899 --> 01:08:34,559
Up, down, left and right.

1892
01:08:34,559 --> 01:08:36,239
You'll need to
clear the timer.

1893
01:08:36,239 --> 01:08:38,299
Otherwise, the circle
will get faster and

1894
01:08:38,299 --> 01:08:41,579
faster and faster after
each key press event.

1895
01:08:41,579 --> 01:08:44,399
Okay. Please do
give this a go.

1896
01:08:44,399 --> 01:08:46,519
If you've done this well,

1897
01:08:46,519 --> 01:08:47,559
you should be in

1898
01:08:47,559 --> 01:08:49,579
a fantastic position
for the assignment.

1899
01:08:49,579 --> 01:08:51,279
I saw a few people
struggle with

1900
01:08:51,279 --> 01:08:52,499
the first assignment
because they

1901
01:08:52,499 --> 01:08:54,080
didn't do these exercises.

1902
01:08:54,080 --> 01:08:55,379
I do recommend doing

1903
01:08:55,379 --> 01:08:57,834
these exercises.
Give it a go,

1904
01:08:57,834 --> 01:09:00,609
okay. And then we'll

1905
01:09:00,609 --> 01:09:03,289
come back and do a
bit more on movement.

1906
01:09:03,289 --> 01:09:06,470
Okay, pause the video,
try the exercises,

1907
01:09:06,470 --> 01:09:08,469
and then we'll
come back to a bit

1908
01:09:08,469 --> 01:09:11,189
more on some
movement. Sound Good.

1909
01:09:11,189 --> 01:09:14,409
Perfect, Right,

1910
01:09:14,409 --> 01:09:15,429
hopefully you have had to

1911
01:09:15,429 --> 01:09:16,530
go at those exercises.

1912
01:09:16,530 --> 01:09:18,109
This is one of those
really rare times

1913
01:09:18,109 --> 01:09:18,989
where I'm
actually going to

1914
01:09:18,989 --> 01:09:20,589
do the exercise with you.

1915
01:09:20,589 --> 01:09:23,529
This is just, we need

1916
01:09:23,529 --> 01:09:24,949
this for some of the

1917
01:09:24,949 --> 01:09:26,769
work we're about
to be doing.

1918
01:09:26,769 --> 01:09:28,629
Your exercise was to

1919
01:09:28,629 --> 01:09:30,389
essentially get this
circle moving around

1920
01:09:30,389 --> 01:09:32,269
the screen using
intervals as

1921
01:09:32,269 --> 01:09:35,314
well. So opening this up,

1922
01:09:35,314 --> 01:09:38,239
we'll just cancel
our week three

1923
01:09:38,239 --> 01:09:40,359
and open up exercise one.

1924
01:09:40,359 --> 01:09:41,559
We've got a lot of stuff

1925
01:09:41,559 --> 01:09:43,179
open, it's not very good.

1926
01:09:43,179 --> 01:09:45,819
Try and be a bit more
organized than be.

1927
01:09:45,819 --> 01:09:47,919
We'll add a
script tag onto

1928
01:09:47,919 --> 01:09:50,659
this. We'll say script.

1929
01:09:50,659 --> 01:09:54,179
So we'll just say scripts,

1930
01:09:54,179 --> 01:09:57,259
can't forget the
defer onto this.

1931
01:09:57,259 --> 01:09:59,679
Now again, the
ID is circle.

1932
01:09:59,679 --> 01:10:01,099
It's good to
remember that.

1933
01:10:01,099 --> 01:10:05,400
Create that scripts
tag scripts.

1934
01:10:05,400 --> 01:10:06,939
First thing we
should do is

1935
01:10:06,939 --> 01:10:08,099
find the circle elements

1936
01:10:08,099 --> 01:10:09,939
constant circle equals

1937
01:10:09,939 --> 01:10:12,599
document query selector

1938
01:10:13,130 --> 01:10:17,629
hashtag circle. Got to
leave that hashtag,

1939
01:10:17,629 --> 01:10:20,189
we should then have
our movement function,

1940
01:10:20,189 --> 01:10:24,649
let's say function
move or movement.

1941
01:10:24,649 --> 01:10:26,349
Again, the name
is up to you.

1942
01:10:26,349 --> 01:10:28,209
At this stage, it's

1943
01:10:28,209 --> 01:10:29,029
important we pass in

1944
01:10:29,029 --> 01:10:31,169
the event variable
into this.

1945
01:10:32,130 --> 01:10:34,529
We've accidentally
got rid of that.

1946
01:10:34,529 --> 01:10:37,469
We don't want to
do that. Now we

1947
01:10:37,469 --> 01:10:38,649
could use a
switch statement.

1948
01:10:38,649 --> 01:10:41,149
We could use, again,
it's entirely up to you.

1949
01:10:41,149 --> 01:10:42,949
I think because
we did switch

1950
01:10:42,949 --> 01:10:44,349
in the previous example,

1951
01:10:44,349 --> 01:10:46,169
we'll do El this
time round.

1952
01:10:46,169 --> 01:10:48,589
So we'll say if event

1953
01:10:48,589 --> 01:10:54,169
k equals equals arrow left

1954
01:10:55,290 --> 01:11:02,730
Elsv, again we'll just
copy that structure.

1955
01:11:02,730 --> 01:11:05,889
We'll say arrow right.

1956
01:11:08,970 --> 01:11:11,809
We'll just do a
few more of these.

1957
01:11:11,809 --> 01:11:17,489
So 123.4 arrow, arrow.

1958
01:11:17,489 --> 01:11:18,989
Was it up or down?

1959
01:11:18,989 --> 01:11:20,189
I can't remember
if it was up

1960
01:11:20,189 --> 01:11:23,629
or top arrow up.

1961
01:11:23,629 --> 01:11:29,209
That makes more sense.
Perfect arrow up,

1962
01:11:30,650 --> 01:11:34,029
arrow down. That is

1963
01:11:34,029 --> 01:11:35,789
putting in the if
statements that we need.

1964
01:11:35,789 --> 01:11:36,249
Essentially,

1965
01:11:36,249 --> 01:11:37,469
we're just picking
an if statement

1966
01:11:37,469 --> 01:11:39,069
for each of these,
which is nice.

1967
01:11:39,069 --> 01:11:41,769
Now, it's good to
do this in order.

1968
01:11:41,769 --> 01:11:44,729
We should first
try and get

1969
01:11:44,729 --> 01:11:45,849
these functions to work by

1970
01:11:45,849 --> 01:11:47,329
just pressing
the arrow keys.

1971
01:11:47,329 --> 01:11:49,129
Once that's working,
we'll then look

1972
01:11:49,129 --> 01:11:50,989
at putting it onto
the intervals.

1973
01:11:50,989 --> 01:11:52,509
But you've got to
work in a step by

1974
01:11:52,509 --> 01:11:54,749
step process, if
that makes sense.

1975
01:11:54,749 --> 01:11:56,509
Start with
exercise one and

1976
01:11:56,509 --> 01:11:58,009
then move on to
exercise three.

1977
01:11:58,009 --> 01:11:59,669
You just jump straight
to the third exercise.

1978
01:11:59,669 --> 01:12:00,369
You're going to miss

1979
01:12:00,369 --> 01:12:02,729
some really crucial
bits of information.

1980
01:12:02,729 --> 01:12:05,249
We need our functions.

1981
01:12:05,249 --> 01:12:08,809
Let's go for a
move left function

1982
01:12:09,150 --> 01:12:12,229
and then move right.

1983
01:12:15,270 --> 01:12:18,889
Then we'll go for, move

1984
01:12:18,889 --> 01:12:24,829
up and move down like so.

1985
01:12:24,830 --> 01:12:27,329
Then we need to create
these functions.

1986
01:12:27,329 --> 01:12:29,709
Function move left.

1987
01:12:30,420 --> 01:12:33,219
Oh, I forgot what
I was doing, man.

1988
01:12:33,219 --> 01:12:36,259
Oh, that's gone terribly
wrong, hasn't it?

1989
01:12:36,259 --> 01:12:38,319
Function move left, well

1990
01:12:38,319 --> 01:12:39,979
then creates our
position variable.

1991
01:12:39,979 --> 01:12:40,779
So we'll say, we'll

1992
01:12:40,779 --> 01:12:42,619
probably use a
cons for this.

1993
01:12:42,619 --> 01:12:46,799
Position equals circle,

1994
01:12:46,799 --> 01:12:49,959
get bounding
client direct.

1995
01:12:49,959 --> 01:12:53,279
We'll then say
let position

1996
01:12:53,279 --> 01:13:00,459
left equals position left.

1997
01:13:00,780 --> 01:13:02,859
That's coming
up because I've

1998
01:13:02,859 --> 01:13:04,820
spelled position
incorrectly.

1999
01:13:04,820 --> 01:13:06,359
Spelling is going to

2000
01:13:06,359 --> 01:13:08,019
be the death of
me, I swear.

2001
01:13:08,019 --> 01:13:11,899
We can then say
circle style.

2002
01:13:13,020 --> 01:13:17,159
Left equals position left.

2003
01:13:17,159 --> 01:13:19,759
If we're moving left,
it's going to be minus

2004
01:13:19,759 --> 01:13:22,939
ten plus Px on the end.

2005
01:13:22,939 --> 01:13:25,359
This works correctly.
When we press

2006
01:13:25,359 --> 01:13:27,119
the left rake, it
should move left,

2007
01:13:27,119 --> 01:13:28,559
although we should
get some errors

2008
01:13:28,559 --> 01:13:29,539
moaning at us that

2009
01:13:29,539 --> 01:13:30,979
those functions
don't exist.

2010
01:13:30,979 --> 01:13:36,059
Which is fine. It because

2011
01:13:36,059 --> 01:13:37,459
we're missing the very

2012
01:13:37,459 --> 01:13:38,879
important event listener.

2013
01:13:38,879 --> 01:13:44,979
It's document, a event
listener key down.

2014
01:13:45,930 --> 01:13:47,509
We're going to put

2015
01:13:47,509 --> 01:13:48,909
our move function
in there.

2016
01:13:48,909 --> 01:13:50,349
Again, we might
get an error.

2017
01:13:50,349 --> 01:13:51,929
Hopefully it doesn't
prevent everything from

2018
01:13:51,929 --> 01:13:53,969
working. We're
moving left.

2019
01:13:53,969 --> 01:13:55,449
That move right, move up,

2020
01:13:55,449 --> 01:13:56,409
and move down are not

2021
01:13:56,409 --> 01:13:57,609
defined yet,
which is fine.

2022
01:13:57,609 --> 01:13:59,089
But our left movements

2023
01:13:59,089 --> 01:14:01,349
working correctly,
which is good.

2024
01:14:01,349 --> 01:14:02,969
We're essentially
just going

2025
01:14:02,969 --> 01:14:03,569
to copy and paste

2026
01:14:03,569 --> 01:14:04,349
this function and make

2027
01:14:04,349 --> 01:14:05,549
some small changes to it.

2028
01:14:05,549 --> 01:14:06,849
So we've got move left.

2029
01:14:06,849 --> 01:14:09,089
We'll then move right

2030
01:14:11,570 --> 01:14:15,109
there minus in
ten plus ten.

2031
01:14:15,109 --> 01:14:17,489
This should now allow
us to move right,

2032
01:14:17,489 --> 01:14:19,169
so we can move
right and we can

2033
01:14:19,169 --> 01:14:21,849
move left, which
is perfect.

2034
01:14:21,970 --> 01:14:25,489
We'll then do a move up,

2035
01:14:26,770 --> 01:14:28,529
because we're doing it in

2036
01:14:28,529 --> 01:14:29,689
a completely
different direction.

2037
01:14:29,689 --> 01:14:30,909
Now we're not
doing it across

2038
01:14:30,909 --> 01:14:32,629
the left property.

2039
01:14:32,629 --> 01:14:34,769
We should probably
call this position.

2040
01:14:34,769 --> 01:14:36,489
We're going to
base this on

2041
01:14:36,489 --> 01:14:39,489
the position top value.

2042
01:14:39,490 --> 01:14:42,830
Again, instead of
saying circle, styleft,

2043
01:14:42,830 --> 01:14:46,249
we're going to say
styletp instead.

2044
01:14:46,249 --> 01:14:47,889
Again, just
make sure we're

2045
01:14:47,889 --> 01:14:49,449
renaming these variables.

2046
01:14:49,449 --> 01:14:50,969
Because we're
moving up, minus

2047
01:14:50,969 --> 01:14:52,810
ten seems appropriate,

2048
01:14:52,810 --> 01:14:56,369
we should be able to
move up left and right.

2049
01:14:56,369 --> 01:14:59,649
The last one is
then moved down.

2050
01:15:03,300 --> 01:15:06,919
Instead of minus ten,
we'll do plus ten.

2051
01:15:06,919 --> 01:15:08,999
With all four of
these functions,

2052
01:15:08,999 --> 01:15:11,079
we should now be
able to move right,

2053
01:15:11,079 --> 01:15:14,119
left, up and down.

2054
01:15:14,119 --> 01:15:17,819
Which is pretty cool
that I believe it was

2055
01:15:17,819 --> 01:15:19,599
exercise two
that got us to

2056
01:15:19,599 --> 01:15:23,179
do four different
movement.

2057
01:15:23,840 --> 01:15:25,999
I don't want to say
movement styles

2058
01:15:25,999 --> 01:15:27,319
because that seems
like the wrong word.

2059
01:15:27,319 --> 01:15:30,099
Four different movements
for this circle.

2060
01:15:30,099 --> 01:15:32,699
Essentially, the
exercise three

2061
01:15:32,699 --> 01:15:34,899
was based around adding
an interval to this.

2062
01:15:34,899 --> 01:15:36,479
The idea is if we
press an ararchy,

2063
01:15:36,479 --> 01:15:38,299
it will continue to
move in that direction.

2064
01:15:38,299 --> 01:15:40,099
If we were to press
another archy,

2065
01:15:40,099 --> 01:15:42,059
it should cancel
that movement

2066
01:15:42,059 --> 01:15:43,499
and move into a
new direction.

2067
01:15:43,499 --> 01:15:44,419
I think I do give you

2068
01:15:44,419 --> 01:15:46,219
a very quick example slide

2069
01:15:46,219 --> 01:15:49,359
for this, which is
something like this.

2070
01:15:49,359 --> 01:15:51,239
The nice thing is,
because we've done

2071
01:15:51,239 --> 01:15:52,759
the hard bit now
if we've just

2072
01:15:52,759 --> 01:15:54,399
quite literally copy this,

2073
01:15:54,399 --> 01:15:56,359
it should just work,

2074
01:15:56,359 --> 01:15:59,959
hopefully. Let's try it.

2075
01:15:59,959 --> 01:16:02,339
If we were to create
a global variable,

2076
01:16:02,339 --> 01:16:04,519
we say global
variable timer,

2077
01:16:04,519 --> 01:16:05,979
we'll just initialize it

2078
01:16:05,979 --> 01:16:07,739
to zero because why not?

2079
01:16:07,739 --> 01:16:10,299
Now it's a good idea
to clear this timer

2080
01:16:10,299 --> 01:16:10,699
whenever

2081
01:16:10,699 --> 01:16:13,419
this movement's function
has been cooled.

2082
01:16:13,419 --> 01:16:15,699
Because again, otherwise,
we might be having

2083
01:16:15,699 --> 01:16:16,699
multiple timers going off

2084
01:16:16,699 --> 01:16:17,859
and we don't
really want that.

2085
01:16:17,859 --> 01:16:18,859
We then need to make

2086
01:16:18,859 --> 01:16:21,319
a very small change
to our code.

2087
01:16:22,140 --> 01:16:28,780
If we say timer
equals set interval,

2088
01:16:29,020 --> 01:16:30,859
then we just need to

2089
01:16:30,859 --> 01:16:31,999
come all the
way to the end.

2090
01:16:31,999 --> 01:16:33,339
But of course, these
are all called

2091
01:16:33,339 --> 01:16:34,459
different things which

2092
01:16:34,459 --> 01:16:35,539
makes it slightly more

2093
01:16:35,539 --> 01:16:37,539
complicated,
But it's fine.

2094
01:16:37,539 --> 01:16:39,459
We'll say ten onto this.

2095
01:16:39,459 --> 01:16:45,299
We'll just copy this
across the board. So

2096
01:16:48,420 --> 01:16:51,439
now, because we're
dealing with a tenth of

2097
01:16:51,439 --> 01:16:54,099
a second that's going
off incredibly quickly,

2098
01:16:54,099 --> 01:16:56,059
it might be worth,
instead of minusing

2099
01:16:56,059 --> 01:16:58,319
ten on all of this,
maybe minus one.

2100
01:16:58,319 --> 01:17:01,419
Instead, The idea is,

2101
01:17:01,740 --> 01:17:04,239
the slower we're going
on that movement,

2102
01:17:04,239 --> 01:17:05,959
the smoother that
animation should be.

2103
01:17:05,959 --> 01:17:07,279
It's a bit like
frames per second.

2104
01:17:07,279 --> 01:17:08,819
The more frames you
have an animation,

2105
01:17:08,819 --> 01:17:10,999
the smoother that
animation becomes.

2106
01:17:10,999 --> 01:17:13,739
If this is worked
correctly,

2107
01:17:13,900 --> 01:17:16,219
which I'm hoping so, if

2108
01:17:16,219 --> 01:17:17,579
I press the
down arrow key,

2109
01:17:17,579 --> 01:17:18,959
I continue to move down.

2110
01:17:18,959 --> 01:17:21,859
If I press the right
arrow key, I move right,

2111
01:17:21,859 --> 01:17:23,799
I press the
left arrow key,

2112
01:17:23,799 --> 01:17:26,819
I move left and up.

2113
01:17:26,980 --> 01:17:30,579
That is essentially the
key to this exercise.

2114
01:17:30,579 --> 01:17:32,899
Now, if we didn't
clear that timer,

2115
01:17:32,899 --> 01:17:34,779
if we continue to press
these arrow keys,

2116
01:17:34,779 --> 01:17:36,759
we'd have quite
a few issues.

2117
01:17:36,759 --> 01:17:39,479
Let's just
temporarily comment

2118
01:17:39,479 --> 01:17:42,219
out that clear
interval section.

2119
01:17:42,460 --> 01:17:45,919
If I were to press
down and then right,

2120
01:17:45,919 --> 01:17:47,739
I'm moving diagonally
because we're

2121
01:17:47,739 --> 01:17:48,559
trying to go down

2122
01:17:48,559 --> 01:17:50,159
and we're trying
to go right.

2123
01:17:50,159 --> 01:17:52,659
If I were to press right
quite a few times,

2124
01:17:52,659 --> 01:17:54,579
we actually start
speeding up.

2125
01:17:54,579 --> 01:17:57,199
We have some
undesirable effects

2126
01:17:57,199 --> 01:17:58,779
when we don't
clear that timer.

2127
01:17:58,779 --> 01:17:59,779
That's why it's quite

2128
01:17:59,779 --> 01:18:00,999
important to
clear that timer.

2129
01:18:00,999 --> 01:18:02,919
In this example, we're

2130
01:18:02,919 --> 01:18:04,259
essentially
clearing the timer,

2131
01:18:04,259 --> 01:18:06,159
and then we're setting
off a new timer,

2132
01:18:06,159 --> 01:18:07,799
but we're using a
global variable to

2133
01:18:07,799 --> 01:18:08,779
keep track of the timer

2134
01:18:08,779 --> 01:18:10,424
we're currently
setting it to.

2135
01:18:10,424 --> 01:18:13,329
Now, this is quite
complex at this point.

2136
01:18:13,329 --> 01:18:13,909
Okay,

2137
01:18:13,909 --> 01:18:14,669
If you're struggling

2138
01:18:14,669 --> 01:18:15,869
a bit to understand this,

2139
01:18:15,869 --> 01:18:17,369
really try and
break it apart

2140
01:18:17,369 --> 01:18:18,489
into your own words.

2141
01:18:18,489 --> 01:18:20,909
Maybe just focus on
one specific key.

2142
01:18:20,909 --> 01:18:23,189
Maybe don't try all
four keys just yet,

2143
01:18:23,189 --> 01:18:24,789
Just focus on moving left,

2144
01:18:24,789 --> 01:18:25,989
if that makes sense.

2145
01:18:25,989 --> 01:18:27,889
It's really important
to understand what's

2146
01:18:27,889 --> 01:18:30,049
going on here. Do
you understand it?

2147
01:18:30,049 --> 01:18:31,349
This will become a much

2148
01:18:31,349 --> 01:18:32,709
easier assignment for you.

2149
01:18:32,709 --> 01:18:34,929
Really. Focus on the
concepts being taught.

2150
01:18:34,929 --> 01:18:37,609
Focus on the statements,
clearing timers,

2151
01:18:37,609 --> 01:18:38,849
creating timers,

2152
01:18:38,849 --> 01:18:40,409
setting these
global variables

2153
01:18:40,409 --> 01:18:42,689
so we can access them
in all our functions.

2154
01:18:42,689 --> 01:18:44,129
Does that make sense?

2155
01:18:44,129 --> 01:18:45,329
That's why I said it's so

2156
01:18:45,329 --> 01:18:48,214
important we follow
these lectures in order.

2157
01:18:48,214 --> 01:18:49,559
You need to understand

2158
01:18:49,559 --> 01:18:50,959
variables and
functions to really

2159
01:18:50,959 --> 01:18:53,919
understand this stuff
at this stage, okay?

2160
01:18:53,919 --> 01:18:55,419
But hopefully
that's cleared

2161
01:18:55,419 --> 01:18:57,359
some things up
for everyone.

2162
01:18:58,200 --> 01:19:01,459
Screen size, now
we can actually

2163
01:19:01,459 --> 01:19:02,579
find out the height and

2164
01:19:02,579 --> 01:19:04,479
width of our browsers.

2165
01:19:04,479 --> 01:19:06,099
The way we can do this is

2166
01:19:06,099 --> 01:19:07,299
by using the window do in

2167
01:19:07,299 --> 01:19:10,920
a width and window in
height properties.

2168
01:19:11,000 --> 01:19:13,619
If you say
console dot log,

2169
01:19:13,619 --> 01:19:16,159
window in height or
window.in a width it will

2170
01:19:16,159 --> 01:19:17,279
give you the
exact height and

2171
01:19:17,279 --> 01:19:19,224
width of your browsers.

2172
01:19:19,224 --> 01:19:21,549
The reason I'm
telling you this

2173
01:19:21,549 --> 01:19:23,710
is by using that
information,

2174
01:19:23,710 --> 01:19:25,989
we could add

2175
01:19:25,989 --> 01:19:28,609
some screen collision
onto our pages.

2176
01:19:28,609 --> 01:19:30,289
Right now, my circle

2177
01:19:30,289 --> 01:19:31,849
will just go off
the screen, right?

2178
01:19:31,849 --> 01:19:34,829
So I click on right right,

2179
01:19:34,829 --> 01:19:36,089
is probably a bad example

2180
01:19:36,089 --> 01:19:37,689
that we should get
to this point.

2181
01:19:37,689 --> 01:19:39,949
Eventually it will just
go off the screen,

2182
01:19:39,949 --> 01:19:42,149
there's no collision
whatsoever there.

2183
01:19:42,149 --> 01:19:43,489
What we could do is

2184
01:19:43,489 --> 01:19:44,669
add some screen collision.

2185
01:19:44,669 --> 01:19:46,389
Just making it so that
it can't do that.

2186
01:19:46,389 --> 01:19:48,149
The second it
comes into contact

2187
01:19:48,149 --> 01:19:50,759
with that point,
it should stop.

2188
01:19:50,759 --> 01:19:52,149
The nice thing is this

2189
01:19:52,149 --> 01:19:53,509
is actually quite simple.

2190
01:19:53,509 --> 01:19:54,769
All we really need to

2191
01:19:54,769 --> 01:19:58,009
do is add an if statement.

2192
01:19:58,009 --> 01:20:00,049
Our move right function is

2193
01:20:00,049 --> 01:20:01,909
pretty much
identically the same.

2194
01:20:01,909 --> 01:20:03,549
All we're doing
is we're finding

2195
01:20:03,549 --> 01:20:05,669
the right position
of this circle.

2196
01:20:05,669 --> 01:20:07,189
Up until this point,
we've primarily

2197
01:20:07,189 --> 01:20:09,149
been moving it based
off the left position.

2198
01:20:09,149 --> 01:20:10,769
We'll find the
right position

2199
01:20:10,769 --> 01:20:11,809
then we'll just say if

2200
01:20:11,809 --> 01:20:16,409
the right position is
ever less than window.

2201
01:20:16,409 --> 01:20:19,189
In a width, hang on.
I've said that wrong.

2202
01:20:19,189 --> 01:20:22,309
Right is ever larger
than window.in a width,

2203
01:20:22,309 --> 01:20:23,749
we know that that
circles about

2204
01:20:23,749 --> 01:20:25,674
to go off the side
of the screen.

2205
01:20:25,674 --> 01:20:27,079
No, hang on.

2206
01:20:27,079 --> 01:20:29,259
I still don't think
I'm saying that right.

2207
01:20:29,259 --> 01:20:31,699
Essentially, by adding
this if statement,

2208
01:20:31,699 --> 01:20:32,639
this circle won't go

2209
01:20:32,639 --> 01:20:33,919
off from the
right hand side.

2210
01:20:33,919 --> 01:20:35,479
At this point,
we're essentially

2211
01:20:35,479 --> 01:20:37,819
saying when this condition

2212
01:20:37,819 --> 01:20:40,119
is true, we
should be moving.

2213
01:20:40,119 --> 01:20:42,179
If this condition
is false,

2214
01:20:42,179 --> 01:20:44,319
we hit the edge
of the screen.

2215
01:20:44,319 --> 01:20:48,499
Only continue to move
while the position of

2216
01:20:48,499 --> 01:20:51,959
the coordinate
for this circle

2217
01:20:51,959 --> 01:20:54,819
is less than the
width of the window.

2218
01:20:54,819 --> 01:20:56,239
If it ever gets bigger

2219
01:20:56,239 --> 01:20:57,419
than that width
of the window,

2220
01:20:57,419 --> 01:20:59,424
we know the circle has
gone off the screen.

2221
01:20:59,424 --> 01:21:00,729
I feel like I've not

2222
01:21:00,729 --> 01:21:02,349
explained that
the best way,

2223
01:21:02,349 --> 01:21:03,629
but essentially we're

2224
01:21:03,629 --> 01:21:05,109
saying this right point.

2225
01:21:05,109 --> 01:21:07,689
If it's ever past the
width of the screen,

2226
01:21:07,689 --> 01:21:10,089
we know that
it's gone off,

2227
01:21:10,089 --> 01:21:11,669
basically only continue to

2228
01:21:11,669 --> 01:21:12,729
move while this condition

2229
01:21:12,729 --> 01:21:16,409
is true, we add
that in now.

2230
01:21:16,490 --> 01:21:18,689
We could probably
even add that.

2231
01:21:18,689 --> 01:21:19,809
We'll do it in the right.

2232
01:21:19,809 --> 01:21:21,649
We'll keep it as it was.

2233
01:21:21,649 --> 01:21:26,469
We'll say position right

2234
01:21:26,469 --> 01:21:33,409
equals position right. If

2235
01:21:34,160 --> 01:21:38,759
position right is
greater than window,

2236
01:21:38,759 --> 01:21:42,719
that's spelled in
r, inner width,

2237
01:21:42,960 --> 01:21:46,319
to only move whilst
this condition is true,

2238
01:21:46,319 --> 01:21:51,839
essentially this gives us,

2239
01:21:51,920 --> 01:21:56,799
or it should give us,
a collision on this.

2240
01:21:56,930 --> 01:21:58,849
In hindsight, I probably

2241
01:21:58,849 --> 01:21:59,929
shouldn't have done
the right movement.

2242
01:21:59,929 --> 01:22:00,849
I'm sure probably may

2243
01:22:00,849 --> 01:22:02,109
have done the
left movement.

2244
01:22:02,109 --> 01:22:03,469
But it's not as easy.

2245
01:22:03,469 --> 01:22:05,389
Well, it is easy,
but there we go,

2246
01:22:05,389 --> 01:22:06,529
the circles now stopped

2247
01:22:06,529 --> 01:22:07,489
on that right hand side.

2248
01:22:07,489 --> 01:22:08,049
If we wanted to,

2249
01:22:08,049 --> 01:22:09,149
we could do
something similar

2250
01:22:09,149 --> 01:22:11,409
for the left position.

2251
01:22:11,409 --> 01:22:15,109
We could say if left is
ever less than zero,

2252
01:22:15,109 --> 01:22:16,389
we know that
we've gone off

2253
01:22:16,389 --> 01:22:17,829
the screen that
way as well.

2254
01:22:17,829 --> 01:22:19,069
You can do the same thing

2255
01:22:19,069 --> 01:22:20,269
with the up and down keys

2256
01:22:20,269 --> 01:22:22,749
quite easily. So we
could say something.

2257
01:22:22,749 --> 01:22:27,349
The long lines of
if position left,

2258
01:22:27,349 --> 01:22:33,809
left is, is it
less than zero?

2259
01:22:35,360 --> 01:22:37,399
Okay. I think that's yeah.

2260
01:22:37,399 --> 01:22:38,619
So if the position left is

2261
01:22:38,619 --> 01:22:40,299
ever less than zero,

2262
01:22:40,299 --> 01:22:42,559
we know we've gone
off the screen.

2263
01:22:43,700 --> 01:22:47,819
Let's try this
form. This give

2264
01:22:47,819 --> 01:22:49,079
us left collision
and we've

2265
01:22:49,079 --> 01:22:50,679
now got right
collision as well.

2266
01:22:50,679 --> 01:22:51,959
We should not be
able to go off

2267
01:22:51,959 --> 01:22:53,159
the left hand side
of the screen

2268
01:22:53,159 --> 01:22:54,759
like so we can't

2269
01:22:54,759 --> 01:22:56,319
go off the right hand
side of the screen.

2270
01:22:56,319 --> 01:22:57,819
It's the same concept for

2271
01:22:57,819 --> 01:23:00,139
the top and bottom
except you use

2272
01:23:00,139 --> 01:23:03,799
window do in a height
and obviously zero for

2273
01:23:03,799 --> 01:23:05,719
the top window do

2274
01:23:05,719 --> 01:23:07,999
in a height for the
bottom collision.

2275
01:23:07,999 --> 01:23:12,619
Window in height for
the top. No, hang on.

2276
01:23:12,619 --> 01:23:15,559
I've said that wrong
scrap that bit.

2277
01:23:15,559 --> 01:23:18,579
Window in height for
the bottom collision

2278
01:23:18,579 --> 01:23:20,839
and the top property
being zero for

2279
01:23:20,839 --> 01:23:23,399
the top collision. Okay,

2280
01:23:23,399 --> 01:23:24,819
I think that might be

2281
01:23:24,819 --> 01:23:26,439
an exercise which is fun.

2282
01:23:26,439 --> 01:23:28,859
Now, we've currently
used key down for this.

2283
01:23:28,859 --> 01:23:30,839
Again, whenever we
press the down arrow,

2284
01:23:30,839 --> 01:23:32,519
whenever we
press on a key,

2285
01:23:32,519 --> 01:23:34,459
we're triggering
that movement.

2286
01:23:34,459 --> 01:23:36,079
What we could do is also

2287
01:23:36,079 --> 01:23:38,239
use the key up property.

2288
01:23:38,239 --> 01:23:42,119
Key up works the opposite
way to key down.

2289
01:23:42,119 --> 01:23:44,339
It actually triggers
when we release a key.

2290
01:23:44,339 --> 01:23:46,379
The idea is we can
press down on a key and

2291
01:23:46,379 --> 01:23:48,479
the key down event
would trigger we could

2292
01:23:48,479 --> 01:23:50,359
release that key and
the key up event would

2293
01:23:50,359 --> 01:23:52,479
trigger you can
actually find

2294
01:23:52,479 --> 01:23:53,719
out exactly how long

2295
01:23:53,719 --> 01:23:55,639
a key is being
held down for.

2296
01:23:55,639 --> 01:23:57,219
For example, you could

2297
01:23:57,219 --> 01:23:58,519
say hold down a key for

2298
01:23:58,519 --> 01:24:02,699
54 seconds,
maybe 54 times.

2299
01:24:02,699 --> 01:24:05,179
This has been triggered
by using a key down.

2300
01:24:05,179 --> 01:24:06,039
You can track how long

2301
01:24:06,039 --> 01:24:07,419
the keys being held down

2302
01:24:07,419 --> 01:24:08,759
for key up will trigger

2303
01:24:08,759 --> 01:24:11,099
as soon as that key
has been released.

2304
01:24:12,310 --> 01:24:15,029
If we wanted to, we

2305
01:24:15,029 --> 01:24:16,769
could set a timer

2306
01:24:16,769 --> 01:24:18,069
when we're holding
a key down,

2307
01:24:18,069 --> 01:24:19,309
and then clear that timer

2308
01:24:19,309 --> 01:24:21,169
when that key has
been released.

2309
01:24:21,169 --> 01:24:23,929
This could be an
alternate way of doing

2310
01:24:23,929 --> 01:24:27,129
movement, if that
makes sense.

2311
01:24:27,129 --> 01:24:28,789
In the assignment,
we've got that

2312
01:24:28,789 --> 01:24:30,749
Pac Man character
moving around the maze.

2313
01:24:30,749 --> 01:24:32,069
He's moving
around the maze

2314
01:24:32,069 --> 01:24:33,569
by holding the arrow keys.

2315
01:24:33,569 --> 01:24:35,369
We can't quite do
that with this.

2316
01:24:35,369 --> 01:24:36,549
If I try holding down

2317
01:24:36,549 --> 01:24:37,989
this key and then I

2318
01:24:37,989 --> 01:24:40,539
release that key,
I'm still moving.

2319
01:24:40,539 --> 01:24:41,929
If I want to do

2320
01:24:41,929 --> 01:24:43,389
that alternate
movement style, again,

2321
01:24:43,389 --> 01:24:44,889
if I want to hold down
the key and in the

2322
01:24:44,889 --> 01:24:47,009
second I release the
key, I stop moving.

2323
01:24:47,009 --> 01:24:49,209
I might need to do
something similar to this.

2324
01:24:49,209 --> 01:24:50,629
The problem is,
it might not

2325
01:24:50,629 --> 01:24:52,409
have quite the
desired effect,

2326
01:24:52,409 --> 01:24:56,769
you think it has.
Let's strike.

2327
01:24:56,769 --> 01:24:59,729
If I say, let's get rid of

2328
01:24:59,729 --> 01:25:01,289
this clear
interval timer app

2329
01:25:01,289 --> 01:25:03,149
and I say document,

2330
01:25:03,149 --> 01:25:08,169
do add event
listener key up.

2331
01:25:10,140 --> 01:25:12,559
We could say something
along the lines

2332
01:25:12,559 --> 01:25:16,299
of my key up.

2333
01:25:16,299 --> 01:25:18,539
We'll keep it as
what the slide says.

2334
01:25:18,539 --> 01:25:23,899
We create that
function, my key,

2335
01:25:25,620 --> 01:25:29,379
we could clear
the interval

2336
01:25:29,900 --> 01:25:32,299
and maybe that would work.

2337
01:25:32,299 --> 01:25:34,599
So the idea is as soon
as we release the key,

2338
01:25:34,599 --> 01:25:36,919
we're clearing that
interval. Let's try it.

2339
01:25:36,919 --> 01:25:39,619
So I hold down
the right key,

2340
01:25:40,140 --> 01:25:42,859
it doesn't quite
have the effect I'm

2341
01:25:42,859 --> 01:25:48,020
after, unfortunately.

2342
01:25:48,020 --> 01:25:51,019
Now the reason
that's happening

2343
01:25:51,019 --> 01:25:52,759
it's because every time

2344
01:25:52,759 --> 01:25:54,039
we're holding
down that key,

2345
01:25:54,039 --> 01:25:55,979
we're creating
a new interval.

2346
01:25:55,979 --> 01:25:58,279
Okay? That's because
multiple intervals

2347
01:25:58,279 --> 01:26:00,019
are now being created.

2348
01:26:00,019 --> 01:26:01,879
The idea is we
hold down a key,

2349
01:26:01,879 --> 01:26:02,939
that function
will get called

2350
01:26:02,939 --> 01:26:03,999
again and again and again,

2351
01:26:03,999 --> 01:26:05,639
and that will
create a new timer,

2352
01:26:05,639 --> 01:26:06,899
a timer that goes off

2353
01:26:06,899 --> 01:26:08,079
again and again and again.

2354
01:26:08,079 --> 01:26:09,399
That's why when
we hold down

2355
01:26:09,399 --> 01:26:12,799
this key, jumped
a bit too fast.

2356
01:26:12,799 --> 01:26:14,179
When I hold down this key,

2357
01:26:14,179 --> 01:26:16,319
we're getting faster
and faster and faster.

2358
01:26:16,319 --> 01:26:19,299
Let's press it
once that works,

2359
01:26:19,299 --> 01:26:22,579
but if you hold it down,
it doesn't at all.

2360
01:26:22,579 --> 01:26:25,039
In fact, now it's not
even letting me move.

2361
01:26:25,039 --> 01:26:26,539
Because again, we've got

2362
01:26:26,539 --> 01:26:27,599
so many timers going off,

2363
01:26:27,599 --> 01:26:29,699
it doesn't quite
know what to do.

2364
01:26:30,240 --> 01:26:34,319
So get some very wild
effects on that.

2365
01:26:34,480 --> 01:26:38,259
Again, we can't really
use this method,

2366
01:26:38,259 --> 01:26:40,060
we can't use
this technique

2367
01:26:40,060 --> 01:26:41,299
for that movement style.

2368
01:26:41,299 --> 01:26:48,639
We need something else now

2369
01:26:48,639 --> 01:26:50,839
to really put this
into a better example.

2370
01:26:50,839 --> 01:26:51,779
Because we're holding down

2371
01:26:51,779 --> 01:26:53,039
that key over
and over again.

2372
01:26:53,039 --> 01:26:54,179
That event gets triggered

2373
01:26:54,179 --> 01:26:55,279
again and again and again.

2374
01:26:55,279 --> 01:26:56,499
It's very similar
when you're

2375
01:26:56,499 --> 01:26:58,079
holding down a key on say,

2376
01:26:58,079 --> 01:27:02,319
a form, let's
say in this URL.

2377
01:27:02,319 --> 01:27:03,880
If I hold down the key,

2378
01:27:03,880 --> 01:27:06,939
I get being typed
multiple times, right?

2379
01:27:06,939 --> 01:27:08,759
That's essentially
what's happening

2380
01:27:08,759 --> 01:27:09,579
with these arrow keys.

2381
01:27:09,579 --> 01:27:10,739
It's going off
again and again,

2382
01:27:10,739 --> 01:27:11,579
and again and again,

2383
01:27:11,579 --> 01:27:12,899
and it's doing
that movement

2384
01:27:12,899 --> 01:27:14,839
over and over
and over again.

2385
01:27:14,839 --> 01:27:17,559
Instead, it would
be a lot better

2386
01:27:17,559 --> 01:27:20,019
to track which key is
being held down or not.

2387
01:27:20,019 --> 01:27:21,659
Essentially, we
could say, if

2388
01:27:21,659 --> 01:27:22,959
we're holding
down this key,

2389
01:27:22,959 --> 01:27:24,779
set this variable to

2390
01:27:24,779 --> 01:27:30,259
some yes or no data type.

2391
01:27:30,259 --> 01:27:31,799
That's essentially
what we're

2392
01:27:31,799 --> 01:27:32,619
going to be doing.

2393
01:27:32,619 --> 01:27:34,199
Now, Java Script supports

2394
01:27:34,199 --> 01:27:35,579
a booling variable
which can

2395
01:27:35,579 --> 01:27:37,839
store a true or
a false value.

2396
01:27:37,839 --> 01:27:40,379
We could use a global
booling variable to

2397
01:27:40,379 --> 01:27:41,819
track whether or
not a key is being

2398
01:27:41,819 --> 01:27:44,039
held down. For
example, we could say

2399
01:27:44,039 --> 01:27:46,319
if we're holding
down a key,

2400
01:27:46,319 --> 01:27:49,479
set our left arrow
key variable to true.

2401
01:27:49,479 --> 01:27:50,939
If this is set to true, we

2402
01:27:50,939 --> 01:27:52,659
know this key is
being held down.

2403
01:27:52,659 --> 01:27:54,419
If it's set to
false, we know

2404
01:27:54,419 --> 01:27:56,799
that key is not
being held down.

2405
01:27:56,799 --> 01:27:59,619
The way we could
start by doing

2406
01:27:59,619 --> 01:28:02,759
this is we could

2407
01:28:02,759 --> 01:28:04,319
have these global
variables at the top.

2408
01:28:04,319 --> 01:28:06,139
We could say left
pressed equals false.

2409
01:28:06,139 --> 01:28:08,159
Right pressed up, pressed
and down pressed.

2410
01:28:08,159 --> 01:28:10,599
The idea is when these
are set to false,

2411
01:28:10,599 --> 01:28:13,119
the keys are not
being held down.

2412
01:28:13,119 --> 01:28:14,459
Hopefully that
makes sense.

2413
01:28:14,459 --> 01:28:15,799
So far we have

2414
01:28:15,799 --> 01:28:17,419
some global variables
right at the top,

2415
01:28:17,419 --> 01:28:18,839
and when they're
set to false,

2416
01:28:18,839 --> 01:28:21,224
they're not
being held down.

2417
01:28:21,224 --> 01:28:23,269
We could then have our key

2418
01:28:23,269 --> 01:28:25,009
down and our key
up functions.

2419
01:28:25,009 --> 01:28:27,329
When our key down
function gets triggered,

2420
01:28:27,329 --> 01:28:28,509
we're just checking to see

2421
01:28:28,509 --> 01:28:29,869
if the key is
the left array.

2422
01:28:29,869 --> 01:28:31,129
If it is the left arrokey,

2423
01:28:31,129 --> 01:28:33,409
we can set that global
variable to true.

2424
01:28:33,409 --> 01:28:35,429
The second we
release that key,

2425
01:28:35,429 --> 01:28:36,709
our key up function

2426
01:28:36,709 --> 01:28:37,829
will run and that will set

2427
01:28:37,829 --> 01:28:39,609
this global
variable to false

2428
01:28:39,609 --> 01:28:41,389
because that makes sense.

2429
01:28:41,389 --> 01:28:42,849
The idea is we're
now tracking

2430
01:28:42,849 --> 01:28:44,849
exactly when this key
is being held down.

2431
01:28:44,849 --> 01:28:47,429
If it's being held down,
we set it to true.

2432
01:28:47,429 --> 01:28:49,209
The second we
release that key,

2433
01:28:49,209 --> 01:28:50,749
it gets set to false.

2434
01:28:50,749 --> 01:28:52,249
We could do something with

2435
01:28:52,249 --> 01:28:54,469
that logic in theory.

2436
01:28:54,469 --> 01:28:56,889
Let me try and
demo it slightly

2437
01:28:56,889 --> 01:28:57,749
because I think I'm

2438
01:28:57,749 --> 01:28:59,109
losing some people
which is kind,

2439
01:28:59,109 --> 01:29:01,370
it's a bit hard to tell
on these recordings.

2440
01:29:01,370 --> 01:29:03,169
But typically if
I'm losing myself,

2441
01:29:03,169 --> 01:29:04,729
that's usually the
way around it.

2442
01:29:04,729 --> 01:29:07,069
We need to just completely

2443
01:29:07,069 --> 01:29:09,209
get rid of this entirely.

2444
01:29:09,209 --> 01:29:12,129
I would say we'll

2445
01:29:12,129 --> 01:29:13,649
just move this now just

2446
01:29:13,649 --> 01:29:15,229
so we have a nice
clean bit of code.

2447
01:29:15,229 --> 01:29:16,769
And we'll just get
rid of these key up

2448
01:29:16,769 --> 01:29:18,649
and key down
functions like.

2449
01:29:18,649 --> 01:29:22,729
So. Let's have
two functions.

2450
01:29:22,729 --> 01:29:24,129
We have one
function which is

2451
01:29:24,129 --> 01:29:26,169
the when our key is
being pressed down.

2452
01:29:26,169 --> 01:29:29,189
Key pressed down,

2453
01:29:29,189 --> 01:29:32,429
okay, we need to
say document.

2454
01:29:32,429 --> 01:29:34,609
Do a event listener.

2455
01:29:36,890 --> 01:29:42,249
Key down and key
pressed down.

2456
01:29:42,249 --> 01:29:44,649
We then have a
function for

2457
01:29:44,649 --> 01:29:47,970
when the key is released.

2458
01:29:48,410 --> 01:29:50,229
The idea is we have

2459
01:29:50,229 --> 01:29:51,629
a function for when
we're holding down

2460
01:29:51,629 --> 01:29:53,029
the key and a function

2461
01:29:53,029 --> 01:29:54,809
when we're
releasing that key.

2462
01:29:54,809 --> 01:29:58,309
Hopefully still with me we

2463
01:29:58,309 --> 01:30:00,289
could say document a event

2464
01:30:00,289 --> 01:30:08,009
listener key, key release.

2465
01:30:08,920 --> 01:30:13,799
So if I were to say
console dot oh,

2466
01:30:13,799 --> 01:30:15,959
that is the wrong
shortcut there.

2467
01:30:15,959 --> 01:30:21,439
Consol log holding,

2468
01:30:25,580 --> 01:30:30,979
console log released.

2469
01:30:31,700 --> 01:30:33,479
So if you really

2470
01:30:33,479 --> 01:30:34,819
focus on the
console right now,

2471
01:30:34,819 --> 01:30:36,179
if I were to hold a key,

2472
01:30:36,179 --> 01:30:38,539
we get holding, get
printed to the console.

2473
01:30:38,539 --> 01:30:40,359
Now focus on that
number going up.

2474
01:30:40,359 --> 01:30:41,719
Again, we're in the
hundreds right now.

2475
01:30:41,719 --> 01:30:43,539
The second I
release that key,

2476
01:30:43,539 --> 01:30:45,819
released gets typed.

2477
01:30:45,819 --> 01:30:48,559
Again, we're
tracking when a key

2478
01:30:48,559 --> 01:30:51,644
is being held. Okay,

2479
01:30:51,644 --> 01:30:54,569
That's what key up and
key down are doing.

2480
01:30:54,569 --> 01:30:57,029
They're telling us
if a key is being

2481
01:30:57,029 --> 01:31:00,509
pressed and then if the
keys being released.

2482
01:31:00,509 --> 01:31:02,589
Does that make
sense so far?

2483
01:31:02,589 --> 01:31:04,569
Adding this to
our movement,

2484
01:31:04,569 --> 01:31:05,969
what we could
do is have some

2485
01:31:05,969 --> 01:31:07,329
global variables
at the top.

2486
01:31:07,329 --> 01:31:11,869
We could say left pressed

2487
01:31:11,869 --> 01:31:14,989
equals false and let

2488
01:31:14,989 --> 01:31:18,929
right pressed
equals false.

2489
01:31:18,929 --> 01:31:21,109
We could say if

2490
01:31:21,109 --> 01:31:23,649
the event key is
the left arrow key,

2491
01:31:23,649 --> 01:31:26,149
we would need to pass
the event variable into

2492
01:31:26,149 --> 01:31:30,109
this. We could say if

2493
01:31:30,360 --> 01:31:36,259
e v key equals arrow left,

2494
01:31:36,259 --> 01:31:38,419
set our left pressed

2495
01:31:38,419 --> 01:31:43,419
variable to true because

2496
01:31:43,419 --> 01:31:45,799
we know the left arrow
key is being pressed.

2497
01:31:45,799 --> 01:31:47,019
The exact same thing

2498
01:31:47,019 --> 01:31:47,799
with the right arrow key.

2499
01:31:47,799 --> 01:31:49,059
But we won't focus
on that just yet.

2500
01:31:49,059 --> 01:31:50,919
We'll just focus on left,

2501
01:31:50,919 --> 01:31:52,659
the exact same thing with

2502
01:31:52,659 --> 01:31:55,059
our key up variable.

2503
01:31:55,059 --> 01:31:58,019
We'll just pass in this.

2504
01:31:58,019 --> 01:32:00,839
We'll copy this
if statement,

2505
01:32:02,610 --> 01:32:07,129
but we'll just
change it to false.

2506
01:32:07,970 --> 01:32:12,189
Essentially we're saying
if the event key,

2507
01:32:12,189 --> 01:32:14,469
if the arch is the
left arrow key,

2508
01:32:14,469 --> 01:32:16,029
set this global
variable to

2509
01:32:16,029 --> 01:32:17,849
true the second it

2510
01:32:17,849 --> 01:32:20,329
has been released,
set it to false.

2511
01:32:20,329 --> 01:32:22,369
We're just changing
a variable

2512
01:32:22,369 --> 01:32:23,869
if a key is being held,

2513
01:32:23,869 --> 01:32:26,309
does that make
sense so far?

2514
01:32:26,309 --> 01:32:27,829
If we're holding

2515
01:32:27,829 --> 01:32:29,729
the archy move in
that direction,

2516
01:32:29,729 --> 01:32:30,889
the second we've
released that

2517
01:32:30,889 --> 01:32:34,209
archy stop moving
in that direction.

2518
01:32:34,209 --> 01:32:36,109
But we're controlling
it based purely

2519
01:32:36,109 --> 01:32:39,949
around the key up
and key down events.

2520
01:32:39,949 --> 01:32:41,709
But it's really
going to work

2521
01:32:41,709 --> 01:32:43,809
with these global
variables.

2522
01:32:43,890 --> 01:32:47,829
We've got the basic
bit of logic in there,

2523
01:32:47,829 --> 01:32:49,829
let's try adding the
movement in there.

2524
01:32:49,829 --> 01:32:51,589
Once we've got that
booling variable

2525
01:32:51,589 --> 01:32:53,089
that stores the
key presses,

2526
01:32:53,089 --> 01:32:55,349
we need to check whether

2527
01:32:55,349 --> 01:32:56,769
that variable is true.

2528
01:32:56,769 --> 01:32:58,129
If the variable
is true, we

2529
01:32:58,129 --> 01:32:59,569
should move in
that direction.

2530
01:32:59,569 --> 01:33:03,449
So we set an interval
in that direction.

2531
01:33:03,630 --> 01:33:05,829
Now again, the way
this is going to

2532
01:33:05,829 --> 01:33:07,289
work is we are
constantly going to

2533
01:33:07,289 --> 01:33:08,649
have a movement function

2534
01:33:08,649 --> 01:33:10,649
going off in the
background as a timer up.

2535
01:33:10,649 --> 01:33:12,589
It's always going to
be checking to see

2536
01:33:12,589 --> 01:33:14,889
if any of those global
variables are true.

2537
01:33:14,889 --> 01:33:17,149
For example, if left
press is ever true,

2538
01:33:17,149 --> 01:33:19,029
that movement function
will immediately

2539
01:33:19,029 --> 01:33:21,289
spring into action
and move us left.

2540
01:33:21,289 --> 01:33:23,529
Really, breaking
this down,

2541
01:33:23,529 --> 01:33:25,729
this is what we're doing.

2542
01:33:25,729 --> 01:33:26,849
We're starting off with

2543
01:33:26,849 --> 01:33:28,909
our left press
equals false.

2544
01:33:28,909 --> 01:33:30,129
We've got our key up

2545
01:33:30,129 --> 01:33:31,249
on our key down
events which

2546
01:33:31,249 --> 01:33:32,389
control whether
it's been set to

2547
01:33:32,389 --> 01:33:33,949
true or set to false.

2548
01:33:33,949 --> 01:33:36,729
We've then got a set
interval interval.

2549
01:33:36,729 --> 01:33:38,229
So this function just here

2550
01:33:38,229 --> 01:33:40,429
set go off every
tenth of a second.

2551
01:33:40,429 --> 01:33:42,944
It's constantly going
off in the background.

2552
01:33:42,944 --> 01:33:45,779
The second left
press equals true,

2553
01:33:45,779 --> 01:33:46,999
and again it equals true.

2554
01:33:46,999 --> 01:33:48,899
If we hold down the
left arrow key,

2555
01:33:48,899 --> 01:33:51,479
we're then going to run
our move left code.

2556
01:33:51,479 --> 01:33:54,079
But the second we then
release that key,

2557
01:33:54,079 --> 01:33:56,959
we're then no longer
going to move left.

2558
01:33:56,959 --> 01:34:00,019
That makes sense
a little bit.

2559
01:34:00,019 --> 01:34:01,759
The idea is we
can continue to

2560
01:34:01,759 --> 01:34:03,619
move left by holding
down that key,

2561
01:34:03,619 --> 01:34:04,919
but the second we release

2562
01:34:04,919 --> 01:34:08,339
that key, we stop moving.

2563
01:34:08,540 --> 01:34:13,719
Interesting, right? I
think it's interesting.

2564
01:34:13,719 --> 01:34:16,739
Let's demo it then, right?

2565
01:34:16,739 --> 01:34:17,919
Let's actually try and

2566
01:34:17,919 --> 01:34:19,979
implement this
movement style.

2567
01:34:19,979 --> 01:34:22,179
The best way to do this

2568
01:34:22,179 --> 01:34:24,499
is fundamentally

2569
01:34:24,499 --> 01:34:26,219
change what's
happening here.

2570
01:34:26,219 --> 01:34:28,199
We have the key
press down and

2571
01:34:28,199 --> 01:34:30,519
the key press events.

2572
01:34:30,519 --> 01:34:33,099
Again, this is setting
the left press to T,

2573
01:34:33,099 --> 01:34:35,659
this is setting the
left press to false.

2574
01:34:35,659 --> 01:34:37,299
What we need to do now is

2575
01:34:37,299 --> 01:34:40,779
create some
movement function.

2576
01:34:40,910 --> 01:34:43,289
We're going to
say function,

2577
01:34:43,289 --> 01:34:45,869
let's just call this
move to keep it nice.

2578
01:34:45,869 --> 01:34:49,489
Sneezy move essential.

2579
01:34:49,489 --> 01:34:50,789
We're just going
to say if left

2580
01:34:50,789 --> 01:34:54,949
pressed ever equals true,

2581
01:34:55,150 --> 01:34:57,329
we need to move left.

2582
01:34:57,329 --> 01:34:58,849
And we can put a nice move

2583
01:34:58,849 --> 01:35:01,549
left function just here.

2584
01:35:01,860 --> 01:35:04,319
Now the key to all of this

2585
01:35:04,319 --> 01:35:05,559
working is we're setting

2586
01:35:05,559 --> 01:35:06,959
this function
onto an interval.

2587
01:35:06,959 --> 01:35:07,999
This function is always

2588
01:35:07,999 --> 01:35:09,239
going off in
the background,

2589
01:35:09,239 --> 01:35:10,139
checking to see if

2590
01:35:10,139 --> 01:35:11,919
that variable is
ever set to true.

2591
01:35:11,919 --> 01:35:14,199
If we say a set interval

2592
01:35:14,199 --> 01:35:17,259
move every tenth
of a second,

2593
01:35:17,259 --> 01:35:20,219
maybe watch what happens.

2594
01:35:20,219 --> 01:35:22,759
Now if I press
the left out,

2595
01:35:22,759 --> 01:35:23,799
we've got a small error

2596
01:35:23,799 --> 01:35:24,839
saying under five key,

2597
01:35:24,839 --> 01:35:28,659
reading key, which
would tell me,

2598
01:35:29,350 --> 01:35:32,949
funky key, Which
line is that on?

2599
01:35:32,949 --> 01:35:35,730
That's on line 45.

2600
01:35:35,730 --> 01:35:38,009
Line 45 which is

2601
01:35:38,009 --> 01:35:39,569
a. I see what
I've done there.

2602
01:35:39,569 --> 01:35:41,349
I've accidentally
got the wrong.

2603
01:35:41,349 --> 01:35:44,089
I've called the
function the same name.

2604
01:35:44,089 --> 01:35:45,369
We should probably be a

2605
01:35:45,369 --> 01:35:47,269
little bit
careful of that.

2606
01:35:47,350 --> 01:35:49,989
We'll just get
rid of these very

2607
01:35:49,989 --> 01:35:52,349
quickly. There we go.

2608
01:35:52,349 --> 01:35:54,629
The issue there was I
had the function with

2609
01:35:54,629 --> 01:35:56,029
the same name and

2610
01:35:56,029 --> 01:35:58,409
it didn't really
like that very much.

2611
01:35:58,409 --> 01:36:00,709
Now if I hold
the left key,

2612
01:36:00,709 --> 01:36:02,509
I'm able to hold it

2613
01:36:02,509 --> 01:36:05,144
and release it and
it will stop moving.

2614
01:36:05,144 --> 01:36:07,219
We don't have that
problem anymore.

2615
01:36:07,219 --> 01:36:08,999
We're doing a completely
different way

2616
01:36:08,999 --> 01:36:11,219
of moving our
circle around,

2617
01:36:11,219 --> 01:36:12,879
which is quite
interesting.

2618
01:36:12,879 --> 01:36:14,979
Now to make this a
bit easier to read,

2619
01:36:14,979 --> 01:36:17,059
what we could do is
instead of having

2620
01:36:17,059 --> 01:36:19,339
a bunch of
functions for this,

2621
01:36:19,339 --> 01:36:21,219
we could actually
have this code

2622
01:36:21,219 --> 01:36:23,099
inside of this
movement function.

2623
01:36:23,099 --> 01:36:23,459
Again,

2624
01:36:23,459 --> 01:36:25,479
just to optimize our
code a little bit more.

2625
01:36:25,479 --> 01:36:28,100
Usually, working in
functions is fantastic,

2626
01:36:28,100 --> 01:36:29,759
but because we're
already dealing with

2627
01:36:29,759 --> 01:36:31,219
quite a few different
functions here,

2628
01:36:31,219 --> 01:36:32,519
it might make
sense just to

2629
01:36:32,519 --> 01:36:34,539
have that movement
code in here.

2630
01:36:34,539 --> 01:36:36,019
What we could do is just

2631
01:36:36,019 --> 01:36:38,019
copy and paste
this into here,

2632
01:36:38,019 --> 01:36:42,959
like format this again.

2633
01:36:42,959 --> 01:36:45,739
Now we don't need to
move left function.

2634
01:36:47,020 --> 01:36:49,819
We're essentially
saying when left

2635
01:36:49,819 --> 01:36:52,679
pressed equals true,
we're moving left.

2636
01:36:52,679 --> 01:36:54,919
Implementing this for
the rest of our code.

2637
01:36:54,919 --> 01:36:57,259
We could then say elseve

2638
01:36:57,700 --> 01:37:01,979
right pressed equals true,

2639
01:37:02,220 --> 01:37:04,899
we could then move right.

2640
01:37:04,899 --> 01:37:07,399
Now the cool thing
with this is

2641
01:37:07,399 --> 01:37:08,399
because we're now working

2642
01:37:08,399 --> 01:37:09,859
in the same function,

2643
01:37:09,859 --> 01:37:12,719
we can actually optimize
this even further.

2644
01:37:12,719 --> 01:37:15,679
What I mean by that,
if you look here,

2645
01:37:15,679 --> 01:37:17,419
we're using the
same constant

2646
01:37:17,419 --> 01:37:19,659
position variables
here and here.

2647
01:37:19,659 --> 01:37:21,039
Instead of declaring it

2648
01:37:21,039 --> 01:37:22,059
in each of these
if statements,

2649
01:37:22,059 --> 01:37:24,659
why don't we just
declare it at the top?

2650
01:37:24,659 --> 01:37:29,019
We could move this here.

2651
01:37:29,019 --> 01:37:31,379
We could then
get rid of this.

2652
01:37:31,379 --> 01:37:32,659
Going even further,

2653
01:37:32,659 --> 01:37:33,879
if you actually
look at it,

2654
01:37:33,879 --> 01:37:35,519
we've got this
position left.

2655
01:37:35,519 --> 01:37:38,139
Position left is exactly
the same as well.

2656
01:37:38,139 --> 01:37:39,619
So we could get rid of

2657
01:37:39,619 --> 01:37:42,979
this and move
this up here.

2658
01:37:43,140 --> 01:37:45,219
That makes sense,
because probably

2659
01:37:45,219 --> 01:37:47,339
just do that with
position right.

2660
01:37:47,520 --> 01:37:49,999
So if we have any
position right, again,

2661
01:37:49,999 --> 01:37:52,459
we could just call
position right up here.

2662
01:37:52,459 --> 01:37:54,739
Now we've
optimized our code

2663
01:37:54,739 --> 01:37:56,239
to be a little bit
more efficient.

2664
01:37:56,239 --> 01:37:58,799
We just format this, so
it looks even nicer.

2665
01:37:58,799 --> 01:38:02,119
We should now be able
to move left and right.

2666
01:38:02,119 --> 01:38:04,859
So I can move left, I'm

2667
01:38:04,859 --> 01:38:07,419
still moving left.
That's not good.

2668
01:38:07,419 --> 01:38:10,899
Why is that happening?
Right equals

2669
01:38:10,899 --> 01:38:13,680
press equals true press.

2670
01:38:13,680 --> 01:38:14,479
Because we
actually haven't

2671
01:38:14,479 --> 01:38:15,979
added the arrow key,

2672
01:38:15,979 --> 01:38:17,439
right commands to this

2673
01:38:17,439 --> 01:38:20,079
just yet. That's typical.

2674
01:38:20,079 --> 01:38:22,359
Hey, let's add that in.

2675
01:38:22,359 --> 01:38:28,559
If event key equals
arrow, right,

2676
01:38:28,760 --> 01:38:34,199
then right pressed
equals true,

2677
01:38:35,400 --> 01:38:37,759
then the exact
same thing here,

2678
01:38:37,759 --> 01:38:40,139
except it's going to
be the reverse event.

2679
01:38:40,139 --> 01:38:45,119
K equals arrow, right,

2680
01:38:46,950 --> 01:38:50,549
right press equals false.

2681
01:38:51,430 --> 01:38:57,789
This should now give
us what we're after.

2682
01:38:57,789 --> 01:39:02,549
We can move left and we
can still move left,

2683
01:39:02,790 --> 01:39:05,229
Get the right
key is not quite

2684
01:39:05,229 --> 01:39:07,329
working the way
we want it to.

2685
01:39:07,329 --> 01:39:13,509
Why is that key arrow
right arrow left?

2686
01:39:13,509 --> 01:39:16,409
My guess is it could
have something

2687
01:39:16,409 --> 01:39:20,289
to do with you,

2688
01:39:20,289 --> 01:39:22,809
but we'll just
double check

2689
01:39:22,809 --> 01:39:26,309
for something a
little bit wrong.

2690
01:39:27,910 --> 01:39:30,669
But it's fine.

2691
01:39:34,990 --> 01:39:37,509
I see what I've done.
I've accidentally

2692
01:39:37,509 --> 01:39:39,109
done one equal sign.

2693
01:39:39,109 --> 01:39:44,829
Rookie mistake. Rookie
mistake. There we go.

2694
01:39:44,829 --> 01:39:45,769
So what was happening

2695
01:39:45,769 --> 01:39:46,609
there is we were actually

2696
01:39:46,609 --> 01:39:49,089
setting those keys
which does not.

2697
01:39:49,089 --> 01:39:50,489
So now we can move

2698
01:39:50,489 --> 01:39:52,649
right and we
can move left.

2699
01:39:52,649 --> 01:39:54,069
Always make sure you're

2700
01:39:54,069 --> 01:39:55,249
using the right
equal signs.

2701
01:39:55,249 --> 01:39:57,589
That is my advice
to all of you.

2702
01:39:57,589 --> 01:40:02,029
So we can move right
and we can move left.

2703
01:40:02,029 --> 01:40:05,214
The nice thing is we
can release those keys.

2704
01:40:05,214 --> 01:40:08,079
It's a completely
different movement style.

2705
01:40:08,079 --> 01:40:09,879
We wanted that
continuous movement,

2706
01:40:09,879 --> 01:40:10,659
we could just set it

2707
01:40:10,659 --> 01:40:11,639
to set interval and clear

2708
01:40:11,639 --> 01:40:12,559
that interval like we did

2709
01:40:12,559 --> 01:40:14,019
with the previous
exercise.

2710
01:40:14,019 --> 01:40:16,039
But with this
approach, we can

2711
01:40:16,039 --> 01:40:18,279
hold the keys and
release them.

2712
01:40:18,279 --> 01:40:21,419
So we can hold it
and release it.

2713
01:40:21,419 --> 01:40:22,559
Cool, right?

2714
01:40:22,559 --> 01:40:24,219
It's just another
form of movement.

2715
01:40:24,219 --> 01:40:26,379
But this is being
built purely around

2716
01:40:26,379 --> 01:40:29,759
tracking if these
variables are equal true,

2717
01:40:29,759 --> 01:40:31,499
again, breaking
it down one last

2718
01:40:31,499 --> 01:40:33,479
time just in case
people are struggling.

2719
01:40:33,479 --> 01:40:34,199
We have

2720
01:40:34,199 --> 01:40:35,859
these two global
variables at the top.

2721
01:40:35,859 --> 01:40:37,879
We've got left pressed
and right pressed.

2722
01:40:37,879 --> 01:40:39,999
They currently
equal false.

2723
01:40:39,999 --> 01:40:41,839
Left pressed equals false,

2724
01:40:41,839 --> 01:40:44,484
and right pressed
equals false.

2725
01:40:44,484 --> 01:40:46,489
Moving down a bit, we have

2726
01:40:46,489 --> 01:40:48,229
this movement
function here.

2727
01:40:48,229 --> 01:40:50,249
This movement function is

2728
01:40:50,249 --> 01:40:52,549
constantly going off
every tenth of a second.

2729
01:40:52,549 --> 01:40:54,249
We've set this to

2730
01:40:54,249 --> 01:40:56,089
trigger every
tenth of a second.

2731
01:40:56,089 --> 01:40:57,529
It's constantly going off.

2732
01:40:57,529 --> 01:40:59,929
We're constantly running
this move function.

2733
01:40:59,929 --> 01:41:03,109
Okay? Inside
this function,

2734
01:41:03,109 --> 01:41:05,329
we're getting the
positions of the player.

2735
01:41:05,329 --> 01:41:07,649
We're then checking to see

2736
01:41:07,649 --> 01:41:09,529
if left pressed
ever equals t,

2737
01:41:09,529 --> 01:41:11,449
and if right
pressed ever equals

2738
01:41:11,449 --> 01:41:14,389
t. If either of
these are ever true,

2739
01:41:14,389 --> 01:41:16,149
we're then going
to move the circle

2740
01:41:16,149 --> 01:41:18,189
left or move the
circle right.

2741
01:41:18,189 --> 01:41:20,109
So the movement
is purely being

2742
01:41:20,109 --> 01:41:23,689
based on those global
variables. Okay,

2743
01:41:23,810 --> 01:41:27,489
moving up a little
bit, what sets

2744
01:41:27,489 --> 01:41:29,249
those variables
to true or false

2745
01:41:29,249 --> 01:41:31,589
are the key up and
key down events.

2746
01:41:31,589 --> 01:41:34,169
When we press down on
one of the arrow keys,

2747
01:41:34,169 --> 01:41:35,629
if it's the
left arrow key,

2748
01:41:35,629 --> 01:41:37,469
we set left
pressed to true.

2749
01:41:37,469 --> 01:41:39,009
If it's the
right arrow key,

2750
01:41:39,009 --> 01:41:41,619
we set right
pressed to true.

2751
01:41:41,619 --> 01:41:44,770
As soon as we release
one of those arrocheys,

2752
01:41:44,770 --> 01:41:46,349
again depending on
if it's the left

2753
01:41:46,349 --> 01:41:47,749
ararchy or the
right arrochy,

2754
01:41:47,749 --> 01:41:50,449
we set those global
variables back to false.

2755
01:41:50,449 --> 01:41:52,629
This controls if
those variables

2756
01:41:52,629 --> 01:41:54,329
are set to true or false.

2757
01:41:54,329 --> 01:41:56,529
If those variables
are ever set to true,

2758
01:41:56,529 --> 01:41:57,649
this movement function

2759
01:41:57,649 --> 01:41:58,769
that's always going off in

2760
01:41:58,769 --> 01:42:00,669
the background kicks in

2761
01:42:00,669 --> 01:42:02,929
and then moves it
in that direction.

2762
01:42:02,929 --> 01:42:04,209
It's a completely
different

2763
01:42:04,209 --> 01:42:05,549
way of moving
the character.

2764
01:42:05,549 --> 01:42:06,829
We're doing it based off

2765
01:42:06,829 --> 01:42:08,049
of these booling
variables.

2766
01:42:08,049 --> 01:42:09,909
If it's true, move
in that direction.

2767
01:42:09,909 --> 01:42:10,909
If it's false,

2768
01:42:10,909 --> 01:42:12,789
we're not going
to move at all.

2769
01:42:12,789 --> 01:42:14,949
Hopefully that
makes sense.

2770
01:42:14,949 --> 01:42:16,569
It's purely being based

2771
01:42:16,569 --> 01:42:18,684
around these
global variables.

2772
01:42:18,684 --> 01:42:20,399
The reason I'm
going through

2773
01:42:20,399 --> 01:42:21,979
that is for some

2774
01:42:21,979 --> 01:42:23,979
of you this might
look quite familiar.

2775
01:42:23,979 --> 01:42:26,299
You actually look
at the assignment,

2776
01:42:26,299 --> 01:42:27,719
that's essentially how

2777
01:42:27,719 --> 01:42:29,559
your movement
code is working.

2778
01:42:29,559 --> 01:42:31,599
We've got four
global variables

2779
01:42:31,599 --> 01:42:32,899
at the top in
the assignment.

2780
01:42:32,899 --> 01:42:34,159
There's up pressed down,

2781
01:42:34,159 --> 01:42:36,559
pressed, left pressed,
and right pressed.

2782
01:42:36,559 --> 01:42:38,239
We've then got
our key up and

2783
01:42:38,239 --> 01:42:40,459
our key down
events that set

2784
01:42:40,459 --> 01:42:44,059
these variables to either
true or too false.

2785
01:42:44,060 --> 01:42:45,559
Opening up

2786
01:42:45,559 --> 01:42:48,099
the second assignment
very quickly.

2787
01:42:50,940 --> 01:42:56,399
Here we go, Opening
up this code.

2788
01:42:56,399 --> 01:42:58,239
We've got our
global variables at

2789
01:42:58,239 --> 01:43:00,979
the top that equal false.

2790
01:43:00,979 --> 01:43:03,959
We've got our key and
our key down events,

2791
01:43:03,959 --> 01:43:05,279
which again are
setting these global

2792
01:43:05,279 --> 01:43:07,559
variables to
true or false.

2793
01:43:07,559 --> 01:43:09,479
Then scrolling down a bit,

2794
01:43:09,479 --> 01:43:11,519
we've got this
movement function.

2795
01:43:11,519 --> 01:43:13,319
It's a closure,
but we'll get more

2796
01:43:13,319 --> 01:43:14,779
into that in some
subsequent weeks.

2797
01:43:14,779 --> 01:43:16,679
It's basically checking
that if down pressed

2798
01:43:16,679 --> 01:43:19,319
ever equal, move
our player.

2799
01:43:19,319 --> 01:43:22,499
If pressed ever equals
t, move our layer up.

2800
01:43:22,499 --> 01:43:24,719
The same thing with
left and with right.

2801
01:43:24,719 --> 01:43:26,179
That's essentially how our

2802
01:43:26,179 --> 01:43:27,799
movement code is working.

2803
01:43:27,799 --> 01:43:30,699
Now there's a few
things to note on this.

2804
01:43:30,699 --> 01:43:32,919
When you've got
an if statement,

2805
01:43:32,919 --> 01:43:34,639
you just put a
variable in here.

2806
01:43:34,639 --> 01:43:36,559
That's a shorthand
way of saying

2807
01:43:36,559 --> 01:43:38,919
if down pressed
ever equals true.

2808
01:43:38,919 --> 01:43:40,919
So that is the same thing

2809
01:43:40,919 --> 01:43:41,799
as what we just type

2810
01:43:41,799 --> 01:43:43,399
t. But we don't

2811
01:43:43,399 --> 01:43:44,859
need to say equals
equals true.

2812
01:43:44,859 --> 01:43:46,439
It's just given

2813
01:43:46,439 --> 01:43:47,839
that that's what's
going to happen.

2814
01:43:47,839 --> 01:43:49,239
The next thing
is when we say

2815
01:43:49,239 --> 01:43:50,659
play a top plus plus,

2816
01:43:50,659 --> 01:43:54,139
it means add one to this
player top variable.

2817
01:43:54,139 --> 01:43:56,439
Essentially play
a top plus plus.

2818
01:43:56,439 --> 01:43:57,239
It's the same thing as

2819
01:43:57,239 --> 01:43:58,619
saying player top equals

2820
01:43:58,619 --> 01:44:02,599
player top plus one.

2821
01:44:02,599 --> 01:44:05,539
Those are two shorthand
things that you might

2822
01:44:05,539 --> 01:44:08,584
need to know for this
assignment, okay?

2823
01:44:08,584 --> 01:44:10,969
But hopefully that's
making a bit more sense.

2824
01:44:10,969 --> 01:44:12,049
So essentially
we're moving

2825
01:44:12,049 --> 01:44:13,629
the player either down,

2826
01:44:13,629 --> 01:44:15,429
up, left, or right,

2827
01:44:15,429 --> 01:44:17,809
purely based on these
global variables.

2828
01:44:17,809 --> 01:44:18,929
And that's how
the movement

2829
01:44:18,929 --> 01:44:20,409
for the player works.

2830
01:44:20,409 --> 01:44:22,369
That's a huge part
of the assignment.

2831
01:44:22,369 --> 01:44:24,309
You should now be
able to understand,

2832
01:44:24,309 --> 01:44:26,049
because you
completely understand

2833
01:44:26,049 --> 01:44:27,529
how this player moves
around the screen.

2834
01:44:27,529 --> 01:44:29,689
Now we're using these
global variables.

2835
01:44:29,689 --> 01:44:31,129
We're using this function

2836
01:44:31,129 --> 01:44:32,609
inside of this
interval that's

2837
01:44:32,609 --> 01:44:33,989
always going off
in the background

2838
01:44:33,989 --> 01:44:35,989
that's checking those
global variables.

2839
01:44:35,989 --> 01:44:37,509
If down press
is ever true,

2840
01:44:37,509 --> 01:44:39,449
we know that down
key is being held.

2841
01:44:39,449 --> 01:44:40,409
If that's the case,

2842
01:44:40,409 --> 01:44:42,829
we're going to move
the character down.

2843
01:44:42,880 --> 01:44:45,359
Again, all of that's
being controlled

2844
01:44:45,359 --> 01:44:47,539
with the key up in
key down events.

2845
01:44:47,539 --> 01:44:50,319
The key up sets
those keys to false,

2846
01:44:50,319 --> 01:44:53,419
the key down sets
those keys to true.

2847
01:44:53,419 --> 01:44:57,019
Pretty cool, right? That
is your assignment.

2848
01:44:57,019 --> 01:44:58,539
So everything
we've just gone

2849
01:44:58,539 --> 01:45:00,199
through just now is

2850
01:45:00,199 --> 01:45:01,519
how that movement code in

2851
01:45:01,519 --> 01:45:03,769
the assignment
essentially works.

2852
01:45:03,769 --> 01:45:05,739
Again, you should be
able to understand

2853
01:45:05,739 --> 01:45:07,359
a good chunk of this
assignment code.

2854
01:45:07,359 --> 01:45:08,379
Now, it should be able

2855
01:45:08,379 --> 01:45:09,619
to be a bit
clearer to you.

2856
01:45:09,619 --> 01:45:10,999
I would say you still

2857
01:45:10,999 --> 01:45:12,259
might not be 100% on it,

2858
01:45:12,259 --> 01:45:13,119
but the more you
add to this,

2859
01:45:13,119 --> 01:45:14,399
the easier it will get.

2860
01:45:14,399 --> 01:45:16,139
I promise in

2861
01:45:16,139 --> 01:45:17,119
the subsequent weeks we're

2862
01:45:17,119 --> 01:45:17,879
really going to focus

2863
01:45:17,879 --> 01:45:20,039
on what's happening
with this maze,

2864
01:45:20,039 --> 01:45:21,619
with this four loop.

2865
01:45:21,619 --> 01:45:22,999
The cool thing
is we can still

2866
01:45:22,999 --> 01:45:24,199
decipher a little bit

2867
01:45:24,199 --> 01:45:25,299
of what's happening here.

2868
01:45:25,299 --> 01:45:26,059
We're using

2869
01:45:26,059 --> 01:45:28,399
a switch statement
and we're saying,

2870
01:45:28,399 --> 01:45:30,999
okay, if case one,
whatever that means.

2871
01:45:30,999 --> 01:45:32,299
We're adding a wall.

2872
01:45:32,299 --> 01:45:33,899
We're looking up
at this maze.

2873
01:45:33,899 --> 01:45:35,239
We can see this is

2874
01:45:35,239 --> 01:45:37,599
the rough outline for
the walls on the maze.

2875
01:45:37,599 --> 01:45:40,819
Each one here represents
one of those ones

2876
01:45:40,819 --> 01:45:44,779
on the maze.
Interesting. Right.

2877
01:45:44,779 --> 01:45:46,959
Again, you can decipher

2878
01:45:46,959 --> 01:45:49,499
pieces of that content.

2879
01:45:49,499 --> 01:45:51,319
Interesting.

2880
01:45:51,319 --> 01:45:54,059
Moving back to the
lecture though,

2881
01:45:54,059 --> 01:45:55,839
Believer, I can
see that is

2882
01:45:55,839 --> 01:45:57,459
the assignment code that
we're working with.

2883
01:45:57,459 --> 01:45:59,839
Now I'm going to
teach you how you

2884
01:45:59,839 --> 01:46:02,680
can add CSS classes
using Javascript.

2885
01:46:02,680 --> 01:46:04,059
Not only can we
actually add

2886
01:46:04,059 --> 01:46:05,800
CSS properties,
the Javascript,

2887
01:46:05,800 --> 01:46:10,159
we can even add CSS
classes to it as well.

2888
01:46:10,159 --> 01:46:11,939
It's very similar
to setting

2889
01:46:11,939 --> 01:46:13,219
a style, however,

2890
01:46:13,219 --> 01:46:15,459
it uses the
syntax, class name

2891
01:46:15,459 --> 01:46:16,639
equals and then
the name of

2892
01:46:16,639 --> 01:46:18,959
a CSS class that
we'd like to add.

2893
01:46:18,959 --> 01:46:22,219
Let's use this
example for instance.

2894
01:46:22,320 --> 01:46:25,599
In this case I am
adding a class called

2895
01:46:25,599 --> 01:46:28,799
semi transparent
and blue in my CSS.

2896
01:46:28,799 --> 01:46:31,199
I've got a class called
semi transparent and

2897
01:46:31,199 --> 01:46:33,699
blue in that CSS,

2898
01:46:33,699 --> 01:46:35,159
I'm changing the
background color

2899
01:46:35,159 --> 01:46:36,619
to blue and the opacity to

2900
01:46:36,619 --> 01:46:38,599
0.5 I'm adding

2901
01:46:38,599 --> 01:46:41,820
this CSS class
using Javascript.

2902
01:46:41,820 --> 01:46:44,059
Let's try it ourselves.

2903
01:46:44,059 --> 01:46:46,759
Going into our code then

2904
01:46:47,180 --> 01:46:50,619
we'll just add a
very quick CSS file.

2905
01:46:50,619 --> 01:46:51,739
We've actually already got

2906
01:46:51,739 --> 01:46:53,219
CSS file that's useful.

2907
01:46:53,219 --> 01:46:55,419
I definitely did not
forget about that.

2908
01:46:55,419 --> 01:46:59,039
I could say semi

2909
01:46:59,039 --> 01:47:06,559
transparent and blue
background color blue

2910
01:47:06,559 --> 01:47:10,980
and opacity equals 0.5

2911
01:47:10,980 --> 01:47:12,879
We're going to
add this class

2912
01:47:12,879 --> 01:47:16,059
to this circle
using Java script.

2913
01:47:16,180 --> 01:47:18,519
The way we do this
and we'll just move

2914
01:47:18,519 --> 01:47:20,939
this movement code
all the way down.

2915
01:47:21,570 --> 01:47:23,689
We'll just add
these global

2916
01:47:23,689 --> 01:47:25,369
variables all the
way down as well.

2917
01:47:25,369 --> 01:47:30,129
Like we've just got this
nice bit just here.

2918
01:47:30,129 --> 01:47:32,189
What we can do
is we can say

2919
01:47:32,189 --> 01:47:37,769
circle class list, add.

2920
01:47:37,769 --> 01:47:40,229
Then we can have
that class.

2921
01:47:40,229 --> 01:47:41,909
I'm not even going to try

2922
01:47:41,909 --> 01:47:42,969
and type that again.

2923
01:47:42,969 --> 01:47:44,609
I'm just going to
copy and paste it.

2924
01:47:44,609 --> 01:47:47,309
We can say semi
transparent and blue.

2925
01:47:47,309 --> 01:47:48,989
This is all
worked correctly.

2926
01:47:48,989 --> 01:47:51,469
When I now go
back into here,

2927
01:47:51,469 --> 01:47:54,970
our circle is now
semi transparent,

2928
01:47:54,970 --> 01:47:57,064
but it's not quite blue.

2929
01:47:57,064 --> 01:47:59,599
And the reason
it's not blue is

2930
01:47:59,599 --> 01:48:02,899
because assuming
something's overriding it.

2931
01:48:02,899 --> 01:48:06,719
Yeah, the circles
overriding it. That's fine.

2932
01:48:08,960 --> 01:48:11,839
We could try and do is

2933
01:48:11,839 --> 01:48:13,939
move it up a little bit

2934
01:48:13,939 --> 01:48:20,260
like that because it's
still a priority.

2935
01:48:20,260 --> 01:48:23,119
Come on, man.
What we can do

2936
01:48:23,119 --> 01:48:24,579
is we can add the
important keyword

2937
01:48:24,579 --> 01:48:26,459
on this that will
override it.

2938
01:48:26,459 --> 01:48:28,799
Not a great solution,
but it's one we can use

2939
01:48:28,799 --> 01:48:31,259
just for now. There we go.

2940
01:48:31,259 --> 01:48:33,580
So we've added that
class using Javascript,

2941
01:48:33,580 --> 01:48:35,399
we've added that
semi transparent and

2942
01:48:35,399 --> 01:48:38,520
blue class using
Javascript.

2943
01:48:38,580 --> 01:48:41,319
The cool thing is
we can actually add

2944
01:48:41,319 --> 01:48:43,719
multiple classes
onto these elements.

2945
01:48:43,719 --> 01:48:44,939
All we need to
do is follow

2946
01:48:44,939 --> 01:48:46,179
the same structure.

2947
01:48:46,179 --> 01:48:47,819
Circle, class list,

2948
01:48:47,819 --> 01:48:50,759
ad class one
and class two.

2949
01:48:50,759 --> 01:48:52,219
We wanted to, we
could separate

2950
01:48:52,219 --> 01:48:54,859
that semi transparent
and blue class

2951
01:48:54,859 --> 01:48:57,499
into semi

2952
01:48:57,499 --> 01:49:00,279
transparent and then a
separate blue class.

2953
01:49:00,279 --> 01:49:01,559
Then we can add each of

2954
01:49:01,559 --> 01:49:04,079
these classes onto
that circle element.

2955
01:49:04,079 --> 01:49:06,379
Let's try that as well.

2956
01:49:06,620 --> 01:49:10,340
We could say semi
transparent.

2957
01:49:11,580 --> 01:49:15,139
We'll just copy and
paste this bit.

2958
01:49:15,780 --> 01:49:18,919
And then do blue with

2959
01:49:18,919 --> 01:49:21,219
the background
color of blue.

2960
01:49:21,340 --> 01:49:25,739
We could add the semi
transparent part,

2961
01:49:25,980 --> 01:49:28,119
that will just
give us that nice

2962
01:49:28,119 --> 01:49:30,079
faded effect, like this.

2963
01:49:30,079 --> 01:49:32,959
We could then add
an additional class

2964
01:49:32,959 --> 01:49:35,419
onto this circle
class list.

2965
01:49:35,419 --> 01:49:39,239
Add blue,

2966
01:49:39,239 --> 01:49:40,879
which will then give us

2967
01:49:40,879 --> 01:49:43,179
that nice blue
color as well.

2968
01:49:44,190 --> 01:49:49,429
Or should anyway.
It's not blue, is it?

2969
01:49:49,429 --> 01:49:51,949
I'm using just blue.

2970
01:49:51,949 --> 01:49:54,449
It's been a long
day. There we go.

2971
01:49:54,449 --> 01:49:55,809
So now we've got
two different

2972
01:49:55,809 --> 01:49:57,129
classes on this element.

2973
01:49:57,129 --> 01:49:58,569
And that's purely
being based

2974
01:49:58,569 --> 01:49:59,709
around Java script.

2975
01:49:59,709 --> 01:50:00,309
So we're adding

2976
01:50:00,309 --> 01:50:02,409
the semi transparent
class and

2977
01:50:02,409 --> 01:50:04,029
then the blue
class on that

2978
01:50:04,029 --> 01:50:07,069
as well. Cool, Right,

2979
01:50:07,810 --> 01:50:10,409
Because we are teaching
you a variety of

2980
01:50:10,409 --> 01:50:12,029
different Javascript
skills, it makes sense.

2981
01:50:12,029 --> 01:50:13,209
If we can add classes,

2982
01:50:13,209 --> 01:50:16,129
we can also remove
classes if you wanted to.

2983
01:50:16,129 --> 01:50:18,009
You could remove a
specific class by

2984
01:50:18,009 --> 01:50:20,709
saying remove and
then the class name.

2985
01:50:20,709 --> 01:50:22,249
If I, for instance,
didn't like

2986
01:50:22,249 --> 01:50:24,209
this semi
transparent class,

2987
01:50:24,209 --> 01:50:29,849
I could say circle
class list remove.

2988
01:50:31,010 --> 01:50:33,589
I'm just going to
copy and placed it.

2989
01:50:33,589 --> 01:50:34,769
Then I struggle with

2990
01:50:34,769 --> 01:50:37,749
the word transparent,
which is stupid.

2991
01:50:37,749 --> 01:50:39,789
This should remove the
failed effect nail.

2992
01:50:39,789 --> 01:50:41,509
We're adding the
transparent class,

2993
01:50:41,509 --> 01:50:43,129
we're then adding
the blue class,

2994
01:50:43,129 --> 01:50:45,549
then we're removing
the transparent class.

2995
01:50:45,549 --> 01:50:47,349
Now obviously, that's
a bit pointless.

2996
01:50:47,349 --> 01:50:48,649
If you wanted to,
we could lock this

2997
01:50:48,649 --> 01:50:50,509
behind some click event.

2998
01:50:50,509 --> 01:50:58,049
We could say function
class, I guess.

2999
01:50:58,049 --> 01:51:01,569
Then just add
this into here.

3000
01:51:02,650 --> 01:51:05,109
We could lock this
behind a click event.

3001
01:51:05,109 --> 01:51:06,849
So we could say
circle, add event,

3002
01:51:06,849 --> 01:51:13,969
listener, click, Remove
transparent class.

3003
01:51:14,530 --> 01:51:17,269
Now we've got that
nice faded blue.

3004
01:51:17,269 --> 01:51:18,889
And then when I
click on the circle,

3005
01:51:18,889 --> 01:51:21,109
we remove that
class entirely.

3006
01:51:21,109 --> 01:51:24,189
Pretty cool, right? So
you can add classes,

3007
01:51:24,189 --> 01:51:26,029
and you can remove
classes by using

3008
01:51:26,029 --> 01:51:30,449
the add and remove
functions. Pretty cool.

3009
01:51:32,070 --> 01:51:34,689
The next one is we're
going to look at

3010
01:51:34,689 --> 01:51:37,329
finding elements
with CSS classes.

3011
01:51:37,329 --> 01:51:38,429
So far the way we've

3012
01:51:38,429 --> 01:51:39,529
been finding our elements

3013
01:51:39,529 --> 01:51:42,109
is using query
selector and an ID.

3014
01:51:42,109 --> 01:51:43,470
Now that's fantastic,

3015
01:51:43,470 --> 01:51:44,869
because ID's are unique,

3016
01:51:44,869 --> 01:51:46,749
we're only ever going
to get one item

3017
01:51:46,749 --> 01:51:48,469
back with that ID.

3018
01:51:48,469 --> 01:51:50,329
But we can actually
find elements

3019
01:51:50,329 --> 01:51:51,649
using class names as well.

3020
01:51:51,649 --> 01:51:53,609
I told you in HTML classes

3021
01:51:53,609 --> 01:51:55,209
are a lot more
preferred to ID's.

3022
01:51:55,209 --> 01:51:56,449
Classes are more useful.

3023
01:51:56,449 --> 01:51:58,269
We can re, use them
just generally.

3024
01:51:58,269 --> 01:52:00,689
They're a lot nicer when

3025
01:52:00,689 --> 01:52:03,149
we're doing HTML CSS.

3026
01:52:04,060 --> 01:52:06,619
But again, there's
one big difference

3027
01:52:06,619 --> 01:52:08,159
between IDs and classes.

3028
01:52:08,159 --> 01:52:09,599
The ID is unique.

3029
01:52:09,599 --> 01:52:10,839
There will only
ever be one

3030
01:52:10,839 --> 01:52:12,379
element on that page.

3031
01:52:12,379 --> 01:52:15,839
With that ID, classes
aren't unique.

3032
01:52:15,839 --> 01:52:19,979
Multiple elements can
have the same class.

3033
01:52:19,979 --> 01:52:21,919
When we're dealing
with document

3034
01:52:21,919 --> 01:52:23,219
do query selector,

3035
01:52:23,219 --> 01:52:24,639
it's always going
to retrieve

3036
01:52:24,639 --> 01:52:27,199
one single element
from that page.

3037
01:52:27,199 --> 01:52:30,359
However, it's just not
possible with classes,

3038
01:52:30,359 --> 01:52:32,239
there might be more
than one element

3039
01:52:32,239 --> 01:52:34,679
on that page with
the same class.

3040
01:52:34,679 --> 01:52:37,519
Let's use this
example for instance.

3041
01:52:37,519 --> 01:52:40,309
Let's just
replicate this. Now

3042
01:52:40,309 --> 01:52:42,979
let's remove all of
our Java script.

3043
01:52:42,979 --> 01:52:45,960
And we'll remove all
of this funky CSS,

3044
01:52:45,960 --> 01:52:49,599
and we'll just have
two circle elements

3045
01:52:50,680 --> 01:52:53,040
instead of ID's.

3046
01:52:53,040 --> 01:52:58,659
We'll have these
classes, okay.

3047
01:52:58,659 --> 01:53:00,019
Then in the CSS we'll just

3048
01:53:00,019 --> 01:53:04,139
say circle,
background color,

3049
01:53:04,139 --> 01:53:08,059
red width equals ten M,

3050
01:53:08,059 --> 01:53:11,159
height equals ten EM,

3051
01:53:11,490 --> 01:53:16,769
and border radius.
Border radius

3052
01:53:17,210 --> 01:53:20,929
equals 100% This
should give us

3053
01:53:20,929 --> 01:53:25,609
two circles
essentially or not.

3054
01:53:26,210 --> 01:53:29,169
That's fun. It's
because hey,

3055
01:53:29,169 --> 01:53:32,049
have misspelled
circle all.

3056
01:53:32,049 --> 01:53:32,509
It's one of

3057
01:53:32,509 --> 01:53:34,069
those annoying ones
that I misspell.

3058
01:53:34,069 --> 01:53:37,349
Got to love it still

3059
01:53:37,349 --> 01:53:38,589
not quite because I've

3060
01:53:38,589 --> 01:53:41,309
misspelled
forgotten percent.

3061
01:53:41,309 --> 01:53:43,449
I've just done the
support session lectures

3062
01:53:43,449 --> 01:53:45,429
and my brain isn't quite
what it used to be.

3063
01:53:45,429 --> 01:53:46,849
There we go. We're
going to get rid of

3064
01:53:46,849 --> 01:53:47,609
the text as well because

3065
01:53:47,609 --> 01:53:49,569
that looks a bit stupid.

3066
01:53:51,540 --> 01:53:55,559
Perfect. Now we've
got two circles.

3067
01:53:55,559 --> 01:53:57,999
Okay, everyone's
happy with that?

3068
01:53:57,999 --> 01:54:00,539
We have two circles.

3069
01:54:00,539 --> 01:54:02,099
Now, if I was going to

3070
01:54:02,099 --> 01:54:06,280
use query selector
traditionally,

3071
01:54:06,280 --> 01:54:07,219
what you might
think I would

3072
01:54:07,219 --> 01:54:08,579
do is I could say

3073
01:54:08,579 --> 01:54:12,699
constant circle
equals documents

3074
01:54:14,950 --> 01:54:17,609
query selector.

3075
01:54:17,609 --> 01:54:19,789
Now, because we're
dealing with classes,

3076
01:54:19,789 --> 01:54:25,329
we could say
circle thing is.

3077
01:54:25,329 --> 01:54:26,329
What would you actually

3078
01:54:26,329 --> 01:54:29,509
expect this element to be?

3079
01:54:29,590 --> 01:54:31,769
Because again, we've got

3080
01:54:31,769 --> 01:54:33,209
two of these
dips right here.

3081
01:54:33,209 --> 01:54:34,009
What do you think is

3082
01:54:34,009 --> 01:54:35,369
actually going
to get retrieved

3083
01:54:35,369 --> 01:54:36,369
when we say document

3084
01:54:36,369 --> 01:54:37,929
do query selector circle?

3085
01:54:37,929 --> 01:54:40,649
It's only going to
bring back one element.

3086
01:54:40,649 --> 01:54:42,609
The element is actually
going to bring

3087
01:54:42,609 --> 01:54:45,189
back is this first circle.

3088
01:54:46,270 --> 01:54:49,229
When you say query
selector and

3089
01:54:49,229 --> 01:54:52,229
then put the criteria
as their CSS class,

3090
01:54:52,229 --> 01:54:53,949
it's only ever
going to bring

3091
01:54:53,949 --> 01:54:55,189
back that first element,

3092
01:54:55,189 --> 01:54:57,809
that first instance
of that class.

3093
01:54:57,809 --> 01:55:00,589
Now just remember we use
dots for classes and

3094
01:55:00,589 --> 01:55:02,029
hashtags for IDs because

3095
01:55:02,029 --> 01:55:03,929
we're finding elements
by their class name.

3096
01:55:03,929 --> 01:55:05,969
It's then the class,

3097
01:55:05,969 --> 01:55:11,349
if I were to literally
say circle style,

3098
01:55:11,790 --> 01:55:13,989
doing that annoying
thing again,

3099
01:55:13,989 --> 01:55:16,309
that's fun style.

3100
01:55:18,750 --> 01:55:23,449
Background color equals.

3101
01:55:23,449 --> 01:55:26,229
Let's go with blue just
to match the slide.

3102
01:55:26,890 --> 01:55:28,969
It's only going
to bring back

3103
01:55:28,969 --> 01:55:31,069
that first circle
element because again,

3104
01:55:31,069 --> 01:55:33,969
it's only expecting to
bring back one thing.

3105
01:55:33,969 --> 01:55:36,089
Query selector
is okay with

3106
01:55:36,089 --> 01:55:38,269
classes when there's

3107
01:55:38,269 --> 01:55:40,969
only one element that
we'd like to retrieve.

3108
01:55:40,969 --> 01:55:41,709
And again, it's going

3109
01:55:41,709 --> 01:55:43,389
to be that first element.

3110
01:55:43,389 --> 01:55:45,269
Instead, if we wanted

3111
01:55:45,269 --> 01:55:46,649
to retrieve all
those elements,

3112
01:55:46,649 --> 01:55:49,289
we could use something
called query selector.

3113
01:55:49,289 --> 01:55:51,709
Now, when you use
query selector,

3114
01:55:51,709 --> 01:55:54,769
it will bring back
all of those classes.

3115
01:55:54,769 --> 01:55:55,749
Now because

3116
01:55:55,749 --> 01:55:57,229
more than one element
has been retrieved,

3117
01:55:57,229 --> 01:55:57,469
again,

3118
01:55:57,469 --> 01:55:59,709
we're collecting both
of those circles.

3119
01:55:59,709 --> 01:56:01,370
We need to specify

3120
01:56:01,370 --> 01:56:04,049
which element we
would like to change.

3121
01:56:04,049 --> 01:56:05,329
Now this is
using something

3122
01:56:05,329 --> 01:56:07,209
called an index position.

3123
01:56:07,209 --> 01:56:09,189
Now the first element

3124
01:56:09,189 --> 01:56:11,529
that's brought back
starts with a zero.

3125
01:56:11,529 --> 01:56:13,389
If we want the
first circle,

3126
01:56:13,389 --> 01:56:16,930
we say circle
square brackets

3127
01:56:16,930 --> 01:56:19,909
zero and that will give
us that first circle.

3128
01:56:19,909 --> 01:56:21,749
We want the second circle.

3129
01:56:21,749 --> 01:56:24,269
We have a one in
there instead.

3130
01:56:24,269 --> 01:56:25,909
Now believe it
or not, this is

3131
01:56:25,909 --> 01:56:27,969
actually creating
something called an array.

3132
01:56:27,969 --> 01:56:29,909
Arrays a bit like
a container or

3133
01:56:29,909 --> 01:56:32,929
a group of
multiple elements.

3134
01:56:32,929 --> 01:56:34,409
We're going to do
a lot more about

3135
01:56:34,409 --> 01:56:35,909
arrays in later lectures,

3136
01:56:35,909 --> 01:56:39,089
but just for now, that's
all you really need

3137
01:56:39,089 --> 01:56:42,349
to know when we use
query select all.

3138
01:56:42,349 --> 01:56:44,219
And again,
remember it's all,

3139
01:56:44,219 --> 01:56:46,909
it's bringing back
multiple elements

3140
01:56:46,909 --> 01:56:48,609
for us to interact with.

3141
01:56:48,609 --> 01:56:51,329
We need to then
specify which element

3142
01:56:51,329 --> 01:56:53,249
in that big group we

3143
01:56:53,249 --> 01:56:54,649
would like to
interact with.

3144
01:56:54,649 --> 01:56:57,149
We do that through
the index position.

3145
01:56:57,149 --> 01:56:59,509
If we make that
change, then

3146
01:56:59,509 --> 01:57:01,389
instead of saying
query selector,

3147
01:57:01,389 --> 01:57:03,709
we say query selector all.

3148
01:57:03,710 --> 01:57:07,289
If I wanted to select
this first circle,

3149
01:57:07,289 --> 01:57:09,229
I would say circle zero.

3150
01:57:09,229 --> 01:57:11,589
If I wanted the
second circle,

3151
01:57:11,589 --> 01:57:15,829
I would say circle
circle one.

3152
01:57:15,830 --> 01:57:18,249
Just so it's a bit
clearer, let's maybe

3153
01:57:18,249 --> 01:57:20,549
style this one to yellow,

3154
01:57:20,549 --> 01:57:23,414
be a bit more Pac
Manning. Suppose

3155
01:57:23,414 --> 01:57:25,919
that's essentially
how you would target

3156
01:57:25,919 --> 01:57:28,380
elements using classes.

3157
01:57:28,380 --> 01:57:30,779
If you're dealing
with just one class,

3158
01:57:30,779 --> 01:57:32,959
with one element, you

3159
01:57:32,959 --> 01:57:34,659
can still use
query selector.

3160
01:57:34,659 --> 01:57:37,039
But if you're dealing
with multiple classes,

3161
01:57:37,039 --> 01:57:39,819
multiple elements with
the same class name,

3162
01:57:39,819 --> 01:57:40,899
this is the approach

3163
01:57:40,899 --> 01:57:42,339
you're going to
have to use.

3164
01:57:42,339 --> 01:57:44,579
Hopefully that makes
a bit of sense.

3165
01:57:44,579 --> 01:57:47,359
The idea is if there's
multiple elements,

3166
01:57:47,359 --> 01:57:48,799
you just need to
say which element

3167
01:57:48,799 --> 01:57:49,979
you'd like to
interact with,

3168
01:57:49,979 --> 01:57:51,219
which element you'd like

3169
01:57:51,219 --> 01:57:53,439
to style. In this case,

3170
01:57:53,750 --> 01:57:56,049
it's a bit complicated
sometimes,

3171
01:57:56,049 --> 01:57:58,229
but just remember it
always starts with zero.

3172
01:57:58,229 --> 01:58:00,329
In this specific instance,

3173
01:58:00,329 --> 01:58:01,529
there are some languages

3174
01:58:01,529 --> 01:58:02,569
where it differs slightly.

3175
01:58:02,569 --> 01:58:03,789
But usually when
we're dealing with

3176
01:58:03,789 --> 01:58:05,469
a rays, it starts
with zero.

3177
01:58:05,469 --> 01:58:07,689
I'd say 99% of the time.

3178
01:58:07,689 --> 01:58:10,529
The first element,
the first thing

3179
01:58:10,529 --> 01:58:13,009
in that group, will
start with zero.

3180
01:58:13,009 --> 01:58:17,149
Okay, Hopefully everyone,

3181
01:58:17,149 --> 01:58:20,029
but hopefully everyone's
okay with that.

3182
01:58:20,029 --> 01:58:22,029
Now if you didn't
get it, this is

3183
01:58:22,029 --> 01:58:24,129
the solution to
exercise three.

3184
01:58:24,129 --> 01:58:25,389
I put this right
at the end,

3185
01:58:25,389 --> 01:58:27,379
so no one could cheat.

3186
01:58:27,379 --> 01:58:29,869
If you didn't do
exercise three,

3187
01:58:29,869 --> 01:58:31,549
I'd recommend
copying this code

3188
01:58:31,549 --> 01:58:33,809
because exercise four
does require it.

3189
01:58:33,809 --> 01:58:36,410
Okay? Again, this was
using the intervals.

3190
01:58:36,410 --> 01:58:37,929
It was using a variety of

3191
01:58:37,929 --> 01:58:38,769
functions to move

3192
01:58:38,769 --> 01:58:40,629
that circle around
the screen.

3193
01:58:40,629 --> 01:58:43,509
For exercise four, I

3194
01:58:43,509 --> 01:58:47,670
want you to change the
code from exercise 33,

3195
01:58:47,670 --> 01:58:50,249
change the code from
the previous slide,

3196
01:58:50,249 --> 01:58:51,609
and make it so
that when you hold

3197
01:58:51,609 --> 01:58:53,849
the left key, the
circle moves.

3198
01:58:53,849 --> 01:58:55,349
Once the key is released,

3199
01:58:55,349 --> 01:58:57,309
that circle stops moving.

3200
01:58:57,309 --> 01:58:59,009
Once that's working, add

3201
01:58:59,009 --> 01:59:00,370
the other directions.

3202
01:59:00,370 --> 01:59:02,009
Now you're only
going to need one

3203
01:59:02,009 --> 01:59:03,589
timer in the background
that's running.

3204
01:59:03,589 --> 01:59:04,929
Remember our
movement function,

3205
01:59:04,929 --> 01:59:06,269
the movement function
that was checking

3206
01:59:06,269 --> 01:59:07,929
for those global
variables?

3207
01:59:07,929 --> 01:59:09,569
That's what you're
going to do.

3208
01:59:09,569 --> 01:59:10,309
So you're going to

3209
01:59:10,309 --> 01:59:12,449
have those four global
variables at the top.

3210
01:59:12,449 --> 01:59:13,829
You'll have left
pressed, right,

3211
01:59:13,829 --> 01:59:16,629
pressed up, pressed
and down, pressed.

3212
01:59:16,629 --> 01:59:18,669
You have your key
up, your key down.

3213
01:59:18,669 --> 01:59:20,409
And the movement function
that says if left

3214
01:59:20,409 --> 01:59:22,629
pressed equals
true, move left.

3215
01:59:22,629 --> 01:59:25,789
If up pressed equals
true, move up.

3216
01:59:25,789 --> 01:59:27,029
Again, you've got to

3217
01:59:27,029 --> 01:59:28,389
change your code
to that logic.

3218
01:59:28,389 --> 01:59:30,369
If you are really
struggling with this,

3219
01:59:30,369 --> 01:59:33,489
maybe look at the
assignment because the

3220
01:59:33,489 --> 01:59:36,824
assignment's got this
code for you, okay?

3221
01:59:36,824 --> 01:59:38,979
As an optional exercise,

3222
01:59:38,979 --> 01:59:41,499
make it so that the
keys one to nine on

3223
01:59:41,499 --> 01:59:45,599
your keyboard change the
speed of the circle.

3224
01:59:45,599 --> 01:59:46,919
If you press one,

3225
01:59:46,919 --> 01:59:48,559
the circle should
be really slow.

3226
01:59:48,559 --> 01:59:49,639
If you press nine,

3227
01:59:49,639 --> 01:59:51,499
the circle
should speed up.

3228
01:59:51,499 --> 01:59:53,079
You're also then
going to add

3229
01:59:53,079 --> 01:59:54,259
collision to stop the

3230
01:59:54,259 --> 01:59:55,639
circle from leaving
the screen.

3231
01:59:55,639 --> 01:59:56,879
Remember our window do in

3232
01:59:56,879 --> 01:59:58,459
a width and window
do in a height.

3233
01:59:58,459 --> 01:59:59,419
You're going to add that

3234
01:59:59,419 --> 02:00:00,889
into this movement code.

3235
02:00:00,889 --> 02:00:03,019
Okay, here are a couple

3236
02:00:03,019 --> 02:00:03,959
of useful links in case

3237
02:00:03,959 --> 02:00:05,879
people are really
struggling.

3238
02:00:05,879 --> 02:00:08,279
We've got events,
again, I recommend

3239
02:00:08,279 --> 02:00:09,019
looking at this to see

3240
02:00:09,019 --> 02:00:10,259
all the cool
events we've got.

3241
02:00:10,259 --> 02:00:11,259
There's pass float,

3242
02:00:11,259 --> 02:00:12,219
which is what
we used to get

3243
02:00:12,219 --> 02:00:14,679
that string into
a number pass t,

3244
02:00:14,679 --> 02:00:16,199
which is a whole
number set

3245
02:00:16,199 --> 02:00:17,599
interval which
also includes

3246
02:00:17,599 --> 02:00:19,059
set time out which
is a slightly

3247
02:00:19,059 --> 02:00:20,939
different function but
still quite as fun.

3248
02:00:20,939 --> 02:00:22,659
Get bounding
client wrecked

3249
02:00:22,659 --> 02:00:24,359
different keyboard events.

3250
02:00:24,359 --> 02:00:26,819
L statements,
switch statements

3251
02:00:26,819 --> 02:00:28,859
and then query select all.

3252
02:00:28,859 --> 02:00:30,339
Hopefully everyone's

3253
02:00:30,339 --> 02:00:31,379
had some fun
with this one.

3254
02:00:31,379 --> 02:00:32,599
Please do note if you're

3255
02:00:32,599 --> 02:00:34,339
watching this lecture
when it came out,

3256
02:00:34,339 --> 02:00:36,699
we've got two weeks
off for Easter. Now,

3257
02:00:36,699 --> 02:00:38,359
I've thrown quite a lot of

3258
02:00:38,359 --> 02:00:39,899
information at
you, just there,

3259
02:00:39,899 --> 02:00:40,979
but this should be

3260
02:00:40,979 --> 02:00:42,079
quite a nice
starting point

3261
02:00:42,079 --> 02:00:43,359
for the assignments
I've taught you.

3262
02:00:43,359 --> 02:00:45,599
If statements, I've
taught you selecting

3263
02:00:45,599 --> 02:00:46,879
elements and applying CSS

3264
02:00:46,879 --> 02:00:48,419
properties to
those elements.

3265
02:00:48,419 --> 02:00:50,619
You can actually do
quite a few requirements

3266
02:00:50,619 --> 02:00:52,319
of the assignment
at this stage,

3267
02:00:52,319 --> 02:00:53,939
using the movement
code, you can

3268
02:00:53,939 --> 02:00:54,639
even move some of

3269
02:00:54,639 --> 02:00:55,879
the enemy
characters around.

3270
02:00:55,879 --> 02:00:57,279
If you find all
the enemies

3271
02:00:57,279 --> 02:00:58,499
by their class name,

3272
02:00:58,499 --> 02:01:00,399
you might be able to do
something with that.

3273
02:01:00,399 --> 02:01:01,039
They might all be

3274
02:01:01,039 --> 02:01:02,099
moving in the
same direction,

3275
02:01:02,099 --> 02:01:03,679
but it's a starting point.

3276
02:01:03,679 --> 02:01:04,659
When we come back,

3277
02:01:04,659 --> 02:01:06,099
we're going to look
at random numbers.

3278
02:01:06,099 --> 02:01:07,639
We're going to
look at specific

3279
02:01:07,639 --> 02:01:09,199
collision techion
and for loops.

3280
02:01:09,199 --> 02:01:10,539
We're going to do
some fun stuff

3281
02:01:10,539 --> 02:01:12,210
with some character
customizers.

3282
02:01:12,210 --> 02:01:14,819
So again, really use
the next two weeks

3283
02:01:14,819 --> 02:01:17,739
to get comfortable with
what I've taught you.

3284
02:01:17,739 --> 02:01:20,579
Really focus on the
Javascript code,

3285
02:01:20,579 --> 02:01:23,559
identify where you
might be struggling,

3286
02:01:23,559 --> 02:01:27,094
and spend more time on
those sections. Okay,

3287
02:01:27,094 --> 02:01:29,069
but yeah, have some
fun with this.

3288
02:01:29,069 --> 02:01:30,069
I'd like to think
it's one of

3289
02:01:30,069 --> 02:01:31,250
the more fun assignments,

3290
02:01:31,250 --> 02:01:32,149
even if it's just

3291
02:01:32,149 --> 02:01:33,209
moving a circle
around the screen.

3292
02:01:33,209 --> 02:01:34,349
It's a bit more
fun than just

3293
02:01:34,349 --> 02:01:35,449
interacting with
a terminal.

3294
02:01:35,449 --> 02:01:37,869
Sometimes really get
passionate about it.

3295
02:01:37,869 --> 02:01:38,489
See if you can add

3296
02:01:38,489 --> 02:01:39,729
some Javascript to
your assignment,

3297
02:01:39,729 --> 02:01:41,089
your first assignment,

3298
02:01:41,089 --> 02:01:42,870
using some of this
functionality.

3299
02:01:42,870 --> 02:01:44,009
It should be quite
easy to make

3300
02:01:44,009 --> 02:01:45,609
that hamburger
icon function.

3301
02:01:45,609 --> 02:01:47,369
You think about it, all
you got to do is find

3302
02:01:47,369 --> 02:01:49,169
the hamburger icon add.

3303
02:01:49,169 --> 02:01:50,569
Maybe like a
class that sets

3304
02:01:50,569 --> 02:01:51,929
it to display none.

3305
02:01:51,929 --> 02:01:53,069
And then just toggle that

3306
02:01:53,069 --> 02:01:54,509
between being on and off.

3307
02:01:54,509 --> 02:01:56,310
It's a lot easier
in Javascript

3308
02:01:56,310 --> 02:01:57,689
than it was in CSS.

3309
02:01:57,689 --> 02:02:00,834
Again, be passionate
about it.

3310
02:02:00,834 --> 02:02:03,359
Something that Mark
taught me very early on.

3311
02:02:03,359 --> 02:02:03,759
Mark,

3312
02:02:03,759 --> 02:02:06,039
the software engineering
lecturer, said,

3313
02:02:06,039 --> 02:02:07,799
if you're very passionate
about something,

3314
02:02:07,799 --> 02:02:09,259
you tend to do
quite well in it

3315
02:02:09,259 --> 02:02:10,699
because you enjoy learning

3316
02:02:10,699 --> 02:02:11,859
about that
particular topic.

3317
02:02:11,859 --> 02:02:13,199
You want to learn more.

3318
02:02:13,199 --> 02:02:15,459
If you're not very
passionate about it,

3319
02:02:15,459 --> 02:02:17,459
you probably
won't do as well.

3320
02:02:17,459 --> 02:02:18,859
I know from experience the

3321
02:02:18,859 --> 02:02:20,814
modules I didn't
really enjoy,

3322
02:02:20,814 --> 02:02:22,749
I didn't do as
well in them.

3323
02:02:22,749 --> 02:02:24,869
But the ones I was
genuinely excited about,

3324
02:02:24,869 --> 02:02:26,969
the ones my friends were
really enjoying and

3325
02:02:26,969 --> 02:02:29,969
we were competing
Sometimes again,

3326
02:02:29,969 --> 02:02:31,909
I tend to do slightly
better in those ones.

3327
02:02:31,909 --> 02:02:34,829
I'm hoping people are
passionate about this.

3328
02:02:34,829 --> 02:02:38,109
Maybe you're not a
gamer, that's fine.

3329
02:02:38,109 --> 02:02:42,129
But this is quite a
different assignment

3330
02:02:42,129 --> 02:02:42,929
than some of
the other ones

3331
02:02:42,929 --> 02:02:43,709
you'll be used to.

3332
02:02:43,709 --> 02:02:45,429
Again, really try
and enjoy it.

3333
02:02:45,429 --> 02:02:46,629
I hope everyone has

3334
02:02:46,629 --> 02:02:48,649
a nice two weeks
off for Easter.

3335
02:02:48,649 --> 02:02:50,469
Hopefully, I'll
see everyone

3336
02:02:50,469 --> 02:02:52,189
who super refreshed
for a week.

3337
02:02:52,189 --> 02:02:56,989
Ten, yeah. Have a
good one, everyone.